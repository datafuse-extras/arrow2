var searchIndex = JSON.parse('{\
"arrow2":{"doc":"Welcome to arrow2’s documentation. Thanks for checking …","t":"DENNLLLLALLLLLLLLLLLLLLLLLALLLLALALLLLLLLALLALLLLLLLLLLLLLLLALLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLALLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLALLLALLLALLLLLLLALLALLLOLLLLIDDGDGGDIDDGGGGGGIGGGGGGGGGGGGSDGDGGIDDDDDDDDDDDDDDIIIGGGGGGGGDDGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLFALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLFLLLLLLLLLLKLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLIDDDDDDDDDDDDLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGFFFFDDDLLLFLLFFLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLFLLLLLLLLLFLLLLLLLLLLLLLLLLLLFFLLALFIIDDDDNNDEDLLLLLLLLLLLLLLLLLLFLLLLLLLLFFLLLLLLLLLLLLLLKFFLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLKLLLLFFFLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLAAAAAAAAAAAAAAAAAAAAAAAAAAASSIIFFFFFFFKKFFFFFKKFFKKKFFIIIIIIIIIIIIIIIIIIIFKFAFFFFFFKKKKKAFKFFKFFKKKFKKKKFKFAKKKIFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDLFFFFFFFFFLLFFLLFFFFFFLFFFFFFLLFLFFMFFFFFFFFFFFFFFFFFFFLLLLFFFFFFFFFMFFQIIIIAAFFFFFFFFFFFFFKFFFFFKKFKFKFFFKFKFFFKFFFAAFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGFFFFFFFFFFFFFFFFFFFFFGDCLLFFLLLFFLLFFLLLLFFFFFFFFDDLLLLLLFLLLLLMLLLLLLLLFFFMMAFFLLLLLLLLMDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFFFFFFFFFFFFFFFFFFFFFFFNNNNENNNNNNNNNNDNNNNNNNNNNNNNNNENENNNNNNNNNNGNNNNNNENCDGNNNNNNENNNNNNNNNNNENNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLMLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLENNNNNNNGLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDLLLLLLLLLLLLLLFFFLLLLLLLLFFLLLLALLLLLLLLLLLLLLFAAAAAAAAAAACAADLLFLFLLLLLLLLGFFFFAAADDDLLLLLLLLLLLLLLLLLLLLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLDDDDLLLLLLLLLLLLLLLLLLLLLLLLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLMMLMLLLLLLFMFMMMLLLLFFDMCFFFFFFFFDDLLALLLLLLLLLMLLMMLLLLLLMALLLLLLLLAGNDDNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENDDENNNLLMLLLLLLLLLLLLLLLLFALLLLLLLLLLLLLLLLLLLMMLLLLLLLFFFFLLMMLMALLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMDLLLLLLLFLLLLLDLLLLLLLFLLLLEDNDDDNLLLLLLLLLLLLLLLMFLLLLALLLLLLLLLLLLLLLLLLLLLFLLLALLLLLLLLLLLLLLLLFLLDLLLLLLLLLLLLDDLLLLLLLMLLLLLLLLLLLLLLLLLLLLLAAFFFFCDIDQIDDQDDDDDDDDDLKLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLFLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFDDDDDDDDLMMLLLLLLLLLLLLLLLLMMLLMMMMLLLLLLLLMMMMLLLLLLLLLLLLLLLLMMMLLLLLLLLMMMMMMMMAMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMAFFFFFAAQIDQKLLLLLLLFFLLLLLKLFFLLLLLLLLLLLLLLLLLQIDQDLKLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLCAAFFFDLLFLFLFLLLLLCAFFAAGDNNNNDDDNENNNNDNNNNQQINNDDNNNENENNNNNNNNNNQQNNNNNNNINGDNEGDIEEEENEENDDDDNENNDNNNNNNNNNNNNNNNNLLLLLLLLLLFFFKKLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFMLLLLLFFMLFLMLLLLLLLLLLLLCLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLFFFFFLLLLLLACFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLFMLLLLLLLLLLLLLLLLLLLLLLMLLMLLLFFFFFFFMALMLLLLALLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMDEDDNNLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLFLLLLLLMMMMLMMFFMMMLLLLLLLLLLLLLLDNDENDMMFMMMFFMMMMMMMMDLLFMLLLLMMMLLLNNNDNNDEEDNNNNNDNNNDDEQIDDDDNNNNDNNNQDNNNNNEEEENNNNNNGDDNNDNNNEDNDLLLLLLLLLLLLLLLLKLLLLFFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLFLLMLLLLMMMLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLCLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLFLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMMLLLLMMMLLLLLLLLLLLLLLLMLLLLLLLLLLLLMMLLLLLLLLLLLLMLLLLMFMMLLLMMLLLLLLFFLLLLLLLLFFLLLLLLLLLLLLLLLLFFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLFFFMLLLLMMMMFFFSIDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDDIDDDLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLRRRRRRFFFFFFFFFFFFFFFFFFFFFFFIIDDQNSNNNSIDNNNNNNNIISENNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLKKLLLLLLKLLLLKKLLLLLDLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLKLLLLLLKLLLLKLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLQISQQIIQLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDFFF","n":["AHashMap","Either","Left","Right","__clone_box","__clone_box","all","any","array","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_pin_mut","as_pin_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_uncased","bitmap","borrow","borrow","borrow_mut","borrow_mut","buffer","cause","chunk","clone","clone","clone_from","clone_into","clone_into","cmp","collect","compute","consume","count","datatypes","default","deref","deref","deref_mut","deref_mut","description","either","either_into","either_with","encode_hex","encode_hex_upper","eq","eq","equivalent","equivalent","error","expect_left","expect_right","extend","extend","extend","factor_err","factor_first","factor_none","factor_ok","factor_second","ffi","fill_buf","find","find_map","flip","flush","fmt","fmt","fmt","fold","for_each","from","from","from","from","from","from_iter","get","get_key_value","get_mut","hash","index","insert","into","into","into","into","into_future","into_inner","into_iter","into_iter","into_iter","into_iter","into_iter","into_keys","into_values","io","is_left","is_right","last","left","left_and_then","left_or","left_or_default","left_or_else","len","map","map_left","map_right","mmap","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","new","next","next_back","nth","offset","partial_cmp","partition","poll","position","provide","read","read_exact","read_line","read_to_end","read_to_string","read_until","read_varint","remove","rfind","rfold","right","right_and_then","right_or","right_or_default","right_or_else","scalar","seek","size_hint","source","temporal_conversions","to_owned","to_owned","to_string","trusted_len","try_from","try_from","try_into","try_into","try_poll","type_id","type_id","types","unwrap_left","unwrap_right","util","with_capacity","with_capacity_and_hasher","with_hasher","with_match_primitive_without_interval_type","write","write_all","write_fmt","write_varint","Array","ArrayValuesIter","BinaryArray","BinaryValueIter","BooleanArray","DaysMsArray","DaysMsVec","DictionaryArray","DictionaryKey","FixedSizeBinaryArray","FixedSizeListArray","Float16Array","Float16Vec","Float32Array","Float32Vec","Float64Array","Float64Vec","GenericBinaryArray","Int128Array","Int128Vec","Int16Array","Int16Vec","Int256Array","Int256Vec","Int32Array","Int32Vec","Int64Array","Int64Vec","Int8Array","Int8Vec","KEY_TYPE","ListArray","ListValuesIter","MapArray","MonthsDaysNsArray","MonthsDaysNsVec","MutableArray","MutableBinaryArray","MutableBinaryValuesArray","MutableBooleanArray","MutableDictionaryArray","MutableFixedSizeBinaryArray","MutableFixedSizeListArray","MutableListArray","MutablePrimitiveArray","MutableStructArray","MutableUtf8Array","MutableUtf8ValuesArray","NullArray","PrimitiveArray","StructArray","TryExtend","TryExtendFromSelf","TryPush","UInt16Array","UInt16Vec","UInt32Array","UInt32Vec","UInt64Array","UInt64Vec","UInt8Array","UInt8Vec","UnionArray","Utf8Array","Utf8ValuesIter","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","add","add","add","always_fits_usize","always_fits_usize","apply_validity","apply_validity","apply_validity","apply_values","apply_values_mut","arced","arced","arced","arced","arced","arced","arced","arced","arced","arced","arced","arced","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_box","as_box","as_box","as_box","as_box","as_box","as_box","as_box","as_box","as_box","as_box","as_box","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_ref","as_usize","as_usize","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","boxed","boxed","boxed","boxed","boxed","boxed","boxed","boxed","boxed","boxed","boxed","boxed","capacity","capacity","capacity","capacity","capacity","checked_add","checked_add","checked_add","checked_div","checked_div","checked_div","checked_mul","checked_mul","checked_mul","checked_rem","checked_rem","checked_sub","checked_sub","checked_sub","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","default","default","default","default","default","default","default","default","default","default","default_data_type","default_data_type","default_data_type","default_data_type","default_datatype","default_datatype","div","div","div","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equal","extend","extend","extend","extend","extend","extend","extend_constant","extend_from_slice","extend_trusted_len","extend_trusted_len","extend_trusted_len","extend_trusted_len","extend_trusted_len","extend_trusted_len","extend_trusted_len_unchecked","extend_trusted_len_unchecked","extend_trusted_len_unchecked","extend_trusted_len_unchecked","extend_trusted_len_unchecked","extend_trusted_len_unchecked","extend_trusted_len_values","extend_trusted_len_values","extend_trusted_len_values","extend_trusted_len_values","extend_trusted_len_values_unchecked","extend_trusted_len_values_unchecked","extend_trusted_len_values_unchecked","extend_trusted_len_values_unchecked","extend_values","extend_values","field","fields","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter_values","from_iter_values","from_iter_values","from_iter_values","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_trusted_len_iter","from_trusted_len_iter","from_trusted_len_iter","from_trusted_len_iter","from_trusted_len_iter","from_trusted_len_iter","from_trusted_len_iter","from_trusted_len_iter","from_trusted_len_iter","from_trusted_len_iter","from_trusted_len_iter_unchecked","from_trusted_len_iter_unchecked","from_trusted_len_iter_unchecked","from_trusted_len_iter_unchecked","from_trusted_len_iter_unchecked","from_trusted_len_iter_unchecked","from_trusted_len_iter_unchecked","from_trusted_len_iter_unchecked","from_trusted_len_iter_unchecked","from_trusted_len_iter_unchecked","from_trusted_len_values_iter","from_trusted_len_values_iter","from_trusted_len_values_iter","from_trusted_len_values_iter","from_trusted_len_values_iter","from_trusted_len_values_iter","from_trusted_len_values_iter","from_trusted_len_values_iter","from_trusted_len_values_iter_unchecked","from_trusted_len_values_iter_unchecked","from_trusted_len_values_iter_unchecked","from_trusted_len_values_iter_unchecked","from_trusted_len_values_iter_unchecked","from_trusted_len_values_iter_unchecked","from_values","from_vec","from_vec","get","get","get","get","get","get","get_child_field","get_child_type","get_display","get_fields","get_fields","get_mut_values","get_value_display","growable","index","index_unchecked","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_arc","into_arc","into_arc","into_arc","into_arc","into_arc","into_arc","into_box","into_box","into_data","into_data","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_mut","into_mut","into_mut","into_mut","is_empty","is_empty","is_null","is_ordered","is_sparse","is_valid","is_valid","iter","iter","iter","iter","iter","iter","iter","iter","iter","iter","iter","iter","iter","iter","iter","iter","iter","iter","iter_typed","iter_values","key_value","keys","keys","keys_iter","keys_values_iter","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","map","mul","mul","mul","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","mut_values","mut_values","mut_values","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty_array","new_from","new_from","new_null","new_null","new_null","new_null","new_null","new_null","new_null","new_null","new_null","new_null","new_null","new_null","new_null_array","new_unchecked","new_unchecked","new_unchecked","new_with_capacity","new_with_field","new_with_field","next","next_back","nth","null_count","offsets","offsets","offsets","offsets","offsets","offsets","offsets","offsets","offsets","offsets","offsets","offsets","offsets","ord","overflowing_add","overflowing_add","overflowing_mul","overflowing_mul","overflowing_sub","overflowing_sub","pop","pop","pop","pop","pop","pop","pop","push","push","push","push","push","push","push","push","push_null","push_null","push_null","push_null","push_null","push_null","push_null","push_null","push_null","push_null","push_null","push_null","push_null","rem","rem","reserve","reserve","reserve","reserve","reserve","reserve","reserve","reserve","reserve","reserve","reserve","reserve","reserve","reserve","reserve","reserve","reserve","reserve","reserve","reserve","reserve","reserve","reserve","saturating_add","saturating_add","saturating_add","saturating_mul","saturating_mul","saturating_mul","saturating_sub","saturating_sub","saturating_sub","set","set","set_unchecked","set_validity","set_validity","set_validity","set_validity","set_validity","set_validity","set_validity","set_validity","set_validity","set_validity","set_validity","set_validity","set_values","set_values","set_values","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","size","size","size","size","size_hint","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","sliced","sliced","sliced","sliced","sliced","sliced","sliced","sliced","sliced","sliced","sliced","sliced","sliced","sliced_unchecked","sliced_unchecked","sliced_unchecked","sliced_unchecked","sliced_unchecked","sliced_unchecked","sliced_unchecked","sliced_unchecked","sliced_unchecked","sliced_unchecked","sliced_unchecked","sliced_unchecked","sliced_unchecked","sub","sub","sub","to","to","to","to_boxed","to_boxed","to_boxed","to_boxed","to_boxed","to_boxed","to_boxed","to_boxed","to_boxed","to_boxed","to_boxed","to_boxed","to_boxed","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_extend","try_extend","try_extend","try_extend","try_extend","try_extend","try_extend","try_extend","try_extend","try_extend","try_extend_from_self","try_extend_from_self","try_extend_from_self","try_extend_from_self","try_extend_from_self","try_extend_from_self","try_extend_from_self","try_extend_from_self","try_extend_from_self","try_extend_from_self","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_iter","try_from_iter","try_from_iter","try_from_iter","try_from_keys","try_from_trusted_len_iter","try_from_trusted_len_iter","try_from_trusted_len_iter","try_from_trusted_len_iter","try_from_trusted_len_iter","try_from_trusted_len_iter","try_from_trusted_len_iter","try_from_trusted_len_iter_unchecked","try_from_trusted_len_iter_unchecked","try_from_trusted_len_iter_unchecked","try_from_trusted_len_iter_unchecked","try_from_trusted_len_iter_unchecked","try_from_trusted_len_iter_unchecked","try_from_trusted_len_iter_unchecked","try_get_child","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_new","try_new","try_new","try_new","try_new","try_new","try_new","try_new","try_new","try_new","try_new","try_new","try_new","try_new","try_new","try_new","try_new","try_new","try_new","try_new","try_new_unchecked","try_new_unchecked","try_push","try_push","try_push","try_push","try_push","try_push","try_push","try_push","try_push","try_push","try_push","try_push_valid","try_push_valid","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","types","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","value","value","value","value","value","value","value","value","value","value","value","value","value","value","value","value_unchecked","value_unchecked","value_unchecked","value_unchecked","value_unchecked","value_unchecked","value_unchecked","value_unchecked","value_unchecked","value_unchecked","value_unchecked","value_unchecked","value_unchecked","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values_iter","values_iter","values_iter","values_iter","values_iter","values_iter","values_iter","values_iter","values_iter","values_iter","values_iter","values_iter","values_iter","values_iter","values_iter_typed","values_mut_slice","values_mut_slice","with_capacities","with_capacities","with_capacities","with_capacities","with_capacity","with_capacity","with_capacity","with_capacity","with_capacity","with_capacity","with_capacity","with_capacity","with_capacity_from","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_values","with_values","wrapping_add","wrapping_mul","wrapping_sub","Growable","GrowableBinary","GrowableBoolean","GrowableDictionary","GrowableFixedSizeBinary","GrowableFixedSizeList","GrowableList","GrowableMap","GrowableNull","GrowablePrimitive","GrowableStruct","GrowableUnion","GrowableUtf8","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_box","as_box","as_box","as_box","as_box","as_box","as_box","as_box","as_box","as_box","as_box","as_box","as_box","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend_validity","extend_validity","extend_validity","extend_validity","extend_validity","extend_validity","extend_validity","extend_validity","extend_validity","extend_validity","extend_validity","extend_validity","extend_validity","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","len","len","len","len","len","len","len","len","len","len","len","len","len","make_growable","new","new","new","new","new","new","new","new","new","new","new","new","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","DynComparator","build_compare","total_cmp","total_cmp_f32","total_cmp_f64","Bitmap","IntoIter","MutableBitmap","__clone_box","__clone_box","__clone_box","and","as_slice","as_slice","binary","binary_assign","bitand","bitand","bitand_assign","bitor","bitor","bitor_assign","bitxor","bitxor","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","capacity","chunk_iter_to_vec","chunks","clear","clone","clone","clone","clone_into","clone_into","clone_into","default","default","eq","eq","extend_constant","extend_from_bitmap","extend_from_slice","extend_from_trusted_len_iter","extend_from_trusted_len_iter_unchecked","fmt","fmt","fmt","from","from","from","from","from","from","from_chunk_iter_unchecked","from_iter","from_iter","from_len_set","from_len_zeroed","from_trusted_len_iter","from_trusted_len_iter","from_trusted_len_iter_unchecked","from_trusted_len_iter_unchecked","from_u8_slice","from_u8_vec","from_vec","get","get","get_bit","get_bit_unchecked","into","into","into","into_iter","into_iter","into_iter","into_iter","into_mut","is_empty","is_empty","iter","iter","len","len","make_mut","new","new","new","new_zeroed","next","next_back","not","not","nth","null_count","null_count","null_count_range","or","pop","push","push_unchecked","quaternary","reserve","set","set_unchecked","shrink_to_fit","size_hint","slice","slice_unchecked","sliced","sliced_unchecked","ternary","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from_trusted_len_iter","try_from_trusted_len_iter","try_from_trusted_len_iter_unchecked","try_from_trusted_len_iter_unchecked","try_into","try_into","try_into","try_new","try_new","type_id","type_id","type_id","unary","unary_assign","unset_bits","unset_bits","utils","with_capacity","xor","BitChunk","BitChunkIterExact","BitChunks","BitChunksExact","BitChunksExactMut","BitmapIter","Optional","Required","SlicesIterator","ZipValidity","ZipValidityIter","__clone_box","__clone_box","__clone_box","__clone_box","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes_for","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","count_zeros","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_ne_bytes","get_bit","get_bit_unchecked","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_set","len","len","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","new","new","new","new","new","new","new","new_with_validity","next","next","next","next","next","next","next","next_back","next_back","next_back","nth","nth","nth","remainder","remainder","remainder","remainder","remainder","remainder","remainder_iter","remainder_iter","remainder_len","remainder_len","remainder_len","remainder_len","remainder_len","set","set_bit","set_bit_unchecked","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","slots","to_ne_bytes","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrap_optional","unwrap_required","Buffer","__clone_box","as_slice","borrow","borrow_mut","clone","clone_into","default","deref","eq","fmt","from","from","from_iter","get_mut","get_mut_slice","into","into_iter","into_mut","is_empty","len","new","offset","shared_count_strong","shared_count_weak","slice","slice_unchecked","sliced","sliced_unchecked","to_owned","try_from","try_into","type_id","Chunk","__clone_box","arrays","borrow","borrow_mut","clone","clone_into","columns","deref","eq","equivalent","fmt","from","into","into_arrays","is_empty","len","new","to_owned","try_from","try_into","try_new","type_id","aggregate","arithmetics","arity","arity_assign","bitwise","boolean","boolean_kleene","cast","comparison","concatenate","contains","filter","hash","if_then_else","length","like","limit","merge_sort","nullif","partition","regex_match","sort","substring","take","temporal","utf8","window","MAX","MIN","SimdOrd","Sum","can_max","can_min","can_sum","estimated_bytes_size","max","max_binary","max_boolean","max_element","max_lane","max_primitive","max_string","min","min_binary","min_boolean","min_element","min_lane","min_primitive","min_string","new_max","new_min","simd_sum","sum","sum_primitive","ArrayAdd","ArrayCheckedAdd","ArrayCheckedDiv","ArrayCheckedMul","ArrayCheckedRem","ArrayCheckedSub","ArrayDiv","ArrayMul","ArrayOverflowingAdd","ArrayOverflowingMul","ArrayOverflowingSub","ArrayRem","ArraySaturatingAdd","ArraySaturatingMul","ArraySaturatingSub","ArraySub","ArrayWrappingAdd","ArrayWrappingMul","ArrayWrappingSub","add","add","add_scalar","basic","can_add","can_div","can_mul","can_neg","can_rem","can_sub","checked_add","checked_div","checked_mul","checked_rem","checked_sub","decimal","div","div","div_scalar","mul","mul","mul_scalar","neg","overflowing_add","overflowing_mul","overflowing_sub","rem","rem","saturating_add","saturating_mul","saturating_sub","sub","sub","sub_scalar","time","wrapping_add","wrapping_mul","wrapping_sub","NativeArithmetics","add","add_scalar","checked_add","checked_add_scalar","checked_div","checked_div_scalar","checked_mul","checked_mul_scalar","checked_negate","checked_powf_scalar","checked_rem","checked_rem_scalar","checked_sub","checked_sub_scalar","div","div_scalar","mul","mul_scalar","negate","overflowing_add","overflowing_add_scalar","overflowing_mul","overflowing_mul_scalar","overflowing_sub","overflowing_sub_scalar","powf_scalar","rem","rem_scalar","saturating_add","saturating_add_scalar","saturating_mul","saturating_mul_scalar","saturating_sub","saturating_sub_scalar","sub","sub_scalar","wrapping_add","wrapping_add_scalar","wrapping_mul","wrapping_mul_scalar","wrapping_negate","wrapping_sub","wrapping_sub_scalar","adaptive_add","adaptive_div","adaptive_mul","adaptive_sub","add","checked_add","checked_div","checked_mul","checked_sub","div","div_scalar","mul","mul_scalar","saturating_add","saturating_div","saturating_mul","saturating_sub","sub","add_duration","add_duration_scalar","add_interval","add_interval_scalar","sub_duration_scalar","sub_timestamps_scalar","subtract_duration","subtract_timestamps","binary","binary_checked","binary_with_bitmap","try_binary","try_unary","unary","unary_checked","unary_with_bitmap","binary","unary","and","and_scalar","not","or","or_scalar","xor","xor_scalar","all","and","and_scalar","any","is_not_null","is_null","not","or","or_scalar","all","and","and_scalar","any","or","or_scalar","CastOptions","__clone_box","binary_large_to_binary","binary_to_dictionary","binary_to_large_binary","binary_to_large_utf8","binary_to_primitive","binary_to_utf8","boolean_to_binary","boolean_to_primitive","boolean_to_utf8","borrow","borrow_mut","can_cast_types","cast","clone","clone_into","date32_to_date64","date64_to_date32","days_ms_to_months_days_ns","decimal_to_decimal","decimal_to_float","decimal_to_integer","default","dictionary_to_dictionary_keys","dictionary_to_dictionary_values","dictionary_to_values","f16_to_f32","fixed_size_binary_binary","float_to_decimal","fmt","from","integer_to_decimal","into","months_to_months_days_ns","naive_timestamp_to_utf8","partial","partial_binary_to_primitive","partial_utf8_to_primitive","primitive_as_primitive","primitive_to_binary","primitive_to_boolean","primitive_to_dictionary","primitive_to_primitive","primitive_to_same_primitive","primitive_to_utf8","time32_to_time64","time32ms_to_time32s","time32s_to_time32ms","time64_to_time32","time64ns_to_time64us","time64us_to_time64ns","timestamp_to_date32","timestamp_to_date64","timestamp_to_timestamp","timestamp_to_utf8","to_owned","try_from","try_into","type_id","utf8_large_to_utf8","utf8_to_binary","utf8_to_date32","utf8_to_date64","utf8_to_dictionary","utf8_to_large_utf8","utf8_to_naive_timestamp_ns","utf8_to_primitive","utf8_to_timestamp_ns","wrapped","wrapping_dictionary_to_dictionary_keys","wrapping_dictionary_to_dictionary_values","Simd","Simd8","Simd8Lanes","Simd8PartialEq","Simd8PartialOrd","binary","boolean","can_eq","can_eq_scalar","can_gt","can_gt_eq","can_gt_eq_scalar","can_gt_scalar","can_lt","can_lt_eq","can_lt_eq_scalar","can_lt_scalar","can_neq","can_neq_scalar","eq","eq","eq_and_validity","eq_scalar","eq_scalar_and_validity","finish_eq_validities","finish_neq_validities","from_chunk","from_incomplete_chunk","gt","gt","gt_eq","gt_eq","gt_eq_scalar","gt_scalar","lt","lt","lt_eq","lt_eq","lt_eq_scalar","lt_scalar","neq","neq","neq_and_validity","neq_scalar","neq_scalar_and_validity","primitive","utf8","eq","eq_and_validity","eq_scalar","eq_scalar_and_validity","gt","gt_eq","gt_eq_scalar","gt_scalar","lt","lt_eq","lt_eq_scalar","lt_scalar","neq","neq_and_validity","neq_scalar","neq_scalar_and_validity","compare_op_scalar","eq","eq_and_validity","eq_scalar","eq_scalar_and_validity","gt","gt_eq","gt_eq_scalar","gt_scalar","lt","lt_eq","lt_eq_scalar","lt_scalar","neq","neq_and_validity","neq_scalar","neq_scalar_and_validity","compare_op_scalar","eq","eq_and_validity","eq_scalar","eq_scalar_and_validity","gt","gt_eq","gt_eq_scalar","gt_scalar","lt","lt_eq","lt_eq_scalar","lt_scalar","neq","neq_and_validity","neq_scalar","neq_scalar_and_validity","eq","eq_and_validity","eq_scalar","eq_scalar_and_validity","gt","gt_eq","gt_eq_scalar","gt_scalar","lt","lt_eq","lt_eq_scalar","lt_scalar","neq","neq_and_validity","neq_scalar","neq_scalar_and_validity","concatenate","contains","Filter","build_filter","filter","filter_chunk","can_hash","hash","hash_binary","hash_boolean","hash_primitive","hash_utf8","if_then_else","can_length","length","like_binary","like_binary_scalar","like_utf8","like_utf8_scalar","nlike_binary","nlike_binary_scalar","nlike_utf8","nlike_utf8_scalar","limit","MergeSlice","MergeSortSlices","SortOptions","borrow","borrow_mut","build_comparator","build_comparator_impl","from","into","into_iter","merge_sort","merge_sort_slices","multiunzip","next","slices","take_arrays","to_vec","try_from","try_into","type_id","can_nullif","nullif","nullif_scalar","primitive_nullif","primitive_nullif_scalar","lexicographical_partition_ranges","regex_match","regex_match_scalar","SortColumn","SortOptions","__clone_box","__clone_box","borrow","borrow","borrow_mut","borrow_mut","can_sort","clone","clone","clone_into","clone_into","default","descending","eq","equivalent","fmt","fmt","from","from","into","into","lexsort","lexsort_to_indices","lexsort_to_indices_impl","nulls_first","options","row","sort","sort_to_indices","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","values","Row","RowConverter","Rows","RowsIter","SortField","__clone_box","__clone_box","as_ref","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","convert_columns","encode_hex","encode_hex_upper","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","hash","into","into","into","into","into","into_iter","into_iter","iter","len","len","new","new","new_with_options","next","next_back","partial_cmp","row","row_unchecked","size_hint","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","can_substring","substring","can_take","take","can_day","can_hour","can_iso_week","can_minute","can_month","can_nanosecond","can_second","can_weekday","can_year","day","hour","iso_week","minute","month","nanosecond","second","weekday","year","can_lower","can_upper","lower","upper","utf8_apply","shift","Binary","Binary","Boolean","Boolean","DataType","Date32","Date64","DayTime","Decimal","Decimal256","Dense","Dictionary","Dictionary","Duration","Extension","Field","FixedSizeBinary","FixedSizeBinary","FixedSizeList","FixedSizeList","Float16","Float32","Float64","Int16","Int16","Int32","Int32","Int64","Int64","Int8","Int8","IntegerType","Interval","IntervalUnit","LargeBinary","LargeBinary","LargeList","LargeList","LargeUtf8","LargeUtf8","List","List","Map","Map","Metadata","Microsecond","Millisecond","MonthDayNano","Nanosecond","Null","Null","PhysicalType","Primitive","PrimitiveType","Schema","SchemaRef","Second","Sparse","Struct","Struct","Time32","Time64","TimeUnit","Timestamp","UInt16","UInt16","UInt32","UInt32","UInt64","UInt64","UInt8","UInt8","Union","Union","UnionMode","Utf8","Utf8","YearMonth","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","data_type","data_type","default","eq","eq","eq","eq","eq","eq","eq","eq","eq_primitive","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fields","filter","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","get_extension","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","is_dense","is_nullable","is_sparse","metadata","metadata","name","new","sparse","to_logical_type","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_physical_type","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_metadata","with_metadata","Error","External","ExternalFormat","InvalidArgumentError","Io","NotYetImplemented","OutOfSpec","Overflow","Result","borrow","borrow_mut","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_external_error","into","provide","to_string","try_from","try_into","type_id","ArrowArray","ArrowArrayStream","ArrowArrayStreamReader","ArrowSchema","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","drop","drop","drop","empty","empty","empty","export_array_to_c","export_field_to_c","export_iterator","field","fmt","fmt","fmt","from","from","from","from","import_array_from_c","import_field_from_c","into","into","into","into","mmap","next","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_new","type_id","type_id","type_id","type_id","slice","avro","csv","flight","ipc","json","json_integration","ndjson","odbc","orc","parquet","print","avro_schema","read","write","Reader","borrow","borrow_mut","deserialize","from","infer_schema","into","into_inner","into_iter","new","next","try_from","try_into","type_id","BoxSerializer","can_serialize","new_serializer","serialize","to_record","read","read_async","write","ByteRecord","Reader","ReaderBuilder","__clone_box","as_slice","ascii","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","buffer_capacity","byte_headers","byte_records","clear","clone","clone_into","comment","default","default","delimiter","deserialize","deserialize","deserialize_batch","deserialize_column","double_quote","eq","eq","eq","eq","eq","equivalent","escape","extend","flexible","fmt","fmt","fmt","from","from","from","from","from","from","from_iter","from_path","from_path","from_reader","from_reader","get","get_mut","get_ref","has_headers","has_headers","headers","index","infer","infer_schema","into","into","into","into_byte_records","into_deserialize","into_inner","into_iter","into_records","is_done","is_empty","iter","len","new","new","position","position","push_field","quote","quoting","range","read_byte_record","read_record","read_rows","records","seek","seek_raw","set_byte_headers","set_headers","set_position","terminator","to_owned","trim","trim","truncate","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_capacity","AsyncReader","AsyncReaderBuilder","ByteRecord","CSVError","__clone_box","as_slice","ascii","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer_capacity","byte_headers","byte_records","clear","clone","clone_into","comment","create_deserializer","create_reader","custom","default","default","delimiter","deserialize","deserialize_batch","deserialize_column","double_quote","end_on_io_error","eq","eq","eq","eq","eq","equivalent","escape","extend","flexible","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_iter","from_reader","get","get_mut","get_ref","has_headers","has_headers","headers","index","infer","infer_schema","into","into","into","into","into_byte_records","into_inner","into_iter","into_kind","into_records","is_done","is_empty","is_io_error","iter","kind","len","new","new","position","position","position","provide","push_field","quote","quoting","range","read_byte_record","read_record","read_rows","records","rewind","seek","seek_raw","set_byte_headers","set_headers","set_position","source","terminator","to_owned","to_string","trim","trim","truncate","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","with_capacity","SerializeOptions","__clone_box","borrow","borrow_mut","clone","clone_into","date32_format","date64_format","default","delimiter","eq","equivalent","fmt","from","hash","into","new_serializer","quote","serialize","time32_format","time64_format","timestamp_format","to_owned","try_from","try_into","type_id","write_chunk","write_header","WriteOptions","compression","default_ipc_fields","deserialize_batch","deserialize_dictionary","deserialize_message","deserialize_schemas","serialize_batch","serialize_schema","serialize_schema_to_info","serialize_schema_to_result","IpcField","IpcSchema","__clone_box","__clone_box","append","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","dictionary_id","eq","eq","fields","fields","fmt","fmt","from","from","into","into","is_little_endian","read","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","write","Dictionaries","ExpectedBuffer","FileMetadata","FileReader","InvalidBitmap","InvalidBuffer","InvalidBuffersLength","InvalidFlatbufferBlock","InvalidFlatbufferBodyLength","InvalidFlatbufferBuffers","InvalidFlatbufferCompression","InvalidFlatbufferData","InvalidFlatbufferDictionaries","InvalidFlatbufferFooter","InvalidFlatbufferHeader","InvalidFlatbufferId","InvalidFlatbufferIsDelta","InvalidFlatbufferMessage","InvalidFlatbufferNodes","InvalidFlatbufferRecordBatches","InvalidFlatbufferSchema","InvalidFlatbufferVersion","InvalidFooter","InvalidHeader","InvalidId","InvalidIdDataType","MissingData","MissingFields","MissingMessageBuffers","MissingMessageHeader","MissingMessageNodes","MissingRecordBatches","MissingSchema","NegativeFooterLength","OutOfSpecKind","Some","StreamMetadata","StreamReader","StreamState","UnexpectedMessageType","UnexpectedNegativeInteger","Waiting","__clone_box","__clone_box","blocks","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deserialize_schema","file_async","fmt","fmt","fmt","from","from","from","from","from","from","get_scratches","into","into","into","into","into","into","into_inner","into_iter","into_iter","ipc_schema","ipc_schema","is_finished","metadata","metadata","new","new","next","next","read_batch","read_file_dictionaries","read_file_metadata","read_stream_metadata","schema","schema","schema","schema","set_scratches","size","stream_async","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","unwrap","version","buffer_length","buffers_size","file_size","length","length","number_of_bits","requested_id","requested_id","required_number_of_bytes","type_name","FileStream","borrow","borrow_mut","from","into","metadata","new","poll_next","read_file_metadata_async","schema","try_from","try_into","try_poll_next","type_id","AsyncStreamReader","borrow","borrow_mut","from","into","metadata","new","poll_next","read_stream_metadata_async","try_from","try_into","try_poll_next","type_id","Compression","FileWriter","LZ4","Record","StreamWriter","WriteOptions","ZSTD","__clone_box","__clone_box","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","columns","compression","default_ipc_fields","eq","eq","equivalent","fields","file_async","finish","finish","fmt","fmt","from","from","from","from","from","from","from","get_scratches","hash","into","into","into","into","into_inner","into_inner","new","new","schema_to_bytes","set_scratches","start","start","stream_async","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from_file","try_into","try_into","try_into","try_into","try_new","type_id","type_id","type_id","type_id","write","write","write","FileSink","borrow","borrow_mut","from","into","new","poll_close","poll_flush","poll_ready","start_send","try_from","try_into","type_id","StreamSink","WriteOptions","__clone_box","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","compression","default","eq","equivalent","fmt","from","from","hash","into","into","new","poll_close","poll_flush","poll_ready","start_send","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","read","write","deserialize","deserialize_records","infer","infer_records_schema","json_deserializer","Convert","DoubleEndedFallibleStreamingIterator","Empty","Error","FallibleStreamingIterator","Filter","Fuse","Item","Map","MapErr","MapRef","RecordSerializer","Serializer","Skip","SkipWhile","Take","TakeWhile","__clone_box","advance","advance","advance","advance","advance","advance","advance","advance","advance","advance","advance","advance","advance","advance","advance_back","advance_back","advance_back","advance_back","advance_back","advance_back","all","any","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","by_ref","clone","clone_into","convert","count","empty","filter","find","fmt","for_each","from","from","from","from","from","from","from","from","from","from","from","from","from","fuse","get","get","get","get","get","get","get","get","get","get","get","get","get","get","into","into","into","into","into","into","into","into","into","into","into","into","into","map","map_err","map_ref","new","new","next","next","next","next_back","next_back","nth","position","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","skip","skip_while","take","take_while","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write","ArrowJson","ArrowJsonBatch","ArrowJsonColumn","ArrowJsonDictionaryBatch","ArrowJsonField","ArrowJsonFieldDictionary","ArrowJsonSchema","IntegerType","__clone_box","batches","bit_width","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","children","children","clone","clone_into","columns","count","data","data","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","dictionaries","dictionary","field_type","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","id","id","index_type","into","into","into","into","into","into","into","into","is_ordered","is_signed","metadata","metadata","name","name","nullable","offset","read","schema","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","validity","write","deserialize_chunk","deserialize_schema","to_array","serialize_chunk","serialize_schema","read","write","Error","FallibleStreamingIterator","FileReader","Item","advance","advance","all","any","borrow","borrow_mut","by_ref","count","deserialize","deserialize_iter","filter","find","for_each","from","fuse","get","get","infer","infer_iter","into","into_inner","map","map_err","map_ref","new","next","nth","position","size_hint","skip","skip_while","take","take_while","try_from","try_into","type_id","Error","FallibleStreamingIterator","FileWriter","Item","Serializer","__clone_box","advance","advance","all","any","borrow","borrow","borrow_mut","borrow_mut","by_ref","clone","clone_into","count","filter","find","fmt","for_each","from","from","fuse","get","get","into","into","into_inner","into_iter","map","map_err","map_ref","new","new","next","next","nth","position","size_hint","skip","skip_while","take","take_while","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","api","read","write","buffer_from_metadata","deserialize","infer_schema","Writer","borrow","borrow_mut","buffer_from_description","from","infer_descriptions","into","serialize","try_from","try_into","try_new","type_id","write","format","read","deserialize","infer_schema","read","write","ArrayIter","BasicDecompressor","Boolean","Bson","Bson","ByteArray","ColumnChunkMetaData","ColumnDescriptor","CompressedDataPage","Data","DataPageHeader","Date","Date","Decimal","Decimal","Decompressor","Dict","Double","Enum","Enum","Error","Error","FallibleStreamingIterator","FeatureNotActive","FeatureNotSupported","FileMetaData","FileReader","Finished","FixedLenByteArray","Float","GroupLogicalType","GroupType","InitNested","Int16","Int32","Int32","Int64","Int64","Int8","Int96","Integer","Interval","InvalidParameter","Item","Item","Json","Json","List","List","Map","Microseconds","Milliseconds","MutStreamingIterator","Nanoseconds","NestedArrayIter","NestedState","OutOfSpec","Page","PageFilter","PageReader","Pages","ParquetError","ParquetTimeUnit","ParquetType","PhysicalType","Primitive","PrimitiveConvertedType","PrimitiveLogicalType","PrimitiveType","ReadColumnIterator","RowGroupDeserializer","RowGroupMetaData","RowGroupReader","Some","State","String","Struct","StructIterator","Time","TimeMicros","TimeMillis","Timestamp","TimestampMicros","TimestampMillis","Uint16","Uint32","Uint64","Uint8","Unknown","Utf8","Uuid","V1","V2","WouldOverAllocate","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","_read_columns_indexes","_read_metadata","_read_metadata_async","advance","advance","advance","advance","advance","all","any","base_type","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","by_ref","byte_range","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","column_chunk","column_encoding","column_iter_to_arrays","column_orders","columns","compressed_size","compressed_size","compression","count","create_list","create_map","created_by","data_page_offset","decompress","descriptor","descriptor","dictionary_page_offset","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","fallible_streaming_iterator","file_offset","file_path","filter","find","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","for_each","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","fuse","get","get","get","get","get","get_column_iterator","get_field_columns","get_field_pages","get_page_iterator","get_page_stream","has_index_page","hash","hash","hash","hash","index_page_offset","indexes","infer_schema","init_nested","int96_to_i64_ns","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_buffers","into_inner","into_inner","into_iter","into_iter","into_iter","into_iter","into_iter","into_thrift","key_value_metadata","len","map","map_err","map_ref","metadata","n_columns","nested","new","new","new","new","new","new","new","new","new","new","new","new","new_with_page_meta","next","next","next","next","next","next","nth","num_rows","num_rows","num_rows","num_values","num_values","path_in_schema","physical_type","position","provide","read_columns","read_columns_async","read_columns_many","read_columns_many_async","read_metadata","read_metadata_async","read_pages_locations","row_groups","schema","schema","schema_descr","size_hint","size_hint","skip","skip_while","statistics","statistics","swap_buffer","take","take_while","to_deserializer","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","total_byte_size","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uncompressed_size","version","converted_type","field_info","fields","logical_type","is_adjusted_to_utc","is_adjusted_to_utc","unit","unit","ColumnPageStatistics","FieldPageStatistics","FilteredPage","Interval","Multiple","Single","__clone_box","__clone_box","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","compute_page_row_intervals","eq","eq","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from","has_indexes","hash","hash","into","into","into","into","length","length","max","min","new","null_count","num_rows","read_columns_indexes","read_filtered_pages","selected_rows","start","start","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","FileMetaData","GroupType","KeyValue","ParquetType","PrimitiveType","SchemaDescriptor","column_orders","created_by","infer_schema","key","key_value_metadata","num_rows","parquet_to_arrow_schema","read_schema_from_metadata","row_groups","schema_descr","value","version","converted_type","field_info","fields","logical_type","Statistics","borrow","borrow_mut","deserialize","distinct_count","eq","fmt","from","into","max_value","min_value","null_count","try_from","try_into","type_id","BitPacked","Boolean","Brotli","BrotliLevel","ByteArray","ByteStreamSplit","CompressedDataPage","CompressedPage","CompressionOptions","Compressor","Data","Data","DeltaBinaryPacked","DeltaByteArray","DeltaLengthByteArray","Descriptor","Dict","Dict","Double","DynIter","DynStreamingIterator","Encoding","Error","FallibleStreamingIterator","FieldInfo","FileMetaData","FileSink","FileWriter","FixedLenByteArray","Float","GroupType","Gzip","GzipLevel","Int32","Int64","Int96","Item","KeyValue","LargeList","List","Lz4","Lz4Raw","Lzo","Nested","Page","ParquetPhysicalType","ParquetType","Plain","PlainDictionary","Primitive","PrimitiveType","Rle","RleDictionary","RowGroupIter","RowGroupIterator","SchemaDescriptor","Snappy","Struct","ThriftFileMetaData","Uncompressed","V1","V2","Version","WriteOptions","Zstd","ZstdLevel","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","advance","advance","advance","all","any","array_to_columns","array_to_page","array_to_page_simple","array_to_pages","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer_mut","by_ref","can_encode","check_contains","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","column_order","column_orders","column_orders","columns","compress","compressed_size","compression","compression","compression_level","compression_level","compression_level","count","created_by","created_by","data_pagesize_limit","default","default","default","encryption_algorithm","end","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fallible_streaming_iterator","fields","filter","find","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","footer_signing_key_metadata","for_each","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_converted","from_group","from_physical","fuse","get","get","get","get_field_info","get_max_length","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","header","id","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_inner","into_inner_and_metadata","into_iter","into_iter","into_thrift","is_compressed","key","key_value_metadata","key_value_metadata","key_value_metadata","len","map","map_err","map_ref","max_def_level","max_rep_level","metadata","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","name","name","name","new","new","new","new","new","new","new","new_from_vec","next","next","next","nth","num_rows","num_rows","num_values","options","options","parquet_schema","parquet_schema","parquet_schema","partial_cmp","partial_cmp","poll_close","poll_flush","poll_ready","position","primitive_type","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","repetition","row_group_iter","row_groups","row_groups","schema","schema","schema","schema","schema_descr","selected_rows","size_hint","size_hint","size_hint","skip","skip_while","slice_nested_leaf","slice_parquet_array","start_send","statistics","stream_from_in_protocol","stream_from_in_protocol","stream_from_in_protocol","stream_from_in_protocol","take","take_while","to_leaves","to_nested","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_parquet_leaves","to_parquet_schema","to_parquet_type","transverse","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_message","try_from_primitive","try_from_thrift","try_from_thrift","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_new","try_new","try_new","try_new","try_new","try_new","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uncompressed_size","value","version","version","version","write","write_def_levels","write_metadata_sidecar","write_rep_and_def","write_statistics","write_to_out_protocol","write_to_out_protocol","write_to_out_stream_protocol","write_to_out_stream_protocol","converted_type","field_info","fields","logical_type","write","mmap_dictionaries_unchecked","mmap_unchecked","IS_LARGE","Offset","Offsets","OffsetsBuffer","__clone_box","__clone_box","as_slice","as_slice","borrow","borrow","borrow_mut","borrow_mut","buffer","capacity","clone","clone","clone_into","clone_into","default","default","deref","eq","eq","equivalent","extend_constant","first","fmt","fmt","from","from","from","from","from","into","into","into_inner","into_inner","into_mut","last","last","len","len","len_proxy","lengths","new","new","new_unchecked","new_unchecked","new_zeroed","pop","range","reserve","shrink_to_fit","slice","slice_unchecked","start_end","start_end","start_end_unchecked","start_end_unchecked","to_owned","to_owned","try_extend_from_lengths","try_extend_from_self","try_extend_from_slice","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_iter","try_from_lengths","try_into","try_into","try_push","try_push_usize","type_id","type_id","with_capacity","BinaryScalar","BooleanScalar","DictionaryScalar","FixedSizeBinaryScalar","FixedSizeListScalar","ListScalar","NullScalar","PrimitiveScalar","Scalar","StructScalar","UnionScalar","Utf8Scalar","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","default","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","new","new","new","new","new","new","new","new","new","new","new","new_scalar","to","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value","value","value","value","value","value","values","values","values","EPOCH_DAYS_FROM_CE","MICROSECONDS","MILLISECONDS","MILLISECONDS_IN_DAY","NANOSECONDS","SECONDS_IN_DAY","add_interval","add_naive_interval","date32_to_date","date32_to_datetime","date64_to_date","date64_to_datetime","parse_offset","parse_offset_tz","time32ms_to_time","time32s_to_time","time64ns_to_time","time64us_to_time","timestamp_ms_to_datetime","timestamp_ns_to_datetime","timestamp_s_to_datetime","timestamp_to_datetime","timestamp_to_naive_datetime","timestamp_us_to_datetime","timeunit_scale","utf8_to_naive_timestamp_ns","utf8_to_naive_timestamp_ns_scalar","utf8_to_timestamp_ns","utf8_to_timestamp_ns_scalar","TrustedLen","BitChunk","BitChunkIter","BitChunkOnes","Bytes","DaysMs","EPSILON","Float16","Float32","Float64","IS_LARGE","Index","IndexRange","Int128","Int16","Int256","Int32","Int64","Int8","MonthDayNano","NativeType","Offset","PRIMITIVE","PrimitiveType","UInt16","UInt32","UInt64","UInt8","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","days","days","days_ms","default","default","default","default","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","f16","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_as_usize","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_bits","from_f32","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_ne_bytes","from_usize","from_words","hash","hash","hash","hash","i256","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","milliseconds","months","months_days_ns","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","neg","neg","neg","new","new","new","new","new","next","next","next","ns","partial_cmp","range","range","simd","size_hint","size_hint","size_hint","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_bits","to_f32","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_ne_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_usize","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Chunk","FromMaskChunk","LANES","Mask","Native","NativeSimd","Simd","Simd","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","align","align","align","align","align","align","align","align","align","align","align","align","align","align","align","align","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","days_msx8","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","f16x32","f32x16","f64x8","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","i128x8","i16x32","i256x8","i32x16","i64x8","i8x64","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","max_element","max_element","max_element","max_element","max_element","max_element","max_element","max_element","max_element","max_element","max_element","max_lane","max_lane","max_lane","max_lane","max_lane","max_lane","max_lane","max_lane","max_lane","max_lane","max_lane","min_element","min_element","min_element","min_element","min_element","min_element","min_element","min_element","min_element","min_element","min_element","min_lane","min_lane","min_lane","min_lane","min_lane","min_lane","min_lane","min_lane","min_lane","min_lane","min_lane","months_days_nsx8","new_max","new_max","new_max","new_max","new_max","new_max","new_max","new_max","new_max","new_max","new_max","new_min","new_min","new_min","new_min","new_min","new_min","new_min","new_min","new_min","new_min","new_min","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","simd_sum","simd_sum","simd_sum","simd_sum","simd_sum","simd_sum","simd_sum","simd_sum","simd_sum","simd_sum","simd_sum","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u16x32","u32x16","u64x8","u8x64","lexical_to_bytes","lexical_to_bytes_mut","lexical_to_string"],"q":["arrowarrow2::arrayarrow2::array::growablearrow2::array::ord","","","","","arrow2::bitmap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::bitmap::utilsarrow2::buffer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::chunk","","","","","","","","","","","","","","","","","","","","","","","arrow2::compute","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::compute::aggregate","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::compute::arithmetics","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::compute::arithmetics::basic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::compute::arithmetics::decimal","","","","","","","","","","","","","","","","","","arrow2::compute::arithmetics::time","","","","","","","","arrow2::compute::arity","","","","","","","","arrow2::compute::arity_assign","","arrow2::compute::bitwise","","","","","","","arrow2::compute::boolean","","","","","","","","","arrow2::compute::boolean_kleene","","","","","","arrow2::compute::cast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::compute::comparison","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::compute::comparison::binary","","","","","","","","","","","","","","","","arrow2::compute::comparison::boolean","","","","","","","","","","","","","","","","","arrow2::compute::comparison::primitive","","","","","","","","","","","","","","","","","arrow2::compute::comparison::utf8","","","","","","","","","","","","","","","","arrow2::compute::concatenate","arrow2::compute::contains","arrow2::compute::filter","","","","arrow2::compute::hash","","","","","","arrow2::compute::if_then_else","arrow2::compute::length","","arrow2::compute::like","","","","","","","","arrow2::compute::limit","arrow2::compute::merge_sort","","","","","","","","","","","","","","","","","","","","arrow2::compute::nullif","","","","","arrow2::compute::partition","arrow2::compute::regex_match","","arrow2::compute::sort","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::compute::sort::row","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::compute::substring","","arrow2::compute::take","","arrow2::compute::temporal","","","","","","","","","","","","","","","","","","arrow2::compute::utf8","","","","","arrow2::compute::window","arrow2::datatypesarrow2::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::ffi","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::ffi::mmap","arrow2::io","","","","","","","","","","","arrow2::io::avro","","","arrow2::io::avro::read","","","","","","","","","","","","","","arrow2::io::avro::write","","","","","arrow2::io::csv","","","arrow2::io::csv::read","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::csv::read_async","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::csv::write","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::flight","","","","","","","","","","","arrow2::io::ipc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::ipc::read","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::ipc::read::OutOfSpecKind","","","","","","","","","","arrow2::io::ipc::read::file_async","","","","","","","","","","","","","","arrow2::io::ipc::read::stream_async","","","","","","","","","","","","","arrow2::io::ipc::write","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::ipc::write::file_async","","","","","","","","","","","","","arrow2::io::ipc::write::stream_async","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::json","","arrow2::io::json::read","","","","","arrow2::io::json::writearrow2::io::json_integration","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::json_integration::read","","","arrow2::io::json_integration::write","","arrow2::io::ndjson","","arrow2::io::ndjson::read","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::ndjson::write","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::odbc","","","arrow2::io::odbc::read","","","arrow2::io::odbc::write","","","","","","","","","","","","","arrow2::io::orc","","arrow2::io::orc::read","","arrow2::io::parquet","","arrow2::io::parquet::read","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::parquet::read::ParquetType","","","","arrow2::io::parquet::read::PrimitiveLogicalType","","","","arrow2::io::parquet::read::indexes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::parquet::read::schema","","","","","","","","","","","","","","","","","","arrow2::io::parquet::read::schema::ParquetType","","","","arrow2::io::parquet::read::statistics","","","","","","","","","","","","","","","arrow2::io::parquet::writearrow2::io::parquet::write::ParquetType","","","","arrow2::io::print","arrow2::mmap","","arrow2::offset","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::scalararrow2::temporal_conversions","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::trusted_len","arrow2::typesarrow2::types::simdarrow2::util","",""],"d":["A <code>HashMap</code> using <code>RandomState</code> to hash the items. (Requires …","The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …","A value of type <code>L</code>.","A value of type <code>R</code>.","","","","","Contains the <code>Array</code> and <code>MutableArray</code> trait objects …","","","Convert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.","","","","","Convert <code>Pin&lt;&amp;mut Either&lt;L, R&gt;&gt;</code> to …","Convert <code>Pin&lt;&amp;Either&lt;L, R&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;L&gt;, Pin&lt;&amp;R&gt;&gt;</code>, …","","","","","Convert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.","","","","contains <code>Bitmap</code> and <code>MutableBitmap</code>, containers of <code>bool</code>.","","","","","Contains <code>Buffer</code>, an immutable container for all Arrow …","","Contains <code>Chunk</code>, a container of <code>Array</code> where every array has …","","","","","","","","contains a wide range of compute operations (e.g. …","","","Contains all metadata, such as <code>PhysicalType</code>, <code>DataType</code>, …","","","","","","","Apply one of two functions depending on contents, unifying …","Convert the contained value into <code>T</code>","Like <code>either</code>, but provide some context to whichever of the …","","","","","","","Defines <code>Error</code>, representing all errors returned by this …","Returns the left value","Returns the right value","","","","Factors out a homogenous type from an <code>Either</code> of <code>Result</code>.","Factor out a homogeneous type from an either of pairs.","Factors out <code>None</code> from an <code>Either</code> of <code>Option</code>.","Factors out a homogenous type from an <code>Either</code> of <code>Result</code>.","Factor out a homogeneous type from an either of pairs.","contains FFI bindings to import and export <code>Array</code> via Arrow…","","","","Convert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Examples","This crates a hashmap from the provided iterator using …","Returns a reference to the value corresponding to the key.","Returns the key-value pair corresponding to the supplied …","Returns a mutable reference to the value corresponding to …","","Returns a reference to the value corresponding to the …","Inserts a key-value pair into the map.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Extract the value of an either over two equivalent types.","","Convert the inner value to an iterator.","","","","Creates a consuming iterator visiting all the keys in …","Creates a consuming iterator visiting all the values in …","Contains modules to interface with other formats such as …","Return true if the value is the <code>Left</code> variant.","Return true if the value is the <code>Right</code> variant.","","Convert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Return left value or given value","Return left or a default","Returns left value or computes it from a closure","","Map <code>f</code> over the contained value and return the result in the","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Memory maps regions defined on the IPC format into <code>Array</code>.","","","","","","","","","","","","","","This crates a hashmap using RandomState::new which obtains …","","","","Contains the declaration of <code>Offset</code>","","","","","","","","","","","","","Removes a key from the map, returning the value at the key …","","","Convert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Return right value or given value","Return right or a default","Returns right value or computes it from a closure","contains the <code>Scalar</code> trait object representing individual …","","","","Conversion methods for dates and times.","","","","Declares <code>TrustedLen</code>.","","","","","","","","Sealed traits and implementations to handle all <em>physical </em>…","Returns the left value","Returns the right value","Misc utilities used in different places in the crate.","This crates a hashmap with the specified capacity using …","","","Match <code>PrimitiveType</code> to standard Rust types","","","","","A trait representing an immutable Arrow array. Arrow …","Iterator of values of an <code>ArrayAccessor</code>.","A <code>BinaryArray</code> is Arrow’s semantically equivalent of an …","Iterator of values of an <code>BinaryArray</code>.","A <code>BooleanArray</code> is Arrow’s semantically equivalent of an …","A type definition <code>PrimitiveArray</code> for <code>days_ms</code>","A type definition <code>MutablePrimitiveArray</code> for <code>days_ms</code>","An <code>Array</code> whose values are stored as indices. This <code>Array</code> is …","Trait denoting <code>NativeType</code>s that can be used as keys of a …","The Arrow’s equivalent to an immutable …","The Arrow’s equivalent to an immutable …","A type definition <code>PrimitiveArray</code> for <code>f16</code>","A type definition <code>MutablePrimitiveArray</code> for <code>f16</code>","A type definition <code>PrimitiveArray</code> for <code>f32</code>","A type definition <code>MutablePrimitiveArray</code> for <code>f32</code>","A type definition <code>PrimitiveArray</code> for <code>f64</code>","A type definition <code>MutablePrimitiveArray</code> for <code>f64</code>","Trait that <code>BinaryArray</code> and <code>Utf8Array</code> implement for the …","A type definition <code>PrimitiveArray</code> for <code>i128</code>","A type definition <code>MutablePrimitiveArray</code> for <code>i128</code>","A type definition <code>PrimitiveArray</code> for <code>i16</code>","A type definition <code>MutablePrimitiveArray</code> for <code>i16</code>","A type definition <code>PrimitiveArray</code> for <code>i256</code>","A type definition <code>MutablePrimitiveArray</code> for <code>i256</code>","A type definition <code>PrimitiveArray</code> for <code>i32</code>","A type definition <code>MutablePrimitiveArray</code> for <code>i32</code>","A type definition <code>PrimitiveArray</code> for <code>i64</code>","A type definition <code>MutablePrimitiveArray</code> for <code>i64</code>","A type definition <code>PrimitiveArray</code> for <code>i8</code>","A type definition <code>MutablePrimitiveArray</code> for <code>i8</code>","The corresponding <code>IntegerType</code> of this key","An <code>Array</code> semantically equivalent to …","Iterator of values of a <code>ListArray</code>.","An array representing a (key, value), both of arbitrary …","A type definition <code>PrimitiveArray</code> for <code>months_days_ns</code>","A type definition <code>MutablePrimitiveArray</code> for <code>months_days_ns</code>","A trait describing a mutable array; i.e. an array whose …","The Arrow’s equivalent to <code>Vec&lt;Option&lt;Vec&lt;u8&gt;&gt;&gt;</code>. …","A <code>MutableArray</code> that builds a <code>BinaryArray</code>. It differs from …","The Arrow’s equivalent to <code>Vec&lt;Option&lt;bool&gt;&gt;</code>, but with …","A mutable, strong-typed version of <code>DictionaryArray</code>.","The Arrow’s equivalent to a mutable …","The mutable version of <code>FixedSizeListArray</code>.","The mutable version of <code>ListArray</code>.","The Arrow’s equivalent to <code>Vec&lt;Option&lt;T&gt;&gt;</code> where <code>T</code> is …","Converting a <code>MutableStructArray</code> into a <code>StructArray</code> is <code>O(1)</code>.","A <code>MutableArray</code> that builds a <code>Utf8Array</code>. It differs from …","A <code>MutableArray</code> that builds a <code>Utf8Array</code>. It differs from …","The concrete <code>Array</code> of <code>DataType::Null</code>.","A <code>PrimitiveArray</code> is Arrow’s semantically equivalent of …","A <code>StructArray</code> is a nested <code>Array</code> with an optional validity …","A trait describing the ability of a struct to create …","A trait describing the ability of a struct to extend from …","A trait describing the ability of a struct to receive new …","A type definition <code>PrimitiveArray</code> for <code>u16</code>","A type definition <code>MutablePrimitiveArray</code> for <code>u16</code>","A type definition <code>PrimitiveArray</code> for <code>u32</code>","A type definition <code>MutablePrimitiveArray</code> for <code>u32</code>","A type definition <code>PrimitiveArray</code> for <code>u64</code>","A type definition <code>MutablePrimitiveArray</code> for <code>u64</code>","A type definition <code>PrimitiveArray</code> for <code>u8</code>","A type definition <code>MutablePrimitiveArray</code> for <code>u8</code>","<code>UnionArray</code> represents an array whose each slot can contain …","A <code>Utf8Array</code> is arrow’s semantic equivalent of an …","Iterator of values of an <code>Utf8Array</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","If the key type always can be converted to <code>usize</code>.","If the key type always can be converted to <code>usize</code>.","Applies a function <code>f</code> to the validity of this array.","Applies a function <code>f</code> to the validity of this array.","Applies a function <code>f</code> to the validity of this array.","Applies a function <code>f</code> to the values of this array, cloning …","Applies a function <code>f</code> to the values of this array, cloning …","Arcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.","Arcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.","Arcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.","Arcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.","Arcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.","Arcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.","Arcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.","Arcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.","Arcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.","Arcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.","Arcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.","Arcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.","Converts itself to a reference of <code>Any</code>, which enables …","Convert to <code>Any</code>, to enable dynamic casting.","","","","","","","","","","","","","","","","","","","","","","","","Converts itself to a mutable reference of <code>Any</code>, which …","","","","","","","","","","","","","Convert itself to an (immutable) atomically reference …","","","","","","","","","","","","Convert itself to an (immutable) <code>Array</code>.","","","","","","","","","","","","Convert to mutable <code>Any</code>, to enable dynamic casting.","","","","","","","","","","","","","Represents this key as a <code>usize</code>.","Represents this key as a <code>usize</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Boxes this array into a <code>Box&lt;dyn Array&gt;</code>.","Boxes this array into a <code>Box&lt;dyn Array&gt;</code>.","Boxes this array into a <code>Box&lt;dyn Array&gt;</code>.","Boxes this array into a <code>Box&lt;dyn Array&gt;</code>.","Boxes this array into a <code>Box&lt;dyn Array&gt;</code>.","Boxes this array into a <code>Box&lt;dyn Array&gt;</code>.","Boxes this array into a <code>Box&lt;dyn Array&gt;</code>.","Boxes this array into a <code>Box&lt;dyn Array&gt;</code>.","Boxes this array into a <code>Box&lt;dyn Array&gt;</code>.","Boxes this array into a <code>Box&lt;dyn Array&gt;</code>.","Boxes this array into a <code>Box&lt;dyn Array&gt;</code>.","Boxes this array into a <code>Box&lt;dyn Array&gt;</code>.","Returns the capacity in number of items","Returns the capacity of this array","Returns the capacity of this <code>MutablePrimitiveArray</code>.","Reserves <code>additional</code> elements and <code>additional_values</code> on the …","Returns the capacity in number of items","","","","","","","","","","","","","","","Clones a dynamic <code>Array</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The <code>DataType</code> of the <code>Array</code>. In combination with …","The <code>DataType</code> of the array.","","","Returns the <code>DataType</code> of this array.","","","","Returns the arrays’ <code>DataType</code>.","","Returns the <code>DataType</code> of this <code>DictionaryArray</code>","","","","","","","","","","","","Returns the arrays’ <code>DataType</code>.","","","","","","Returns the <code>DataType</code> of this array.","","","","","","","","","","","","Returns the default <code>DataType</code> of this container: …","Returns the default <code>DataType</code>, <code>DataType::Binary</code> or …","Returns the default <code>DataType</code> of this container: …","Returns a default <code>DataType</code> of this array, which depends on …","Returns a <code>DataType</code> consistent with <code>FixedSizeListArray</code>.","Returns a default <code>DataType</code>: inner field is named “item”…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Logically compares two <code>Array</code>s. Two arrays are logically …","","","","","","","Extends the <code>MutablePrimitiveArray</code> with a constant","Extends the <code>MutablePrimitiveArray</code> from a slice","Extends the <code>MutableBinaryValuesArray</code> from a <code>TrustedLen</code>","Extends the <code>MutableBinaryArray</code> from an iterator of …","Extends the <code>MutableBooleanArray</code> from an iterator of …","Extends the <code>MutablePrimitiveArray</code> from an iterator of …","Extends the <code>MutableUtf8Array</code> from an iterator of trusted …","Extends the <code>MutableUtf8ValuesArray</code> from a <code>TrustedLen</code>","Extends <code>MutableBinaryValuesArray</code> from an iterator of …","Extends the <code>MutableBinaryArray</code> from an iterator of …","Extends the <code>MutableBooleanArray</code> from an iterator of …","Extends the <code>MutablePrimitiveArray</code> from an iterator of …","Extends <code>MutableUtf8Array</code> from an iterator of trusted len.","Extends <code>MutableUtf8ValuesArray</code> from an iterator of trusted …","Extends the <code>MutableBinaryArray</code> from an iterator of trusted …","Extends the <code>MutableBooleanArray</code> from an iterator of values …","Extends the <code>MutablePrimitiveArray</code> from an iterator of …","Extends the <code>MutableUtf8Array</code> from an iterator of values of …","Extends the <code>MutableBinaryArray</code> from an <code>iterator</code> of values …","Extends the <code>MutableBooleanArray</code> from an iterator of values …","Extends the <code>MutablePrimitiveArray</code> from an iterator of …","Extends the <code>MutableUtf8Array</code> from an iterator of values of …","Extends the <code>MutableBinaryArray</code> from an iterator of values. …","Extends the <code>MutableUtf8Array</code> from an iterator of values. …","Returns the field (guaranteed to be a <code>Struct</code>)","Returns the fields of this <code>StructArray</code>.","The fields.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Creates a new <code>MutableBinaryArray</code> from a slice of optional …","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Creates a new <code>BinaryArray</code> from a slice of optional <code>&amp;[u8]</code>.","Returns the argument unchanged.","Creates a new <code>MutableBooleanArray</code> out of a slice of …","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Creates a new <code>MutableFixedSizeBinaryArray</code> from a slice of …","","Creates a new <code>FixedSizeBinaryArray</code> from a slice of …","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new <code>MutableUtf8Array</code> from a slice of optional …","","Returns the argument unchanged.","Returns a new <code>Utf8Array</code> from a slice of <code>&amp;str</code>.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","Creates a <code>FixedSizeBinaryArray</code> from an iterator of …","","","","","","Creates a new <code>MutableBinaryArray</code> from a <code>Iterator</code> of <code>&amp;[u8]</code>.","Returns a new <code>BinaryArray</code> from a <code>Iterator</code> of <code>&amp;[u8]</code>.","Creates a new <code>MutableUtf8Array</code> from a <code>Iterator</code> of <code>&amp;str</code>.","Creates a new <code>Utf8Array</code> from a <code>Iterator</code> of <code>&amp;str</code>.","Creates a new <code>BinaryArray</code> from slices of <code>&amp;[u8]</code>.","Creates a new <code>MutableBooleanArray</code> from a slice of <code>bool</code>.","Creates a new <code>BooleanArray</code> from a slice of <code>bool</code>.","Creates a <code>FixedSizeBinaryArray</code> from a slice of arrays of …","Creates a <code>MutablePrimitiveArray</code> from a slice of values.","Creates a (non-null) <code>PrimitiveArray</code> from a slice of values.","Returns a <code>Utf8Array</code> from a slice of <code>&amp;str</code>.","Creates a <code>MutableBinaryValuesArray</code> from a <code>TrustedLen</code>","Creates a <code>MutableBinaryArray</code> from an iterator of trusted …","Creates a <code>BinaryArray</code> from a <code>TrustedLen</code>","Creates a <code>BooleanArray</code> from a <code>TrustedLen</code>.","Creates a <code>BooleanArray</code> from a <code>TrustedLen</code>.","Creates a <code>MutablePrimitiveArray</code> from a <code>TrustedLen</code>.","Creates a <code>PrimitiveArray</code> from a <code>TrustedLen</code> of optional …","Creates a <code>MutableUtf8Array</code> from an iterator of trusted …","Creates a <code>MutableUtf8ValuesArray</code> from a <code>TrustedLen</code>","Creates a <code>Utf8Array</code> from an iterator of trusted length.","Returns a new <code>MutableBinaryValuesArray</code> from an iterator of …","Creates a <code>MutableBinaryArray</code> from an iterator of trusted …","Creates a <code>BinaryArray</code> from an iterator of trusted length.","Creates a <code>BooleanArray</code> from an iterator of trusted length. …","Creates a <code>BooleanArray</code> from an iterator of trusted length. …","Creates a <code>MutablePrimitiveArray</code> from an iterator of …","Creates a <code>PrimitiveArray</code> from an iterator of optional …","Creates a <code>MutableUtf8Array</code> from an iterator of trusted …","Returns a new <code>MutableUtf8ValuesArray</code> from an iterator of …","Creates a <code>Utf8Array</code> from an iterator of trusted length.","Creates a new <code>BinaryArray</code> from a <code>TrustedLen</code> of <code>&amp;[u8]</code>.","Returns a <code>BinaryArray</code> from an iterator of trusted length.","Creates a new <code>MutableBooleanArray</code> from an <code>TrustedLen</code> of …","Creates a new <code>BooleanArray</code> from an <code>TrustedLen</code> of <code>bool</code>.","Creates a new <code>MutablePrimitiveArray</code> out an iterator over …","Creates a (non-null) <code>PrimitiveArray</code> from a <code>TrustedLen</code> of …","Creates a new <code>MutableUtf8Array</code> from a <code>TrustedLen</code> of <code>&amp;str</code>.","Returns a (non-null) <code>Utf8Array</code> created from a <code>TrustedLen</code> …","Creates a new <code>BinaryArray</code> from a <code>TrustedLen</code> of <code>&amp;[u8]</code>.","Creates a new <code>MutableBooleanArray</code> from an <code>TrustedLen</code> of …","Creates a new <code>BooleanArray</code> from an <code>TrustedLen</code> of <code>bool</code>. Use …","Creates a new <code>MutablePrimitiveArray</code> from an iterator over …","Creates a new <code>PrimitiveArray</code> from an iterator over values","Creates a <code>MutableUtf8Array</code> from an iterator of trusted …","Creates a (non-null) <code>PrimitiveArray</code> from an iterator of …","Creates a (non-null) <code>MutablePrimitiveArray</code> from a vector …","Creates a (non-null) <code>PrimitiveArray</code> from a vector of …","Returns the element at index <code>i</code> or <code>None</code> if it is null","Returns the element at index <code>i</code> or <code>None</code> if it is null","Returns the element at index <code>i</code> or <code>None</code> if it is null","Returns the element at index <code>i</code> or <code>None</code> if it is null","Returns the element at index <code>i</code> or <code>None</code> if it is null","Returns the element at index <code>i</code> or <code>None</code> if it is null","Returns a the inner <code>Field</code>","Returns a the inner <code>DataType</code>","Returns a function that writes the element of <code>array</code> at …","Returns the fields the <code>DataType::Struct</code>.","Returns all fields from <code>DataType::Union</code>.","Returns an option of a mutable reference to the values of …","Returns a function that writes the value of the element of …","Contains the trait <code>Growable</code> and corresponding concreate …","Returns the index and slot of the field to select from …","Returns the index and slot of the field to select from …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts itself into an <code>Array</code>.","Converts itself into an <code>Array</code>.","converts itself into <code>Arc&lt;dyn Array&gt;</code>","Converts itself into an <code>Array</code>.","Converts itself into an <code>Array</code>.","Converts itself into an <code>Array</code>.","Converts itself into an <code>Array</code>.","converts itself into <code>Box&lt;dyn Array&gt;</code>","converts itself into <code>Box&lt;dyn Array&gt;</code>","Deconstructs the <code>StructArray</code> into its individual …","Extract the low-end APIs from the <code>MutableUtf8Array</code>.","Extract the low-end APIs from the <code>MutableBinaryValuesArray</code>.","Returns its internal representation","Extract the low-end APIs from the <code>MutablePrimitiveArray</code>.","Returns its internal representation","Extract the low-end APIs from the <code>MutableStructArray</code>.","Extract the low-end APIs from the <code>MutableUtf8ValuesArray</code>.","","","","","","","","","","","","","","","","","","","","Try to convert this <code>BinaryArray</code> to a <code>MutableBinaryArray</code>","Try to convert this <code>BooleanArray</code> to a <code>MutableBooleanArray</code>","Try to convert this <code>PrimitiveArray</code> to a …","Try to convert this <code>Utf8Array</code> to a <code>MutableUtf8Array</code>","whether the array is empty","Whether the array is empty.","Returns whether slot <code>i</code> is null.","Returns whether the values of this <code>DictionaryArray</code> are …","Returns whether the <code>DataType::Union</code> is sparse or not.","Returns whether slot <code>i</code> is valid.","Whether <code>index</code> is valid / set.","Returns an iterator of <code>&amp;[u8]</code>","Returns an iterator of <code>Option&lt;&amp;[u8]&gt;</code>","Returns an iterator of <code>Option&lt;&amp;[u8]&gt;</code> over every element of …","Returns an iterator over the optional values of this …","Returns an iterator over the optional values of this …","Returns an iterator of <code>Option&lt;Box&lt;dyn Scalar&gt;&gt;</code>.","constructs a new iterator","constructs a new iterator","Returns an iterator of <code>Option&lt;Box&lt;dyn Array&gt;&gt;</code>","Returns an iterator of <code>Option&lt;Box&lt;dyn Array&gt;&gt;</code>","Returns an iterator of <code>Option&lt;Box&lt;dyn Array&gt;&gt;</code>","Returns an iterator over <code>Option&lt;T&gt;</code>","Returns an iterator over the values and validity, …","Returns an iterator of <code>Option&lt;Box&lt;dyn Array&gt;&gt;</code>","constructs a new iterator","Returns an iterator of <code>Option&lt;&amp;str&gt;</code>","Returns an iterator of <code>&amp;str</code>","Returns an iterator of <code>Option&lt;&amp;str&gt;</code>","Returns an iterator over the the optional values of  …","Returns iterator over the values of …","Returns the keys’ value of the <code>DictionaryArray</code> as <code>usize</code>","Returns the dictionary keys","Returns the keys of the <code>DictionaryArray</code>. These keys can be …","Returns an iterator of the keys’ of the <code>DictionaryArray</code> …","Returns an iterator of the keys’ values of the …","The length of the <code>Array</code>. Every array has a length …","The length of the array.","Returns the length of this array","","","Returns the length of this array","","","Returns the length of this array","","","Returns the length of this array","","Returns the length of this array","","","Returns the length of this array","","The length of this array","","Returns the length of this array","","Returns the length of this array","Returns the length of this array","","Returns the length of this array","","","","","Returns the length of this array","","","Returns the length of this array","","","Returns the length of this array","","Returns the length of this array","","Returns the length of this array","Returns the dictionary map","","","","","","","","","","","","","","","","","The values as a mutable reference","The values","The mutable values","Returns an empty <code>MutableBinaryValuesArray</code>.","Creates a new empty <code>MutableBinaryArray</code>.","Alias for unwrapping <code>Self::try_new</code>","Creates an new empty <code>MutableBooleanArray</code>.","Alias to <code>Self::try_new().unwrap()</code>","Creates an empty <code>MutableDictionaryArray</code>.","Creates a new empty <code>MutableFixedSizeBinaryArray</code>.","Creates a new <code>FixedSizeBinaryArray</code>.","Creates a new <code>MutableFixedSizeListArray</code> from a <code>MutableArray</code>…","Alias to <code>Self::try_new(...).unwrap()</code>","Creates a new empty <code>MutableListArray</code>.","Creates a new <code>ListArray</code>.","Creates a new <code>MapArray</code>.","Returns a new <code>NullArray</code>.","Creates a new empty <code>MutablePrimitiveArray</code>.","Alias for <code>Self::try_new(..).unwrap()</code>.","Creates a new <code>MutableStructArray</code>.","Returns a new <code>StructArray</code>","Returns a new <code>UnionArray</code>.","Initializes a new empty <code>MutableUtf8Array</code>.","Returns an empty <code>MutableUtf8ValuesArray</code>.","Creates a new <code>Utf8Array</code>.","Creates a new <code>ArrayValuesIter</code>","Creates an empty <code>BinaryArray</code>, i.e. whose <code>.len</code> is zero.","Returns a new empty <code>BooleanArray</code>.","Returns a new empty <code>DictionaryArray</code>.","Returns a new empty <code>FixedSizeBinaryArray</code>.","Returns a new empty <code>FixedSizeListArray</code>.","Returns a new empty <code>ListArray</code>.","Returns a new empty <code>MapArray</code>.","Returns a new empty <code>NullArray</code>.","Returns a new empty (zero-length) <code>PrimitiveArray</code>.","Creates an empty <code>StructArray</code>.","Creates a new empty <code>UnionArray</code>.","Returns a new empty <code>Utf8Array</code>.","Creates a new <code>Array</code> with a <code>Array::len</code> of 0.","Creates a new <code>MutableFixedSizeListArray</code> from a <code>MutableArray</code>…","Creates a new <code>MutableListArray</code> from a <code>MutableArray</code> and …","Creates an null <code>BinaryArray</code>, i.e. whose …","Returns a new <code>BooleanArray</code> whose all slots are null / <code>None</code>.","Returns an <code>DictionaryArray</code> whose all elements are null","Returns a new null <code>FixedSizeBinaryArray</code>.","Returns a new null <code>FixedSizeListArray</code>.","Returns a new null <code>ListArray</code>.","Returns a new null <code>MapArray</code> of <code>length</code>.","Returns a new <code>NullArray</code>.","Returns a new <code>PrimitiveArray</code> where all slots are null / …","Creates a null <code>StructArray</code> of length <code>length</code>.","Creates a new null <code>UnionArray</code>.","Returns a new <code>Utf8Array</code> whose all slots are null / <code>None</code>.","Creates a new <code>Array</code> of <code>DataType</code> <code>data_type</code> and <code>length</code>. The …","Create a <code>MutableUtf8Array</code> out of low-end APIs.","Returns a <code>MutableUtf8ValuesArray</code> created from its internal …","Creates a new <code>Utf8Array</code> without checking for offsets …","Creates a new <code>MutableListArray</code> from a <code>MutableArray</code> and …","Creates a new <code>MutableFixedSizeListArray</code> from a <code>MutableArray</code>…","Creates a new <code>MutableListArray</code> from a <code>MutableArray</code>.","","","","The number of null slots on this <code>Array</code>.","The offsets of the array","returns its offsets.","returns its offsets.","","Returns the offsets of this <code>BinaryArray</code>.","The offsets","The offsets [<code>Buffer</code>].","returns the offsets","The optional offsets.","returns its offsets.","returns its offsets.","Returns the offsets of this <code>Utf8Array</code>.","","Contains functions and function factories to order values …","","","","","","","Pop the last entry from <code>MutableBinaryValuesArray</code>. This …","Pop the last entry from <code>MutableBinaryArray</code>. This function …","Pop an entry from <code>MutableBooleanArray</code>. Note If the values …","Pop the last entry from <code>MutableFixedSizeBinaryArray</code>. This …","Pop a value from the array. Note if the values is empty, …","Pop the last entry from <code>MutableUtf8Array</code>. This function …","Pop the last entry from <code>MutableUtf8ValuesArray</code>. This …","Pushes a new item to the array.","Pushes a new element to the array.","Pushes a new entry to <code>MutableBooleanArray</code>.","pushes a new entry to <code>MutableFixedSizeBinaryArray</code>.","Adds a new value to the array.","Call this once for each “row” of children you push.","Pushes a new element to the array.","Pushes a new item to the array.","Adds a new null element to the array.","","","","","pushes a null value","","","","","","","","","","Reserves additional slots to its capacity.","Reserves <code>additional</code> elements and <code>additional_values</code> on the …","","Reserves <code>additional</code> elements and <code>additional_values</code> on the …","","Reserves <code>additional</code> slots.","","Reserves <code>additional</code> slots.","","Reserves <code>additional</code> slots.","","Reserves <code>additional</code> slots.","","Reserves <code>additional</code> slots.","","","Reserves <code>additional</code> entries.","","Reserves <code>additional</code> entries.","Reserves <code>additional</code> elements and <code>additional_values</code> on the …","","","Reserves <code>additional</code> elements and <code>additional_values</code> on the …","","","","","","","","","","Sets position <code>index</code> to <code>value</code>. Note that if it is the first …","Sets position <code>index</code> to <code>value</code>. Note that if it is the first …","Sets position <code>index</code> to <code>value</code>. Note that if it is the first …","Sets the validity of this array.","Sets the validity of this array.","Sets the validity of the keys of this <code>DictionaryArray</code>.","Sets the validity of this array.","Sets the validity of this array.","Sets the validity of this array.","Sets the validity of this array.","Sets the validity.","Sets the validity of this array.","Sets the validity of this array.","Sets the validity.","Sets the validity of this array.","Sets the values of this <code>BooleanArray</code>.","Sets values.","Update the values of this <code>PrimitiveArray</code>.","Shrink the array to fit its length.","","Shrinks the capacity of the <code>MutableBinaryValuesArray</code> to …","","Shrinks the capacity of the <code>MutableBinaryArray</code> to fit its …","Shrinks the capacity of the <code>MutableBooleanArray</code> to fit its …","","","Shrinks the capacity of the <code>MutableDictionaryArray</code> to fit …","Shrinks the capacity of the <code>MutableFixedSizeBinaryArray</code> to …","","Shrinks the capacity of the <code>MutableFixedSizeListArray</code> to …","","Shrinks the capacity of the <code>MutableListArray</code> to fit its …","","Shrinks the capacity of the <code>MutablePrimitiveArray</code> to fit …","","Shrinks the capacity of the <code>MutableStructArray</code> to fit its …","","Shrinks the capacity of the <code>MutableUtf8Array</code> to fit its …","","","Shrinks the capacity of the <code>MutableUtf8ValuesArray</code> to fit …","returns the (fixed) size of the <code>MutableFixedSizeBinaryArray</code>…","Returns the size","Returns the size (number of elements per slot) of this …","Returns the size (number of elements per slot) of this …","","Slices this <code>Array</code>.","Slices this <code>BinaryArray</code>.","","Slices this <code>BooleanArray</code>.","","","Slices this <code>DictionaryArray</code>.","Slices this <code>FixedSizeBinaryArray</code>.","","Slices this <code>FixedSizeListArray</code>.","","","Slices this <code>ListArray</code>.","","Returns a slice of this <code>MapArray</code>.","","Returns a slice of the <code>NullArray</code>.","Slices this <code>PrimitiveArray</code> by an offset and length.","","Slices this <code>StructArray</code>.","","","Returns a slice of this <code>UnionArray</code>.","","Slices this <code>Utf8Array</code>.","Slices the <code>Array</code>.","Slices this <code>BinaryArray</code>.","","Slices this <code>BooleanArray</code>.","","Slices this <code>DictionaryArray</code>.","","","Slices this <code>FixedSizeBinaryArray</code>.","","Slices this <code>FixedSizeListArray</code>.","Slices this <code>ListArray</code>.","","Returns a slice of this <code>MapArray</code>.","","Returns a slice of the <code>NullArray</code>.","","","Slices this <code>PrimitiveArray</code> by an offset and length.","","Slices this <code>StructArray</code>.","Returns a slice of this <code>UnionArray</code>.","","Slices this <code>Utf8Array</code>.","","Returns a slice of this <code>Array</code>.","Returns this array sliced.","Returns this array sliced.","Returns this array sliced.","Returns this array sliced.","Returns this array sliced.","Returns this array sliced.","Returns this array sliced.","Returns this array sliced.","Returns this array sliced.","Returns this array sliced.","Returns this array sliced.","Returns this array sliced.","Returns a slice of this <code>Array</code>.","Returns this array sliced.","Returns this array sliced.","Returns this array sliced.","Returns this array sliced.","Returns this array sliced.","Returns this array sliced.","Returns this array sliced.","Returns this array sliced.","Returns this array sliced.","Returns this array sliced.","Returns this array sliced.","Returns this array sliced.","","","","Returns a new <code>FixedSizeBinaryArray</code> with a different …","Changes the arrays’ <code>DataType</code>, returning a new …","Returns a new <code>PrimitiveArray</code> with a different logical type.","Clone a <code>&amp;dyn Array</code> to an owned <code>Box&lt;dyn Array&gt;</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Fallible version of <code>Extend::extend</code>.","","","This is infalible and is implemented for consistency with …","","","","This is infalible and is implemented for consistency with …","","","Tries to extend itself with elements from <code>other</code>, failing …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a new <code>MutableBinaryValuesArray</code> from an iterator.","Creates a new <code>MutableFixedSizeBinaryArray</code> from an iterator …","Creates a <code>FixedSizeBinaryArray</code> from an fallible iterator …","Returns a new <code>MutableUtf8ValuesArray</code> from an iterator.","Returns a new <code>DictionaryArray</code>.","Creates a <code>MutableBinaryArray</code> from an falible iterator of …","Creates a <code>BinaryArray</code> from an fallible iterator of trusted …","Creates a <code>BooleanArray</code> from a <code>TrustedLen</code>.","Creates a <code>BooleanArray</code> from a <code>TrustedLen</code>.","Creates a <code>MutablePrimitiveArray</code> from an fallible iterator …","Creates a <code>MutableUtf8Array</code> from an falible iterator of …","Creates a <code>Utf8Array</code> from an fallible iterator of trusted …","Creates a <code>MutableBinaryArray</code> from an falible iterator of …","Creates a <code>BinaryArray</code> from an falible iterator of trusted …","Creates a <code>BooleanArray</code> from an falible iterator of trusted …","Creates a <code>BooleanArray</code> from an falible iterator of trusted …","Creates a <code>MutablePrimitiveArray</code> from an fallible iterator …","Creates a <code>MutableUtf8Array</code> from an falible iterator of …","Creates a <code>Utf8Array</code> from an falible iterator of trusted …","Returns a the inner <code>Field</code>","","","","","","","","","","","","","","","","","","","","","","","","","Returns a <code>MutableBinaryValuesArray</code> created from its …","Returns a <code>MutableBinaryArray</code> created from its internal …","Returns a <code>BinaryArray</code> created from its internal …","The canonical method to create a <code>MutableBooleanArray</code> out …","The canonical method to create a <code>BooleanArray</code> out of …","Returns a new <code>DictionaryArray</code>.","Creates a new <code>MutableFixedSizeBinaryArray</code>.","Creates a new <code>FixedSizeBinaryArray</code>.","Creates a new <code>FixedSizeListArray</code>.","Creates a new <code>ListArray</code>.","Returns a new <code>MapArray</code>.","Returns a new <code>NullArray</code>.","The canonical method to create a <code>MutablePrimitiveArray</code> out …","The canonical method to create a <code>PrimitiveArray</code> out of its …","Create a <code>MutableStructArray</code> out of low-end APIs.","Returns a new <code>StructArray</code>.","Returns a new <code>UnionArray</code>.","Returns a <code>MutableUtf8Array</code> created from its internal …","Returns a <code>MutableUtf8ValuesArray</code> created from its internal …","Returns a <code>Utf8Array</code> created from its internal …","Returns a new <code>DictionaryArray</code>.","Creates a new <code>Utf8Array</code> without checking for offsets …","Tries to push a new element.","","","This is infalible and is implemented for consistency with …","","tries to push a new entry to <code>MutableFixedSizeBinaryArray</code>.","","","This is infalible and is implemented for consistency with …","","","Needs to be called when a valid value was extended to this …","Needs to be called when a valid value was extended to this …","","","","","","","","","","","","","","","","","","","","","","","","","The types.","The validity of the <code>Array</code>: every array has an optional …","The optional validity of the array.","","","","The optional validity.","","Returns the optional validity.","","","The optional validity. Equivalent to <code>self.keys().validity()</code>…","","","","The optional validity.","","","The optional validity.","","The optional validity.","","","","","Returns the optional validity.","","","The optional validity.","","","","","The optional validity.","","Returns the value of the element at index <code>i</code>.","Returns the element at index <code>i</code>","Returns the value at index <code>i</code>","Returns the value of the <code>DictionaryArray</code> at position <code>i</code>.","Returns the element at index <code>i</code> as <code>&amp;[u8]</code>","Returns value at position <code>i</code>.","Returns the <code>Vec&lt;T&gt;</code> at position <code>i</code>.","Returns the element at index <code>i</code>","Returns the element at index <code>i</code>.","Returns the value at slot <code>i</code>.","Return the <code>i</code>th child array.","Returns the slot <code>index</code> as a <code>Scalar</code>.","Returns the value of the element at index <code>i</code>, ignoring the …","Returns the value of the element at index <code>i</code>.","Returns the value of the element at index <code>i</code>, ignoring the …","Returns the value of the element at index <code>i</code>.","Returns the element at index <code>i</code>","Returns the element at index <code>i</code> as bool","Returns the element at index <code>i</code> as <code>&amp;[u8]</code>","Returns the element at index <code>i</code> as &amp;str","Returns the <code>Vec&lt;T&gt;</code> at position <code>i</code>.","Returns the element at index <code>i</code> as &amp;str","Returns the element at index <code>i</code>.","Returns the value at index <code>i</code>. The value on null slots is …","Returns the slot <code>index</code> as a <code>Scalar</code>.","Returns the value of the element at index <code>i</code>, ignoring the …","Returns the value of the element at index <code>i</code>.","Returns the value of the element at index <code>i</code>, ignoring the …","The values of the array","returns its values.","returns its values.","Returns the values of this <code>BinaryArray</code>.","","Returns its values.","The values <code>Bitmap</code>. Values on null slots are undetermined …","returns a reference to the inner values.","Returns the values of the <code>DictionaryArray</code>.","Returns its values.","Returns the values allocated on this <code>FixedSizeBinaryArray</code>.","The inner values","Returns the inner array.","The values","The values.","Returns its values.","The values <code>Buffer</code>. Values on null slots are undetermined …","The values","Returns the values of this <code>StructArray</code>.","returns its values.","returns its values.","Returns the values of this <code>Utf8Array</code>.","","Returns an iterator over the values of this array","Returns an iterator of <code>&amp;[u8]</code> over every element of this …","Returns an iterator over the values of this …","Returns an iterator over the values of this <code>BooleanArray</code>.","Returns an iterator of <code>Box&lt;dyn Scalar&gt;</code>","Returns iterator over the values of <code>FixedSizeBinaryArray</code>","Returns an iterator of <code>Box&lt;dyn Array&gt;</code>","Returns an iterator of <code>Box&lt;dyn Array&gt;</code>","Returns an iterator of <code>Box&lt;dyn Array&gt;</code>","Returns an iterator of <code>T</code>","Returns an iterator of the values, <code>&amp;T</code>, ignoring the arrays…","Returns an iterator of <code>Box&lt;dyn Array&gt;</code>","Returns an iterator of <code>&amp;str</code>","Returns an iterator of <code>&amp;str</code>","Returns an iterator over the the values [<code>V::IterValue</code>].","Returns a mutable slice of values.","Returns a mutable slice of values.","Initializes a new <code>MutableBinaryValuesArray</code> with a …","Initializes a new <code>MutableBinaryArray</code> with a pre-allocated …","Initializes a new <code>MutableUtf8Array</code> with a pre-allocated …","Initializes a new <code>MutableUtf8ValuesArray</code> with a …","Initializes a new <code>MutableBinaryValuesArray</code> with a …","Initializes a new <code>MutableBinaryArray</code> with a pre-allocated …","Creates an new <code>MutableBooleanArray</code> with a capacity of …","Creates a new <code>MutableFixedSizeBinaryArray</code> with capacity …","Creates a new <code>MutableListArray</code> with a capacity.","Creates a new <code>MutablePrimitiveArray</code> with a capacity.","Initializes a new <code>MutableUtf8Array</code> with a pre-allocated …","Initializes a new <code>MutableUtf8ValuesArray</code> with a …","Creates a new <code>MutablePrimitiveArray</code> from a capacity and …","Clones this <code>Array</code> with a new new assigned bitmap.","","Returns this array with a new validity.","","Returns this array with a new validity.","","Returns this <code>DictionaryArray</code> with a new validity.","","Returns this array with a new validity.","","Returns this array with a new validity.","","Returns this array with a new validity.","","Returns this array with a new validity.","","","Returns this array with a new validity.","","Returns this array with a new validity.","","","Returns this array with a new validity.","Returns a clone of this <code>BooleanArray</code> with new values.","Returns this <code>PrimitiveArray</code> with new values.","","","","Describes a struct that can be extended from slices of …","Concrete <code>Growable</code> for the <code>BinaryArray</code>.","Concrete <code>Growable</code> for the <code>BooleanArray</code>.","Concrete <code>Growable</code> for the <code>DictionaryArray</code>.","Concrete <code>Growable</code> for the <code>FixedSizeBinaryArray</code>.","Concrete <code>Growable</code> for the <code>FixedSizeListArray</code>.","Concrete <code>Growable</code> for the <code>ListArray</code>.","Concrete <code>Growable</code> for the <code>MapArray</code>.","Concrete <code>Growable</code> for the <code>NullArray</code>.","Concrete <code>Growable</code> for the <code>PrimitiveArray</code>.","Concrete <code>Growable</code> for the <code>StructArray</code>.","Concrete <code>Growable</code> for the <code>UnionArray</code>.","Concrete <code>Growable</code> for the <code>Utf8Array</code>.","","","","","","","","","","","","","Converts this <code>Growable</code> to an <code>Arc&lt;dyn Array&gt;</code>, thereby …","Converts this <code>Growable</code> to an <code>Box&lt;dyn Array&gt;</code>, thereby …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extends this <code>Growable</code> with elements from the bounded <code>Array</code> …","","","","","","","","","","","","","Extends this <code>Growable</code> with null elements, disregarding the …","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The current length of the <code>Growable</code>.","","","","","","","","","","","","","Creates a new <code>Growable</code> from an arbitrary number of <code>Array</code>s.","Creates a new <code>GrowableBinary</code> bound to <code>arrays</code> with a …","Creates a new <code>GrowableUnion</code> bound to <code>arrays</code> with a …","Creates a new <code>GrowableBoolean</code> bound to <code>arrays</code> with a …","Creates a new <code>GrowableFixedSizeBinary</code> bound to <code>arrays</code> with …","Creates a new <code>GrowableNull</code>.","Creates a new <code>GrowablePrimitive</code> bound to <code>arrays</code> with a …","Creates a new <code>GrowableList</code> bound to <code>arrays</code> with a …","Creates a new <code>GrowableMap</code> bound to <code>arrays</code> with a …","Creates a new <code>GrowableStruct</code> bound to <code>arrays</code> with a …","Creates a new <code>GrowableFixedSizeList</code> bound to <code>arrays</code> with a …","Creates a new <code>GrowableUtf8</code> bound to <code>arrays</code> with a …","Creates a new <code>GrowableDictionary</code> bound to <code>arrays</code> with a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Compare the values at two arbitrary indices in two arrays.","returns a comparison function that compares values at two …","Total order of all native types whose Rust implementation …","implements comparison using IEEE 754 total ordering for f32","implements comparison using IEEE 754 total ordering for f64","An immutable container semantically equivalent to …","This crates’ equivalent of <code>std::vec::IntoIter</code> for <code>Bitmap</code>.","A container of booleans. <code>MutableBitmap</code> is semantically …","","","","Compute bitwise AND operation","Returns the byte slice of this <code>Bitmap</code>.","Returns the slice of bytes of this <code>MutableBitmap</code>. Note …","Apply a bitwise operation <code>op</code> to two inputs and return the …","Apply a bitwise binary operation to a <code>MutableBitmap</code>.","","","","","","","","","","","","","","","","Returns the capacity of <code>MutableBitmap</code> in number of bits.","Creates a <code>Vec&lt;u8&gt;</code> from a <code>TrustedLen</code> of <code>BitChunk</code>.","Returns an iterator over bits in bit chunks <code>BitChunk</code>.","Empties the <code>MutableBitmap</code>.","","","","","","","","","","","Extends <code>MutableBitmap</code> by <code>additional</code> values of constant …","Extends the <code>MutableBitmap</code> from a <code>Bitmap</code>.","Extends the <code>MutableBitmap</code> from a slice of bytes with …","Extends <code>self</code> from a <code>TrustedLen</code> iterator.","Extends <code>self</code> from an iterator of trusted len.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Creates a Vec from an <code>Iterator</code> of <code>BitChunk</code>.","","","Initializes a <code>MutableBitmap</code> with all values set to valid/ …","Initializes a zeroed <code>MutableBitmap</code>.","Creates a new <code>Bitmap</code> from an iterator of booleans.","Creates a new <code>MutableBitmap</code> from an iterator of booleans.","Creates a new <code>Bitmap</code> from an iterator of booleans.","Creates a new <code>MutableBitmap</code> from an iterator of booleans.","Creates a new <code>Bitmap</code> from a slice and length.","Alias for <code>Bitmap::try_new().unwrap()</code> This function is <code>O(1)</code>","Initializes a <code>MutableBitmap</code> from a <code>Vec&lt;u8&gt;</code> and a length. …","Returns whether the bit at position <code>i</code> is set.","Returns whether the position <code>index</code> is set.","Returns whether the bit at position <code>i</code> is set.","Unsafely returns whether the bit at position <code>i</code> is set.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Converts this <code>Bitmap</code> to <code>MutableBitmap</code>, returning itself if …","Returns whether <code>Bitmap</code> is empty","Returns whether <code>MutableBitmap</code> is empty.","Returns a new iterator of <code>bool</code> over this bitmap","constructs a new iterator over the bits of <code>MutableBitmap</code>.","Returns the length of the <code>Bitmap</code>.","Returns the length of the <code>MutableBitmap</code>.","Converts this <code>Bitmap</code> into a <code>MutableBitmap</code>, cloning its …","Initializes an empty <code>Bitmap</code>.","Creates a new <code>IntoIter</code> from a <code>Bitmap</code>","Initializes an empty <code>MutableBitmap</code>.","Initializes an new <code>Bitmap</code> filled with unset values.","","","","","","Returns the number of unset bits on this <code>Bitmap</code>.","Returns the number of unset bits on this <code>MutableBitmap</code>.","Counts the nulls (unset bits) starting from <code>offset</code> bits …","Compute bitwise OR operation","Pop the last bit from the <code>MutableBitmap</code>. Note if the …","Pushes a new bit to the <code>MutableBitmap</code>, re-sizing it if …","Pushes a new bit to the <code>MutableBitmap</code>","Apply a bitwise operation <code>op</code> to four inputs and return the …","Reserves <code>additional</code> bits in the <code>MutableBitmap</code>, potentially …","Sets the position <code>index</code> to <code>value</code>","Sets the position <code>index</code> to <code>value</code>","Shrinks the capacity of the <code>MutableBitmap</code> to fit its …","","Slices <code>self</code>, offsetting by <code>offset</code> and truncating up to …","Slices <code>self</code>, offseting by <code>offset</code> and truncating up to …","Slices <code>self</code>, offsetting by <code>offset</code> and truncating up to …","Slices <code>self</code>, offseting by <code>offset</code> and truncating up to …","Apply a bitwise operation <code>op</code> to three inputs and return …","","","","","","","Creates a new <code>Bitmap</code> from a fallible iterator of booleans.","Creates a new <code>MutableBitmap</code> from an iterator of booleans.","Creates a new <code>Bitmap</code> from a fallible iterator of booleans.","Creates a new <code>MutableBitmap</code> from an falible iterator of …","","","","Initializes a new <code>Bitmap</code> from vector of bytes and a length.","Initializes a new <code>MutableBitmap</code> from a <code>Vec&lt;u8&gt;</code> and a …","","","","Apply a bitwise operation <code>op</code> to one input and return the …","Applies a function to every bit of this <code>MutableBitmap</code> in …","Returns the number of unset bits on this <code>Bitmap</code>.","Returns the number of unset bits on this <code>MutableBitmap</code>.","General utilities for bitmaps representing items where LSB …","Initializes a pre-allocated <code>MutableBitmap</code> with capacity …","Compute bitwise XOR operation","A chunk of bits. This is used to create masks of a given …","Trait representing an exact iterator over bytes in <code>BitChunk</code>…","This struct is used to efficiently iterate over bit masks …","An iterator over a slice of bytes in <code>BitChunk</code>s.","An iterator over mutable slices of bytes of exact size.","An iterator over bits according to the LSB, i.e. the bytes …","There are null values","There are no null values","Iterator over a bitmap that returns slices of set regions …","An <code>Iterator</code> over <code>Option&lt;T&gt;</code> This enum can be used in two …","An <code>Iterator</code> over validity and values.","","","","","","","","","","","","","","","","","","","Returns the number of bytes required to hold <code>bits</code> bits.","","","","","","","","","Returns the number of zero bits in the slice offsetted by …","Formats <code>bytes</code> taking into account an offset and length of …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","convert itself from bytes.","Returns whether bit at position <code>i</code> in <code>data</code> is set","Returns whether bit at position <code>i</code> in <code>data</code> is set or not.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Returns whether there are still elements in this iterator","Returns whether bit at position <code>i</code> in <code>byte</code> is set or not","Returns the number of chunks of this iterator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new <code>BitChunksExact</code>.","Creates a <code>BitChunks</code>.","Returns a new <code>BitChunksExactMut</code>","Creates a new <code>BitmapIter</code>.","Creates a new <code>SlicesIterator</code>","Creates a new <code>ZipValidityIter</code>.","Returns a new <code>ZipValidity</code>","Returns a new <code>ZipValidity</code> and drops the <code>validity</code> if all …","","","","","","","","","","","","","","The remainder of the iterator.","Returns the remaining <code>BitChunk</code>. It is zero iff <code>len / 8 == 0</code>…","","Returns the remainder <code>BitChunk</code>.","","The remainder slice","An iterator over individual items of the remainder","An iterator over individual items of the remainder","The number of items in the remainder","","Returns the remainder bits in <code>BitChunks::remainder</code>.","","The length of the remainder slice in bits.","Sets bit at position <code>i</code> in <code>byte</code>","Sets bit at position <code>i</code> in <code>data</code>","Sets bit at position <code>i</code> in <code>data</code> without doing bound checks","","","","","","","Returns the total number of slots. It corresponds to the …","convert itself into bytes.","","","","","","","","","","","","","","","","","","","","","","","","","","Unwrap into an iterator that has null values.","Unwrap into an iterator that has no null values.","<code>Buffer</code> is a contiguous memory region that can be shared …","","Returns the byte slice stored in this buffer","","","","","","","","","Returns the argument unchanged.","","","Returns a mutable reference to its underlying <code>Vec</code>, if …","Returns a mutable reference to its slice, if possible.","Calls <code>U::from(self)</code>.","","Returns a mutable reference to its underlying <code>Vec</code>, if …","Returns whether the buffer is empty.","Returns the number of bytes in the buffer","Creates an empty <code>Buffer</code>.","Returns the offset of this buffer.","Get the strong count of underlying <code>Arc</code> data buffer.","Get the weak count of underlying <code>Arc</code> data buffer.","Slices this buffer starting at <code>offset</code>.","Slices this buffer starting at <code>offset</code>.","Returns a new <code>Buffer</code> that is a slice of this buffer …","Returns a new <code>Buffer</code> that is a slice of this buffer …","","","","","A vector of trait objects of <code>Array</code> where every item has …","","returns the <code>Array</code>s in <code>Chunk</code>","","","","","returns the <code>Array</code>s in <code>Chunk</code>","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Consumes <code>Chunk</code> into its underlying arrays. The arrays are …","returns whether the columns have any rows","returns the number of rows of every array","Creates a new <code>Chunk</code>.","","","","Creates a new <code>Chunk</code>.","","Contains different aggregation functions","Defines basic arithmetic kernels for <code>PrimitiveArray</code>s.","Defines kernels suitable to perform operations to …","Defines generics suitable to perform operations to …","Contains bitwise operators: <code>or</code>, <code>and</code>, <code>xor</code> and <code>not</code>.","null-preserving operators such as <code>and</code>, <code>or</code> and <code>not</code>.","Boolean operators of Kleene logic.","Defines different casting operators such as <code>cast</code> or …","Contains comparison operators","Contains the concatenate kernel","Declares the <code>contains</code> operator","Contains operators to filter arrays such as <code>filter</code>.","Contains the <code>hash</code> and typed (e.g. <code>hash_primitive</code>) …","Contains the operator <code>if_then_else</code>.","Defines kernel for length of composite arrays","Contains “like” operators such as <code>like_utf8</code> and …","Contains the operator <code>limit</code>.","Functions to perform merge-sorts.","Contains the operator <code>nullif</code>.","Defines partition kernel for <code>crate::array::Array</code>","Contains regex matching operators <code>regex_match</code> and …","Contains operators to sort individual and slices of <code>Array</code>s.","Defines kernel to extract a substring of a [Large…","Defines take kernel for <code>Array</code>","Defines temporal kernels for time and date related …","Defines common maps to a <code>Utf8Array</code>","Defines windowing functions, like <code>shift</code>ing","The maximum value","The minimum value","Trait describing a type describing multiple lanes with an …","Object that can reduce itself to a number. This is used in …","Whether <code>max</code> supports <code>data_type</code>","Whether <code>min</code> supports <code>data_type</code>","Whether <code>sum</code> supports <code>data_type</code>","Returns the total (heap) allocated size of the array in …","Returns the maximum of <code>Array</code>. The scalar is null when all …","Returns the maximum value in the binary array, according …","Returns the maximum value in the boolean array","reduce itself to the minimum","lane-wise maximum between two instances","Returns the maximum value in the array, according to the …","Returns the maximum value in the string array, according …","Returns the minimum of <code>Array</code>. The scalar is null when all …","Returns the minimum value in the binary array, according …","Returns the minimum value in the boolean array.","reduce itself to the maximum","lane-wise minimum between two instances","Returns the minimum value in the array, according to the …","Returns the minimum value in the string array, according …","returns a new instance with all lanes equal to <code>MAX</code>","returns a new instance with all lanes equal to <code>MIN</code>","Reduces this element to a single value.","Returns the sum of all elements in <code>array</code> as a <code>Scalar</code> of …","Returns the sum of values in the array.","Defines basic addition operation for primitive arrays","Defines checked addition operation for primitive arrays","Defines checked division operation for primitive arrays","Defines checked multiplication operation for primitive …","Defines checked reminder operation for primitive arrays","Defines checked subtraction operation for primitive arrays","Defines basic division operation for primitive arrays","Defines basic multiplication operation for primitive arrays","Defines Overflowing addition operation for primitive arrays","Defines Overflowing multiplication operation for primitive …","Defines Overflowing subtraction operation for primitive …","Defines basic reminder operation for primitive arrays","Defines saturating addition operation for primitive arrays","Defines saturating multiplication operation for primitive …","Defines saturating subtraction operation for primitive …","Defines basic subtraction operation for primitive arrays","Defines wrapping addition operation for primitive arrays","Defines wrapping multiplication operation for primitive …","Defines wrapping subtraction operation for primitive arrays","Adds two <code>Array</code>s.","Adds itself to <code>rhs</code>","Adds an <code>Array</code> and a <code>Scalar</code>.","Contains arithemtic functions for <code>PrimitiveArray</code>s.","Returns whether two <code>DataType</code>s can be added by <code>add</code>.","Returns whether two <code>DataType</code>s can be divided by <code>div</code>.","Returns whether two <code>DataType</code>s can be multiplied by <code>mul</code>.","Whether <code>neg</code> is supported for a given <code>DataType</code>","Returns whether two <code>DataType</code>s “can be remainder” by <code>rem</code>…","Returns whether two <code>DataType</code>s can be subtracted by <code>sub</code>.","Checked add","checked division","checked multiplication","checked remainder","checked subtraction","Defines the arithmetic kernels for Decimal <code>PrimitiveArrays</code>…","Divide of two <code>Array</code>s.","division","Divide an <code>Array</code> with a <code>Scalar</code>.","Multiply two <code>Array</code>s.","multiplication","Multiply an <code>Array</code> with a <code>Scalar</code>.","Negates an <code>Array</code>.","Overflowing add","overflowing multiplication","overflowing subtraction","Remainder of two <code>Array</code>s.","remainder","Saturating add","saturating multiplication","saturarting subtraction","Subtracts two <code>Array</code>s.","subtraction","Adds an <code>Array</code> and a <code>Scalar</code>.","Defines the arithmetic kernels for adding a Duration to a …","Adds itself to <code>rhs</code> using wrapping addition","wrapping multiplication","wrapping subtraction","Trait describing a <code>NativeType</code> whose semantics of …","Adds two primitive arrays with the same type. Panics if …","Adds a scalar T to a primitive array of type T. Panics if …","Checked addition of two primitive arrays. If the result …","Checked addition of a scalar T to a primitive array of …","Checked division of two primitive arrays. If the result …","Checked division of a primitive array of type T by a …","Checked multiplication of two primitive arrays. If the …","Checked multiplication of a scalar T to a primitive array …","Checked negates values from array.","Checked operation of raising an array of primitives to the …","Checked remainder of two primitive arrays. If the result …","Checked remainder of a primitive array of type T by a …","Checked subtraction of two primitive arrays. If the result …","Checked subtraction of a scalar T to a primitive array of …","Divides two primitive arrays with the same type. Panics if …","Divide a primitive array of type T by a scalar T. Panics …","Multiplies two primitive arrays with the same type. Panics …","Multiply a scalar T to a primitive array of type T. Panics …","Negates values from array.","Overflowing addition of two primitive arrays. If the …","Overflowing addition of a scalar T to a primitive array of …","Overflowing multiplication of two primitive arrays. If the …","Overflowing multiplication of a scalar T to a primitive …","Overflowing subtraction of two primitive arrays. If the …","Overflowing subtraction of a scalar T to a primitive array …","Raises an array of primitives to the power of exponent. …","Remainder of two primitive arrays with the same type. …","Remainder a primitive array of type T by a scalar T. …","Saturating addition of two primitive arrays. If the result …","Saturated addition of a scalar T to a primitive array of …","Saturating multiplication of two primitive arrays. If the …","Saturated multiplication of a scalar T to a primitive …","Saturating subtraction of two primitive arrays. If the …","Saturated subtraction of a scalar T to a primitive array …","Subtracts two primitive arrays with the same type. Panics …","Subtract a scalar T to a primitive array of type T. Panics …","Wrapping addition of two <code>PrimitiveArray</code>s. It wraps around …","Wrapping addition of a scalar T to a <code>PrimitiveArray</code> of …","Wrapping multiplication of two <code>PrimitiveArray</code>s. It wraps …","Wrapping multiplication of a scalar T to a <code>PrimitiveArray</code> …","Wrapping negates values from array.","Wrapping subtraction of two <code>PrimitiveArray</code>s. It wraps …","Wrapping subtraction of a scalar T to a <code>PrimitiveArray</code> of …","Adaptive addition of two decimal primitive arrays with …","Adaptive division of two decimal primitive arrays with …","Adaptive multiplication of two decimal primitive arrays …","Adaptive subtract of two decimal primitive arrays with …","Adds two decimal <code>PrimitiveArray</code> with the same precision …","Checked addition of two decimal primitive arrays with the …","Checked division of two decimal primitive arrays with the …","Checked multiplication of two decimal primitive arrays …","Checked subtract of two decimal primitive arrays with the …","Divide two decimal primitive arrays with the same …","Multiply a decimal <code>PrimitiveArray</code> with a <code>PrimitiveScalar</code> …","Multiply two decimal primitive arrays with the same …","Multiply a decimal <code>PrimitiveArray</code> with a <code>PrimitiveScalar</code> …","Saturated addition of two decimal primitive arrays with …","Saturated division of two decimal primitive arrays with …","Saturated multiplication of two decimal primitive arrays …","Saturated subtraction of two decimal primitive arrays with …","Subtract two decimal primitive arrays with the same …","Adds a duration to a time array (Timestamp, Time and …","Adds a duration to a time array (Timestamp, Time and …","Adds an interval to a <code>DataType::Timestamp</code>.","Adds an interval to a <code>DataType::Timestamp</code>.","Subtract a duration to a time array (Timestamp, Time and …","Calculates the difference between two timestamps as …","Subtract a duration to a time array (Timestamp, Time and …","Calculates the difference between two timestamps returning …","Applies a binary operations to two primitive arrays. This …","Version of binary that creates a mutable bitmap that is …","Version of binary that returns an array and bitmap. Used …","Version of binary that checks for errors in the closure …","Version of unary that checks for errors in the closure …","Applies an unary and infallible function to a …","Version of unary that creates a mutable bitmap that is …","Version of unary that returns an array and bitmap. Used …","Applies a binary function to two <code>PrimitiveArray</code>s, …","Applies an unary function to a <code>PrimitiveArray</code>, optionally …","Performs <code>AND</code> operation on two <code>PrimitiveArray</code>s.","Performs <code>AND</code> operation between a <code>PrimitiveArray</code> and scalar.","Returns a new <code>PrimitiveArray</code> with the bitwise <code>not</code>.","Performs <code>OR</code> operation on two <code>PrimitiveArray</code>s.","Performs <code>OR</code> operation between a <code>PrimitiveArray</code> and scalar.","Performs <code>XOR</code> operation between two <code>PrimitiveArray</code>s.","Performs <code>XOR</code> operation between a <code>PrimitiveArray</code> and scalar.","Check if all of the values in the array are <code>true</code>","Performs <code>&amp;&amp;</code> operation on two <code>BooleanArray</code>, combining the …","Performs <code>AND</code> operation on an array and a scalar value. If …","Returns whether any of the values in the array is <code>true</code>","Returns a non-null <code>BooleanArray</code> with whether each value of …","Returns a non-null <code>BooleanArray</code> with whether each value of …","Performs unary <code>NOT</code> operation on an arrays. If value is …","Performs <code>||</code> operation on two <code>BooleanArray</code>, combining the …","Performs <code>OR</code> operation on an array and a scalar value. If …","Returns whether all values in the array are <code>true</code>","Logical ‘and’ operation on two arrays with Kleene logic","Logical ‘and’ operation on an array and a scalar value …","Returns whether any of the values in the array is <code>true</code>","Logical ‘or’ operation on two arrays with Kleene logic","Logical ‘or’ operation on an array and a scalar value …","options defining how Cast kernels behave","","Conversion of binary","Cast <code>BinaryArray</code> to <code>DictionaryArray</code>, also known as packing.","Conversion of binary","Conversion to utf8","Casts a <code>BinaryArray</code> to a <code>PrimitiveArray</code>, making any …","Conversion to utf8","Casts the <code>BooleanArray</code> to a <code>BinaryArray</code>, casting trues to …","Casts the <code>BooleanArray</code> to a <code>PrimitiveArray</code>.","Casts the <code>BooleanArray</code> to a <code>Utf8Array</code>, casting trues to <code>&quot;1&quot;</code>…","","","Return true if a value of type <code>from_type</code> can be cast into a","Cast <code>array</code> to the provided data type and return a new <code>Array</code>…","","","Conversion of dates","Conversion of dates","Casts <code>days_ms</code>s to <code>months_days_ns</code>. This operation is …","Returns a <code>PrimitiveArray&lt;i128&gt;</code> with the casted values. …","Returns a <code>PrimitiveArray&lt;i128&gt;</code> with the casted values. …","Returns a <code>PrimitiveArray&lt;i128&gt;</code> with the casted values. …","","Casts a <code>DictionaryArray</code> to a new <code>DictionaryArray</code> backed by …","Casts a <code>DictionaryArray</code> to a new <code>DictionaryArray</code> by …","Casts a <code>DictionaryArray</code> to its values’ <code>DataType</code>, also …","Casts f16 into f32","Conversion of <code>FixedSizeBinary</code> to <code>Binary</code>.","Returns a <code>PrimitiveArray&lt;i128&gt;</code> with the casted values. …","","Returns the argument unchanged.","Returns a <code>PrimitiveArray&lt;i128&gt;</code> with the casted values. …","Calls <code>U::from(self)</code>.","Casts months represented as <code>i32</code>s to <code>months_days_ns</code>. This …","Returns a <code>Utf8Array</code> where every element is the utf8 …","default to false whether to cast to an integer at the …","Casts a <code>BinaryArray</code> to a <code>PrimitiveArray</code> at best-effort …","Casts a <code>Utf8Array</code> to a <code>PrimitiveArray</code> at best-effort using …","Cast <code>PrimitiveArray</code> as a <code>PrimitiveArray</code> Same as …","Returns a <code>BinaryArray</code> where every element is the binary …","Returns a <code>BooleanArray</code> where every element is different …","Cast <code>PrimitiveArray</code> to <code>DictionaryArray</code>. Also known as …","Cast <code>PrimitiveArray</code> to a <code>PrimitiveArray</code> of another …","Cast <code>PrimitiveArray</code> to a <code>PrimitiveArray</code> of the same …","Returns a <code>Utf8Array</code> where every element is the utf8 …","Conversion of time","Conversion of times","Conversion of times","Conversion of time","Conversion of times","Conversion of times","Conversion of timestamp","Conversion of timestamp","Conversion of timestamp","Returns a <code>Utf8Array</code> where every element is the utf8 …","","","","","Conversion of utf8","Conversion to binary","Casts a <code>Utf8Array</code> to a Date32 primitive, making any …","Casts a <code>Utf8Array</code> to a Date64 primitive, making any …","Cast <code>Utf8Array</code> to <code>DictionaryArray</code>, also known as packing.","Conversion of utf8","<code>crate::temporal_conversions::utf8_to_timestamp_ns</code> applied …","Casts a <code>Utf8Array</code> to a <code>PrimitiveArray</code>, making any …","<code>crate::temporal_conversions::utf8_to_timestamp_ns</code> applied …","default to false whether an overflowing cast should be …","Similar to dictionary_to_dictionary_keys, but overflowing …","Similar to dictionary_to_dictionary_values, but …","The 8 lane representation of <code>Self</code>","<code>NativeType</code> that supports a representation of 8 lanes","Trait declaring an 8-lane multi-data.","Trait implemented by implementors of <code>Simd8Lanes</code> whose <code>Simd8</code>…","Trait implemented by implementors of <code>Simd8Lanes</code> whose <code>Simd8</code>…","Comparison functions for <code>BinaryArray</code>","Comparison functions for <code>BooleanArray</code>","Returns whether a <code>DataType</code> is comparable is supported by <code>eq</code>…","Returns whether a <code>DataType</code> is supported by <code>eq_scalar</code>.","Returns whether a <code>DataType</code> is comparable is supported by <code>gt</code>…","Returns whether a <code>DataType</code> is comparable is supported by …","Returns whether a <code>DataType</code> is supported by <code>gt_eq_scalar</code>.","Returns whether a <code>DataType</code> is supported by <code>gt_scalar</code>.","Returns whether a <code>DataType</code> is comparable is supported by <code>lt</code>…","Returns whether a <code>DataType</code> is comparable is supported by <code>lt</code>…","Returns whether a <code>DataType</code> is supported by <code>lt_eq_scalar</code>.","Returns whether a <code>DataType</code> is supported by <code>lt_scalar</code>.","Returns whether a <code>DataType</code> is comparable is supported by …","Returns whether a <code>DataType</code> is supported by <code>neq_scalar</code>.","<code>==</code> between two <code>Array</code>s. Use <code>can_eq</code> to check whether the …","Equal","<code>==</code> between two <code>Array</code>s and includes validities in …","<code>==</code> between an <code>Array</code> and a <code>Scalar</code>. Use <code>can_eq_scalar</code> to …","<code>==</code> between an <code>Array</code> and a <code>Scalar</code> and includes validities …","Utility for low level end users that implement their own …","Utility for low level end users that implement their own …","loads a complete chunk","loads an incomplete chunk, filling the remaining items …","<code>&gt;</code> between two <code>Array</code>s. Use <code>can_gt</code> to check whether the …","Greater than","<code>&gt;=</code> between two <code>Array</code>s. Use <code>can_gt_eq</code> to check whether the …","Greater than or equal to","<code>&gt;=</code> between an <code>Array</code> and a <code>Scalar</code>. Use <code>can_gt_eq_scalar</code> to …","<code>&gt;</code> between an <code>Array</code> and a <code>Scalar</code>. Use <code>can_gt_scalar</code> to …","<code>&lt;</code> between two <code>Array</code>s. Use <code>can_lt</code> to check whether the …","Less than","<code>&lt;=</code> between two <code>Array</code>s. Use <code>can_lt_eq</code> to check whether the …","Less than or equal to","<code>&lt;=</code> between an <code>Array</code> and a <code>Scalar</code>. Use <code>can_lt_eq_scalar</code> to …","<code>&lt;</code> between an <code>Array</code> and a <code>Scalar</code>. Use <code>can_lt_scalar</code> to …","<code>!=</code> between two <code>Array</code>s. Use <code>can_neq</code> to check whether the …","Not equal","<code>!=</code> between two <code>Array</code>s and includes validities in …","<code>!=</code> between an <code>Array</code> and a <code>Scalar</code>. Use <code>can_neq_scalar</code> to …","<code>!=</code> between an <code>Array</code> and a <code>Scalar</code> and includes validities …","Comparison functions for <code>PrimitiveArray</code>","Comparison functions for <code>Utf8Array</code>","Perform <code>lhs == rhs</code> operation on <code>BinaryArray</code>.","Perform <code>lhs == rhs</code> operation on <code>BinaryArray</code> and include …","Perform <code>lhs == rhs</code> operation on <code>BinaryArray</code> and a scalar.","Perform <code>lhs == rhs</code> operation on <code>BinaryArray</code> and a scalar …","Perform <code>lhs &gt; rhs</code> operation on <code>BinaryArray</code>.","Perform <code>lhs &gt;= rhs</code> operation on <code>BinaryArray</code>.","Perform <code>lhs &gt;= rhs</code> operation on <code>BinaryArray</code> and a scalar.","Perform <code>lhs &gt; rhs</code> operation on <code>BinaryArray</code> and a scalar.","Perform <code>lhs &lt; rhs</code> operation on <code>BinaryArray</code>.","Perform <code>lhs &lt;= rhs</code> operation on <code>BinaryArray</code>.","Perform <code>lhs &lt;= rhs</code> operation on <code>BinaryArray</code> and a scalar.","Perform <code>lhs &lt; rhs</code> operation on <code>BinaryArray</code> and a scalar.","Perform <code>lhs != rhs</code> operation on <code>BinaryArray</code>.","Perform <code>lhs != rhs</code> operation on <code>BinaryArray</code>.","Perform <code>lhs != rhs</code> operation on <code>BinaryArray</code> and a scalar.","Perform <code>lhs != rhs</code> operation on <code>BinaryArray</code> and a scalar …","Evaluate <code>op(left, right)</code> for <code>BooleanArray</code> and scalar using …","Perform <code>lhs == rhs</code> operation on two <code>BooleanArray</code>s.","Perform <code>lhs == rhs</code> operation on two <code>BooleanArray</code>s and …","Perform <code>lhs == rhs</code> operation on a <code>BooleanArray</code> and a …","Perform <code>lhs == rhs</code> operation on a <code>BooleanArray</code> and a …","Perform <code>left &gt; right</code> operation on two arrays. Non-null …","Perform <code>left &gt;= right</code> operation on two arrays. Non-null …","Perform <code>left &gt;= right</code> operation on an array and a scalar …","Perform <code>left &gt; right</code> operation on an array and a scalar …","Perform <code>left &lt; right</code> operation on two arrays.","Perform <code>left &lt;= right</code> operation on two arrays.","Perform <code>left &lt;= right</code> operation on an array and a scalar …","Perform <code>left &lt; right</code> operation on an array and a scalar …","<code>lhs != rhs</code> for <code>BooleanArray</code>","<code>lhs != rhs</code> for <code>BooleanArray</code> and include validities in …","Perform <code>left != right</code> operation on an array and a scalar …","Perform <code>left != right</code> operation on an array and a scalar …","Evaluate <code>op(left, right)</code> for <code>PrimitiveArray</code> and scalar …","Perform <code>lhs == rhs</code> operation on two arrays.","Perform <code>lhs == rhs</code> operation on two arrays and include …","Perform <code>left == right</code> operation on an array and a scalar …","Perform <code>left == right</code> operation on an array and a scalar …","Perform <code>left &gt; right</code> operation on two arrays. Non-null …","Perform <code>left &gt;= right</code> operation on two arrays. Non-null …","Perform <code>left &gt;= right</code> operation on an array and a scalar …","Perform <code>left &gt; right</code> operation on an array and a scalar …","Perform <code>left &lt; right</code> operation on two arrays.","Perform <code>left &lt;= right</code> operation on two arrays.","Perform <code>left &lt;= right</code> operation on an array and a scalar …","Perform <code>left &lt; right</code> operation on an array and a scalar …","Perform <code>left != right</code> operation on two arrays.","Perform <code>left != right</code> operation on two arrays and include …","Perform <code>left != right</code> operation on an array and a scalar …","Perform <code>left != right</code> operation on an array and a scalar …","Perform <code>lhs == rhs</code> operation on <code>Utf8Array</code>.","Perform <code>lhs == rhs</code> operation on <code>Utf8Array</code> and include …","Perform <code>lhs == rhs</code> operation on <code>Utf8Array</code> and a scalar.","Perform <code>lhs == rhs</code> operation on <code>Utf8Array</code> and a scalar. …","Perform <code>lhs &gt; rhs</code> operation on <code>Utf8Array</code>.","Perform <code>lhs &gt;= rhs</code> operation on <code>Utf8Array</code>.","Perform <code>lhs &gt;= rhs</code> operation on <code>Utf8Array</code> and a scalar.","Perform <code>lhs &gt; rhs</code> operation on <code>Utf8Array</code> and a scalar.","Perform <code>lhs &lt; rhs</code> operation on <code>Utf8Array</code>.","Perform <code>lhs &lt;= rhs</code> operation on <code>Utf8Array</code>.","Perform <code>lhs &lt;= rhs</code> operation on <code>Utf8Array</code> and a scalar.","Perform <code>lhs &lt; rhs</code> operation on <code>Utf8Array</code> and a scalar.","Perform <code>lhs != rhs</code> operation on <code>Utf8Array</code>.","Perform <code>lhs != rhs</code> operation on <code>Utf8Array</code> and include …","Perform <code>lhs != rhs</code> operation on <code>Utf8Array</code> and a scalar.","Perform <code>lhs != rhs</code> operation on <code>Utf8Array</code> and a scalar. …","Concatenate multiple Array of the same type into a single …","Returns whether each element in <code>values</code> is in each element …","Function that can filter arbitrary arrays","Returns a prepared function optimized to filter multiple …","Filters an Array, returning elements matching the filter …","Returns a new Chunk with arrays containing only values …","Checks if an array of type <code>datatype</code> can be used in <code>hash</code>.","Returns the element-wise hash of an <code>Array</code>. Validity is …","Element-wise hash of a <code>BinaryArray</code>. Validity is preserved.","","","","Returns the values from <code>lhs</code> if the predicate is <code>true</code> or …","Checks if an array of type <code>datatype</code> can perform length …","Returns an array of integers with the number of bytes on …","Returns <code>lhs LIKE rhs</code> operation on two <code>BinaryArray</code>.","Returns <code>lhs LIKE rhs</code> operation.","Returns <code>lhs LIKE rhs</code> operation on two <code>Utf8Array</code>.","Returns <code>lhs LIKE rhs</code> operation.","Returns <code>lhs NOT LIKE rhs</code> operation on two <code>BinaryArray</code>s.","Returns <code>lhs NOT LIKE rhs</code> operation on two <code>BinaryArray</code>s.","Returns <code>lhs NOT LIKE rhs</code> operation on two <code>Utf8Array</code>.","Returns <code>lhs NOT LIKE rhs</code> operation.","Returns the <code>Array</code> limited by <code>num_elements</code>.","A slice denoting <code>(array_index, start, len)</code> representing a …","An iterator adapter that merge-sorts two iterators of …","","","","returns a comparison function between any two arrays of …","returns a comparison function between any two arrays of …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Combines two sorted Arrays of the same …","Given two iterators of slices representing two sets of …","","","Returns a vector of slices from different sorted arrays …","Takes N arrays together through <code>slices</code> under the …","Collect the MergeSortSlices to be a vec for reusing","","","","Returns whether <code>nullif</code> and <code>nullif_scalar</code> is implemented …","Returns an <code>Array</code> with the same type as <code>lhs</code> and whose …","Returns an <code>Array</code> with the same type as <code>lhs</code> and whose …","Returns an array whose validity is null iff <code>lhs == rhs</code> or …","Returns a <code>PrimitiveArray</code> whose validity is null iff …","Given a list of already sorted columns, find partition …","Regex matches","Regex matches","One column to be used in lexicographical sort","Options that define how sort kernels should behave","","","","","","","Checks if an array of type <code>datatype</code> can be sorted","","","","","","Whether to sort in descending order","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Sort a list of <code>Array</code> using <code>SortOptions</code> provided for each …","Sorts a list of <code>SortColumn</code> into a non-nullable …","Sorts a list of <code>SortColumn</code> into a non-nullable …","Whether to sort nulls first","The options to apply to the sort","A comparable row-oriented representation of a collection …","Sort the <code>Array</code> using <code>SortOptions</code>.","Sort elements from <code>values</code> into a non-nullable …","","","","","","","","","The array to sort","A comparable representation of a row","Converts <code>Box&lt;dyn Array&gt;</code> columns into a row-oriented format.","A row-oriented representation of arrow data, that is …","An iterator over <code>Rows</code>","Configure the data type and sort order for a given column","","","","","","","","","","","","","","","","","","","Convert a slice of <code>Box&lt;dyn Array&gt;</code> columns into <code>Rows</code>","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns the iterator","Returns the number of rows","","Create a new <code>RowConverter</code> with the provided schema","Create a new column with the given data type","Create a new column with the given data type and …","","","","Get a reference to a certain row.","Get a reference to a certain row but not check the bounds.","","","","","","","","","","","","","","","","","","","Checks if an array of type <code>datatype</code> can perform substring …","Returns an ArrayRef with a substring starting from <code>start</code> …","Checks if an array of type <code>datatype</code> can perform take …","Returns a new <code>Array</code> with only indices at <code>indices</code>. Null …","Checks if an array of type <code>datatype</code> can perform day …","Checks if an array of type <code>datatype</code> can perform hour …","Checks if an array of type <code>data_type</code> can perform ISO week …","Checks if an array of type <code>datatype</code> can perform minute …","Checks if an array of type <code>datatype</code> can perform month …","Checks if an array of type <code>datatype</code> can perform nanosecond …","Checks if an array of type <code>datatype</code> can perform second …","Checks if an array of type <code>data_type</code> can perform weekday …","Checks if an array of type <code>datatype</code> can perform year …","Extracts the days of a temporal array as …","Extracts the hours of a temporal array as …","Extracts ISO week of a temporal array as …","Extracts the minutes of a temporal array as …","Extracts the months of a temporal array as …","Extracts the nanoseconds of a temporal array as …","Extracts the seconds of a temporal array as …","Extracts weekday of a temporal array as <code>PrimitiveArray&lt;u32&gt;</code>…","Extracts the years of a temporal array as …","Checks if an array of type <code>datatype</code> can perform lower …","Checks if an array of type <code>datatype</code> can perform upper …","Returns a new <code>Array</code> where each of each of the elements is …","Returns a new <code>Array</code> where each of each of the elements is …","utf8_apply will apply <code>Fn(&amp;str) -&gt; String</code> to every value in …","Shifts array by defined number of items (to left or right) …","Opaque binary data of variable length.","Opaque binary data of variable length whose offsets are …","A boolean represented as a single bit.","<code>true</code> and <code>false</code>.","The set of supported logical types in this crate.","An <code>i32</code> representing the elapsed time since UNIX epoch …","An <code>i64</code> representing the elapsed time since UNIX epoch …","The number of elapsed days and milliseconds, stored as 2 …","Decimal value with precision and scale precision is the …","Decimal backed by 256 bits","Dense union","A dictionary encoded array by <code>IntegerType</code>.","A dictionary encoded array (<code>key_type</code>, <code>value_type</code>), where …","Measure of elapsed time. This elapsed time is a physical …","Extension type.","Represents Arrow’s metadata of a “column”.","Opaque binary data of fixed size.","Opaque binary data of fixed size. Enum parameter specifies …","A list of some data type with fixed length.","A list of some logical data type with a fixed number of …","An 16-bit float","A <code>f32</code>","A <code>f64</code>","A signed 16-bit integer.","An <code>i16</code>","A signed 32-bit integer.","An <code>i32</code>","A signed 64-bit integer.","An <code>i64</code>","A signed 8-bit integer.","An <code>i8</code>","the set of valid indices types of a dictionary-encoded …","A “calendar” interval modeling elapsed time that takes …","Interval units defined in Arrow","Opaque binary data of variable length and 64-bit offsets.","Opaque binary data of variable length whose offsets are …","A list of some data type with variable length and 64-bit …","A list of some logical data type whose offsets are …","A variable-length string in Unicode with UFT-8 encoding …","A variable-length UTF-8 encoded string whose offsets are …","A list of some data type with variable length.","A list of some logical data type whose offsets are …","A nested type.","A nested type that is represented as","typedef for BTreeMap&lt;String, String&gt; denoting <code>Field</code>’s …","Time in microseconds.","Time in milliseconds.","The number of elapsed months (i32), days (i32) and …","Time in nanoseconds.","A Null with no allocation.","Null type","The set of physical types: unique in-memory …","An array where each slot has a known compile-time size.","","An ordered sequence of <code>Field</code>s with associated <code>Metadata</code>.","typedef for <code>Arc&lt;Schema&gt;</code>.","Time in seconds.","Sparse union","A nested type that contains an arbitrary number of fields.","A nested <code>DataType</code> with a given number of <code>Field</code>s.","A 32-bit time representing the elapsed time since midnight …","A 64-bit time representing the elapsed time since midnight …","The time units defined in Arrow.","A <code>i64</code> representing a timestamp measured in <code>TimeUnit</code> with …","An unsigned 16-bit integer.","An <code>u16</code>","An unsigned 32-bit integer.","An <code>u32</code>","An unsigned 64-bit integer.","An <code>u64</code>","An unsigned 8-bit integer.","An <code>u8</code>","A nested type that represents slots of differing types.","A nested datatype that can represent slots of differing …","Mode of <code>DataType::Union</code>","A variable-length string in Unicode with UTF-8 encoding.","A variable-length UTF-8 encoded string whose offsets are …","The number of elapsed whole months.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the <code>Field</code>’s <code>DataType</code>.","Its logical <code>DataType</code>","","","","","","","","","","Whether this physical type equals <code>PhysicalType::Primitive</code> …","","","","","","","","","The fields composing this schema.","Returns a new <code>Schema</code> with a subset of all fields whose …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","support get extension for metadata","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns whether the mode is dense","Its nullability","Returns whether the mode is sparse","Additional custom (opaque) metadata.","Optional metadata.","Its name","Creates a new <code>Field</code>.","Constructs a <code>UnionMode::Sparse</code> if the input bool is true, …","Returns <code>&amp;self</code> for all but <code>DataType::Extension</code>. For …","","","","","","","","","the <code>PhysicalType</code> of this <code>DataType</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new <code>Field</code> with metadata.","Attaches a <code>Metadata</code> to <code>Schema</code>","Enum with all errors in this crate.","Wrapper for an error triggered by a dependency","Error during import or export to/from a format","When an invalid argument is passed to a function.","Wrapper for IO errors","Returned when functionality is not yet available.","Whenever incoming data from the C data interface, IPC or …","Whenever pushing to a container fails because it does not …","Typedef for a <code>std::result::Result</code> of an <code>Error</code>.","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","Wraps an external error in an <code>Error</code>.","Calls <code>U::from(self)</code>.","","","","","","ABI-compatible struct for <code>ArrowArray</code>","ABI-compatible struct for <code>ArrowArrayStream</code>.","Implements an iterator of <code>Array</code> consumed from the C stream …","ABI-compatible struct for <code>ArrowSchema</code>","","","","","","","","","","","","create an empty ArrowSchema","creates an empty <code>ArrowArray</code>, which can be used to import …","Creates an empty <code>ArrowArrayStream</code> used to import from a …","Exports an <code>Box&lt;dyn Array&gt;</code> to the C data interface.","Exports a <code>Field</code> to the C data interface.","Exports an iterator to the C stream interface","Returns the field provided by the stream","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Imports an <code>Array</code> from the C data interface.","Imports a <code>Field</code> from the C data interface.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Functionality to mmap in-memory data regions.","Advances this iterator by one array","","","","","","","","","Returns a new <code>ArrowArrayStreamReader</code>","","","","","Creates a (non-null) <code>PrimitiveArray</code> from a slice of values.","Read and write from and to Apache Avro","Convert data between the Arrow and CSV (comma-separated …","Serialization and deserialization to Arrow’s flight …","APIs to read from and write to Arrow’s IPC format.","Convert data between the Arrow memory format and JSON …","Utils for JSON integration testing","APIs to read from and write to NDJSON","API to serialize and deserialize data from and to ODBC","APIs to read from ORC format.","APIs to read from and write to Parquet format.","APIs to represent <code>Chunk</code> as a formatted table.","","APIs to read from Avro format to arrow.","APIs to write to Avro format.","Single threaded, blocking reader of Avro; <code>Iterator</code> of <code>Chunk</code>…","","","Deserializes a <code>Block</code> assumed to be encoded according to …","Returns the argument unchanged.","Infers an <code>Schema</code> from the root <code>Record</code>. This","Calls <code>U::from(self)</code>.","Deconstructs itself into its internal reader","","Creates a new <code>Reader</code>.","","","","","A type alias for a boxed <code>StreamingIterator</code>, used to write …","Whether <code>new_serializer</code> supports <code>data_type</code>.","Creates a <code>StreamingIterator</code> trait object that presents …","consumes a set of <code>BoxSerializer</code> into an <code>Block</code>.","Converts a <code>Schema</code> to an Avro <code>Record</code>.","APIs to read from CSV","Asynchronous reading of CSV","APIs to write to CSV","A single CSV record stored as raw bytes.","A already configured CSV reader.","Builds a CSV reader with various configuration knobs.","","Return the entire row as a single byte slice. The slice …","A convenience method for specifying a configuration to …","","","","","","","Set the capacity (in bytes) of the buffer used in the CSV …","Returns a reference to the first row read by this parser …","Returns a borrowed iterator over all records as raw bytes.","Clear this record so that it has zero fields.","","","The comment character to use when parsing CSV.","","","The field delimiter to use when parsing CSV.","Deserialize this record.","Returns a borrowed iterator over deserialized records.","Deserializes rows <code>ByteRecord</code> into a <code>Chunk</code>. Note that this …","Deserializes <code>column</code> of <code>rows</code> into an <code>Array</code> of <code>DataType</code> …","Enable double quote escapes.","","","","","","","The escape character to use when parsing CSV.","","Whether the number of fields in records is allowed to …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Build a CSV parser from this configuration that reads data …","Create a new CSV parser with a default configuration for …","Build a CSV parser from this configuration that reads data …","Create a new CSV parser with a default configuration for …","Return the field at index <code>i</code>.","Returns a mutable reference to the underlying reader.","Returns a reference to the underlying reader.","Whether to treat the first row as a special header row.","Returns true if and only if this reader has been …","Returns a reference to the first row read by this parser.","","Infers <code>DataType</code> from <code>bytes</code>","Infers the <code>Field</code>s of a CSV file by reading through the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns an owned iterator over all records as raw bytes.","Returns an owned iterator over deserialized records.","Unwraps this CSV reader, returning the underlying reader.","","Returns an owned iterator over all records as strings.","Returns true if and only if this reader has been exhausted.","Returns true if and only if this record is empty.","Returns an iterator over all fields in this record.","Returns the number of fields in this record.","Create a new empty <code>ByteRecord</code>.","Create a new builder for configuring CSV parsing.","Return the position of this record, if available.","Return the current position of this CSV reader.","Add a new field to this record.","The quote character to use when parsing CSV.","Enable or disable quoting.","Return the start and end position of a field in this …","Read a single row into the given byte record. Returns …","Read a single row into the given record. Returns false …","Reads <code>len</code> rows from <code>reader</code> into <code>row</code>, skiping the first <code>skip</code>…","Returns a borrowed iterator over all records as strings.","Seeks the underlying reader to the position given.","This is like <code>seek</code>, but provides direct control over how …","Set the headers of this CSV parser manually as raw bytes.","Set the headers of this CSV parser manually.","Set the position of this record.","The record terminator to use when parsing CSV.","","Trim the fields of this record so that leading and …","Whether fields are trimmed of leading and trailing …","Truncate this record to <code>n</code> fields.","","","","","","","","","","Create a new empty <code>ByteRecord</code> with the given capacity …","A already configured CSV reader.","Builds a CSV reader with various configuration knobs.","A single CSV record stored as raw bytes.","An error that can occur when processing CSV data.","","Return the entire row as a single byte slice. The slice …","A convenience method for specifying a configuration to …","","","","","","","","","Set the capacity (in bytes) of the buffer used in the CSV …","Returns a reference to the first row read by this parser …","Returns a borrowed iterator over all records as raw bytes.","Clear this record so that it has zero fields.","Clone this record, but only copy <code>fields</code> up to the end of …","","The comment character to use when parsing CSV.","Build a CSV <code>serde</code> deserializer from this configuration …","Build a CSV reader from this configuration that reads data …","","","","The field delimiter to use when parsing CSV.","Deserialize this record.","Deserializes rows <code>ByteRecord</code> into <code>Chunk</code>. Note that this is …","Deserializes <code>column</code> of <code>rows</code> into an <code>Array</code> of <code>DataType</code> …","Enable double quote escapes.","If set, CSV records’ stream will end when first i/o …","","","","","","","The escape character to use when parsing CSV.","","Whether the number of fields in records is allowed to …","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Create a new CSV parser with a default configuration for …","Return the field at index <code>i</code>.","Returns a mutable reference to the underlying reader.","Returns a reference to the underlying reader.","Returns true if and only if this reader has been …","Whether to treat the first row as a special header row.","Returns a reference to the first row read by this parser.","","Infers <code>DataType</code> from <code>bytes</code>","Infers the <code>Field</code>s of a CSV file by reading through the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns an owned iterator over all records as raw bytes.","Unwraps this CSV reader, returning the underlying reader.","","Unwrap this error into its underlying type.","Returns an owned iterator over all records as strings.","Returns true if and only if this reader has been exhausted.","Returns true if and only if this record is empty.","Returns true if this is an I/O error.","Returns an iterator over all fields in this record.","Return the specific type of this error.","Returns the number of fields in this record.","Create a new empty <code>ByteRecord</code>.","Create a new builder for configuring CSV parsing.","Return the position of this record, if available.","Return the position for this error, if one exists.","Return the current position of this CSV reader.","","Add a new field to this record.","The quote character to use when parsing CSV.","Enable or disable quoting.","Return the start and end position of a field in this …","Read a single row into the given byte record. Returns …","Read a single row into the given record. Returns false …","Asynchronosly read <code>len</code> rows from <code>reader</code> into <code>row</code>, skiping …","Returns a borrowed iterator over all records as strings.","Rewinds the underlying reader to first data record.","Seeks the underlying reader to the position given.","This is like <code>seek</code>, but provides direct control over how …","Set the headers of this CSV parser manually as raw bytes.","Set the headers of this CSV parser manually.","Set the position of this record.","","The record terminator to use when parsing CSV.","","","Trim the fields of this record so that leading and …","Whether fields are trimmed of leading and trailing …","Truncate this record to <code>n</code> fields.","","","","","","","","","","","","","Create a new empty <code>ByteRecord</code> with the given capacity …","Options to serialize logical types to CSV The default is …","","","","","","used for <code>DataType::Date32</code>","used for <code>DataType::Date64</code>","","used as separator/delimiter","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Returns a <code>StreamingIterator</code> that yields <code>&amp;[u8]</code> serialized …","quoting character","Serializes <code>Chunk</code> to a vector of rows. The vector is …","used for <code>DataType::Time32</code>","used for <code>DataType::Time64</code>","used for <code>DataType::Timestamp</code>","","","","","Writes <code>Chunk</code> to <code>writer</code> according to the serialization …","Writes a CSV header to <code>writer</code>","Options declaring the behaviour of writing to IPC","Whether the buffers should be compressed and which codec …","","Deserializes <code>FlightData</code> representing a record batch …","Deserializes <code>FlightData</code>, assuming it to be a dictionary …","Deserializes <code>FlightData</code> into either a <code>Chunk</code> (when the …","Deserialize an IPC message into <code>Schema</code>, <code>IpcSchema</code>. Use to …","Serializes <code>Chunk</code> to a vector of <code>FlightData</code> representing …","Serializes a <code>Schema</code> to <code>FlightData</code>.","Convert a <code>Schema</code> to bytes in the format expected in …","Serializes a <code>Schema</code> to <code>SchemaResult</code>.","Struct containing <code>dictionary_id</code> and nested <code>IpcField</code>, …","Struct containing fields and whether the file is written …","","","A struct adapter of Read+Seek+Write to append to IPC files","","","","","","","","","","dictionary id","","","optional children","The fields in the schema","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Endianness of the file","APIs to read Arrow’s IPC format.","","","","","","","","","APIs to write to Arrow’s IPC format.","how dictionaries are tracked in this crate","The record contains a number of buffers that does not …","Metadata of an Arrow IPC file, written in the footer of …","An iterator of <code>Chunk</code>s from an Arrow IPC file.","A bitmap’s size is smaller than the required for the …","A buffer’s size is smaller than the required for the …","A buffer’s size is larger than the file size","The block is an invalid flatbuffer","The message’s body length is an invalid flatbuffer","The message’s buffers is an invalid flatbuffer","The compression is an invalid flatbuffer","The message’s data is an invalid flatbuffer","The footer’s dictionaries is an invalid flatbuffer","The footer is an invalid flatbuffer","The message’s header is an invalid flatbuffer","The dictionary id is an invalid flatbuffer","The dictionary is_delta is an invalid flatbuffer","The dictionary message is an invalid flatbuffer","The message’s nodes is an invalid flatbuffer","The footer’s record batches is an invalid flatbuffer","The footer’s schema is an invalid flatbuffer","The version is an invalid flatbuffer","The IPC file does not end with [b’A’, b’R’, b’R…","The IPC file does not start with [b’A’, b’R’, b’R…","Invalid dictionary id","Field id is not a dictionary","The message does not contain data","The file’s schema does not contain fields","RecordBatch messages do not contain buffers","The message does not contain a header","RecordBatch messages does not contain nodes","The file’s footer does not contain record batches","The file’s footer does not contain a schema","The first 4 bytes of the last 10 bytes is &lt; 0","The different types of errors that reading from IPC can …","Next item in the stream","Metadata of an Arrow IPC stream, written at the start of …","Arrow Stream reader.","Encodes the stream’s status after each read.","dictionaries can only contain dictionary messages; record …","Relative positions in the file is &lt; 0","A live stream without data","","","The blocks in the file","","","","","","","","","","","","","","","","","Deserialize an flatbuffers-encoded Schema message into …","Async reader for Arrow IPC files","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get the inner memory scratches so they can be reused in a …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this FileReader, returning the underlying reader","","","The files’ <code>IpcSchema</code>","The IPC fields tracking dictionaries","Check if the stream is finished","Returns the <code>FileMetadata</code>","Return the schema of the stream","Creates a new <code>FileReader</code>. Use <code>projection</code> to only take …","Try to create a new stream reader","","","Reads the record batch at position <code>index</code> from the reader.","Reads all file’s dictionaries, if any This function is …","Read the Arrow IPC file’s metadata","Reads the metadata of the stream","Return the schema of the file","Return the schema of the file","The schema that is read from the file footer","The schema that is read from the stream’s first message","Set the inner memory scratches so they can be reused in a …","The total size of the file in bytes","APIs to read Arrow streams asynchronously","","","","","","","","","","","","","","","","","","","","","Return the data inside this wrapper.","The IPC version of the stream","The size of the IPC buffer","number of bytes of all buffers in the record","the size of the file","Declared number of elements in the buffer","Declared length of the bitmap","Number of bits on the IPC buffer","The requested dictionary id","The requested dictionary id","Bytes required for the <code>length</code> and <code>type</code>","The name of the <code>NativeType</code>","Async reader for Arrow IPC files","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Get the metadata from the IPC file.","Create a new IPC file reader.","","Read the metadata from an IPC file.","Get the projected schema from the IPC file.","","","","","A <code>Stream</code> over an Arrow IPC stream that asynchronously …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Return the schema of the stream","Creates a new <code>AsyncStreamReader</code>","","Reads the <code>StreamMetadata</code> of the Arrow stream asynchronously","","","","","Compression codec","Arrow file writer","LZ4 (framed)","An array <code>Chunk</code> with optional accompanying IPC fields.","Arrow stream writer","Options declaring the behaviour of writing to IPC","ZSTD","","","","","","","","","","","","","","","Get the Arrow columns in this record.","Whether the buffers should be compressed and which codec …","Assigns every dictionary field a unique ID","","","","Get the IPC fields for this record.","Async writer for IPC files.","Write continuation bytes, and mark the stream as done","Write footer and closing tag, then mark the writer as done","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Get the inner memory scratches so they can be reused in a …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes itself, returning the inner writer.","Consumes itself into the inner writer","Creates a new <code>StreamWriter</code>","Creates a new <code>FileWriter</code>.","Converts a Schema and IpcFields to a flatbuffers-encoded …","Set the inner memory scratches so they can be reused in a …","Starts the stream by writing a Schema message to it. Use …","Writes the header and first (schema) message to the file.","<code>async</code> writing of arrow streams","","","","","","","Creates a new <code>FileWriter</code> from an existing file, seeking to …","","","","","Creates a new <code>FileWriter</code> and writes the header to <code>writer</code>","","","","","Writes an <code>Array</code> to <code>arrow_data</code>","Writes <code>Chunk</code> to the stream","Writes <code>Chunk</code> to the file","Sink that writes array <code>chunks</code> as an IPC file.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a new file writer.","","","","","","","","A sink that writes array <code>chunks</code> as an IPC stream.","Options declaring the behaviour of writing to IPC","","","","","","","","Whether the buffers should be compressed and which codec …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>StreamSink</code>.","","","","","","","","","","","","APIs to read and deserialize from JSON","APIs to write to JSON","Deserializes a <code>json</code> <code>Value</code> into an <code>Array</code> of <code>DataType</code> This …","Deserializes a <code>json</code> <code>Value</code> serialized in Pandas record …","Infers <code>DataType</code> from <code>Value</code>.","Infers <code>Schema</code> from JSON <code>Value</code> in (pandas-compatible) …","","An iterator which wraps a normal <code>Iterator</code>.","A fallible, streaming iterator which can be advanced from …","An iterator over no items.","The error type of iteration.","A fallible, streaming iterator.","An iterator which filters elements with a predicate.","An iterator which is well-behaved at the beginning and end …","The type being iterated over.","An iterator which applies a transform to elements.","An iterator which applies a transform to errors.","An iterator which applies a transform to elements.","<code>FallibleStreamingIterator</code> that serializes a <code>Chunk</code> into …","<code>FallibleStreamingIterator</code> that serializes an <code>Array</code> to …","An iterator which skips a number of initial elements.","An iterator which skips initial elements matching a …","An iterator which only returns a number of initial …","An iterator which only returns initial elements matching a …","","Advances the iterator to the next position.","","","","","","","","","","","","","","Advances the state of the iterator to the next item from …","","","","","","Determines if all elements of the iterator satisfy a …","Determines if any elements of the iterator satisfy a …","","","","","","","","","","","","","","","","","","","","","","","","","","","Borrows an iterator, rather than consuming it.","","","Converts a normal <code>Iterator</code> over <code>Results</code> of references into …","Returns the number of remaining elements in the iterator.","Returns an iterator over no items.","Returns an iterator which filters elements by a predicate.","Returns the first element of the iterator which satisfies …","","Calls a closure on each element of an iterator.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns an iterator which is well-behaved at the beginning …","Returns the current element.","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns an iterator which applies a transform to elements.","Returns an iterator that applies a transform to errors.","Returns an iterator which applies a transform to elements.","Creates a new <code>RecordSerializer</code>.","Creates a new <code>Serializer</code>.","Advances the iterator, returning the next element.","","","Advances the back of the iterator, returning the last …","","Returns the <code>nth</code> element of the iterator.","Returns the position of the first element matching a …","Returns bounds on the number of remaining elements in the …","","","","","","","","","","","","Returns an iterator which skips the first <code>n</code> elements.","Returns an iterator which skips the first sequence of …","Returns an iterator which only returns the first <code>n</code> …","Returns an iterator which only returns the first sequence …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Writes valid JSON from an iterator of (assumed …","A struct that represents an Arrow file with a schema and …","A struct that partially reads the Arrow JSON record batch","A struct that partially reads the Arrow JSON column/array","A struct that partially reads the Arrow JSON dictionary …","Fields are left as JSON <code>Value</code> as they vary by <code>DataType</code>","Dictionary metadata","A struct that partially reads the Arrow JSON schema.","the type of the integer in the dictionary","","The batches","the bit width","","","","","","","","","","","","","","","","","the children","the children","","","the columns","the number of elements","the dictionary batch","the data","","","","","","","","","The dictionaries","the dictionary","The type","The fields","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","the dictionary id","the id","the index type","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","whether it is ordered","whether it is signed","The metadata","the fields’ metadata","The name","its name","whether it is nullable","the offsets","API to read from Arrow JSON integration format","The schema","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","the type id for union types","the validity bitmap","API to write to Arrow JSON integration format","Deserializes a <code>ArrowJsonBatch</code> to a <code>Chunk</code>","Deserializes a <code>Value</code>","Construct an <code>Array</code> from the JSON integration format","Serializes a <code>Chunk</code> to <code>ArrowJsonBatch</code>.","Serializes a <code>Schema</code> and associated <code>IpcField</code> to …","APIs to read and deserialize NDJSON.","APIs to serialize and write to NDJSON.","The error type of iteration.","A fallible, streaming iterator.","A <code>FallibleStreamingIterator</code> of NDJSON rows.","The type being iterated over.","Advances the iterator to the next position.","","Determines if all elements of the iterator satisfy a …","Determines if any elements of the iterator satisfy a …","","","Borrows an iterator, rather than consuming it.","Returns the number of remaining elements in the iterator.","Deserializes rows into an <code>Array</code> of <code>DataType</code>.","Deserializes an iterator of rows into an <code>Array</code> of <code>DataType</code>.","Returns an iterator which filters elements by a predicate.","Returns the first element of the iterator which satisfies …","Calls a closure on each element of an iterator.","Returns the argument unchanged.","Returns an iterator which is well-behaved at the beginning …","Returns the current element.","","Infers the <code>DataType</code> from an NDJSON file, optionally only …","Infers the <code>DataType</code> from an iterator of JSON strings. A …","Calls <code>U::from(self)</code>.","Deconstruct <code>FileReader</code> into the reader and the internal …","Returns an iterator which applies a transform to elements.","Returns an iterator that applies a transform to errors.","Returns an iterator which applies a transform to elements.","Creates a new <code>FileReader</code> from a reader and <code>rows</code>.","Advances the iterator, returning the next element.","Returns the <code>nth</code> element of the iterator.","Returns the position of the first element matching a …","Returns bounds on the number of remaining elements in the …","Returns an iterator which skips the first <code>n</code> elements.","Returns an iterator which skips the first sequence of …","Returns an iterator which only returns the first <code>n</code> …","Returns an iterator which only returns the first sequence …","","","","The error type of iteration.","A fallible, streaming iterator.","An iterator adapter that receives an implementer of <code>Write</code> …","The type being iterated over.","<code>FallibleStreamingIterator</code> that serializes an <code>Array</code> to …","","Advances the iterator to the next position.","","Determines if all elements of the iterator satisfy a …","Determines if any elements of the iterator satisfy a …","","","","","Borrows an iterator, rather than consuming it.","","","Returns the number of remaining elements in the iterator.","Returns an iterator which filters elements by a predicate.","Returns the first element of the iterator which satisfies …","","Calls a closure on each element of an iterator.","Returns the argument unchanged.","Returns the argument unchanged.","Returns an iterator which is well-behaved at the beginning …","Returns the current element.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the inner content of this iterator","","Returns an iterator which applies a transform to elements.","Returns an iterator that applies a transform to errors.","Returns an iterator which applies a transform to elements.","Creates a new <code>FileWriter</code>.","Creates a new <code>Serializer</code>.","Advances the iterator, returning the next element.","","Returns the <code>nth</code> element of the iterator.","Returns the position of the first element matching a …","Returns bounds on the number of remaining elements in the …","Returns an iterator which skips the first <code>n</code> elements.","Returns an iterator which skips the first sequence of …","Returns an iterator which only returns the first <code>n</code> …","Returns an iterator which only returns the first sequence …","","","","","","","","","APIs to read from ODBC","APIs to write to ODBC","Creates a <code>api::buffers::ColumnarBuffer</code> from the metadata.","Deserializes a <code>AnyColumnView</code> into an array of <code>DataType</code>. …","Infers the Arrow <code>Field</code>s from a <code>ResultSetMetadata</code>","A writer of <code>Chunk</code>s to an ODBC <code>api::Prepared</code> statement.","","","Creates a <code>api::buffers::ColumnarBuffer</code> from …","Returns the argument unchanged.","Infers the <code>api::ColumnDescription</code> from the fields","Calls <code>U::from(self)</code>.","Serializes an <code>Array</code> to <code>api::buffers::AnyColumnViewMut</code> This …","","","Creates a new <code>Writer</code>.","","Writes a chunk to the writer.","","APIs to read from ORC format.","Deserializes column <code>column</code> from <code>stripe</code>, assumed to …","Infers a <code>Schema</code> from the files’ <code>Footer</code>.","APIs to read from Parquet format.","APIs to write to Parquet format.","Type def for a sharable, boxed dyn <code>Iterator</code> of arrays","A <code>FallibleStreamingIterator</code> that decompresses …","","","An embedded BSON document","","Metadata for a column chunk.","A descriptor for leaf-level primitive columns. This …","A <code>CompressedDataPage</code> is compressed, encoded representation …","A <code>DataPage</code>","","","A Date","","A decimal value.","Decompressor that allows re-using the page buffer of …","A <code>DictPage</code>","","","an enum is converted into a binary field","The error type of iteration.","","A fallible, streaming iterator.","Error presented when trying to use a code branch that …","Error presented when trying to use a feature from parquet …","Metadata for a Parquet file.","An iterator of <code>Chunk</code>s coming from row groups of a parquet …","Iterator finished","","","","","The initial info of nested data types.","","","","","","A signed integer value.","","","An interval of time","When encoding, the user passed an invalid parameter","The type being iterated over.","","","An embedded JSON document","","List data types","","","","A special kind of fallible streaming iterator where <code>advance</code>…","","Type def for a sharable, boxed dyn <code>Iterator</code> of …","The state of nested data types.","When the parquet file is known to be out of spec.","A <code>Page</code> is an uncompressed, encoded representation of a …","Type declaration for a page filter","A fallible <code>Iterator</code> of <code>CompressedDataPage</code>. This iterator …","Trait describing a <code>FallibleStreamingIterator</code> of <code>Page</code>","Errors generated by this crate","","Representation of a Parquet type describing primitive and …","The set of all physical types representable in Parquet","Primitive data types","","","","A <code>MutStreamingIterator</code> of pre-read column chunks","An <code>Iterator</code> of <code>Chunk</code> that (dynamically) adapts a vector of …","Metadata for a row group.","An [<code>Iterator&lt;Item=RowGroupDeserializer&gt;</code>] from row groups …","Iterator still has elements","State of <code>MutStreamingIterator</code>.","","Struct data types","An iterator adapter over <code>NestedArrayIter</code> assumed to be …","","A time.","A time","","A date/time combination","A date/time combination","","","","An unsigned integer value.","","","","","","When decoding or decompressing, the page would allocate …","","","","","","","","","","","Reads the column indexes of all <code>ColumnChunkMetaData</code> and …","Reads a <code>FileMetaData</code> from the reader, located at the end …","Asynchronously reads the files’ metadata","Advances the iterator to the next position.","","","","","Determines if all elements of the iterator satisfy a …","Determines if any elements of the iterator satisfy a …","The <code>ParquetType</code> this descriptor is a leaf of","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Borrows an iterator, rather than consuming it.","Returns the offset and length in bytes of the column chunk …","","","","","","","","","","","","","","","","","","","","","Returns this column’s <code>ColumnChunk</code>","Returns the encoding for this column","An iterator adapter that maps multiple iterators of <code>Pages</code> …","Column (sort) order used for <code>min</code> and <code>max</code> values of each …","Returns slice of column chunk metadata.","Returns the total compressed data size of this column …","Total size of all compressed column data in this row group.","<code>Compression</code> for this column.","Returns the number of remaining elements in the iterator.","Creates a new <code>ListArray</code> or <code>FixedSizeListArray</code>.","Creates a new <code>MapArray</code>.","String message for application that wrote this file.","Returns the offset for the column data.","Decompresses the page, using <code>buffer</code> for decompression. If …","The <code>ColumnDescriptor</code> for this column. This descriptor …","The descriptor this columns’ leaf.","Returns the offset for the dictionary page, if any.","","","","","","","","","","","","","Byte offset in <code>file_path()</code>.","File where the column chunk is stored.","Returns an iterator which filters elements by a predicate.","Returns the first element of the iterator which satisfies …","","","","","","","","","","","","","","","Calls a closure on each element of an iterator.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns an iterator which is well-behaved at the beginning …","Returns the current element.","","","","","Returns a <code>ColumnIterator</code> of column chunks corresponding to …","Returns all <code>ColumnChunkMetaData</code> associated to <code>field_name</code>. …","Returns all <code>ColumnChunkMetaData</code> associated to <code>field_name</code>. …","Creates a new iterator of compressed pages.","Returns a stream of compressed data pages","Returns <code>true</code> if this column chunk contains a index page, …","","","","","Returns the offset for the index page.","API to perform page-level filtering (also known as indexes)","","Initialize <code>NestedState</code> from <code>&amp;[InitNested]</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns two buffers: the first buffer corresponds to the …","Returns its internal buffer, consuming itself.","Returns the reader and this Readers’ interval buffer","","","","","","Method to convert to Thrift.","key_value_metadata of this file.","The number of rows in this state","Returns an iterator which applies a transform to elements.","Returns an iterator that applies a transform to errors.","Returns an iterator which applies a transform to elements.","The column’s <code>ColumnMetaData</code>","Returns the number of (parquet) columns that a <code>DataType</code> …","The nesteds composing <code>NestedState</code>.","Creates a new <code>Decompressor</code>.","Returns a new <code>BasicDecompressor</code>.","Returns a new <code>PageReader</code>.","Returns a new <code>ColumnChunkMetaData</code>","Creates new descriptor for leaf-level column.","Create a new <code>RowGroupMetaData</code>","Returns a new <code>ReadColumnIterator</code>","Creates a new <code>StructIterator</code> with <code>iters</code> and <code>fields</code>.","Returns a new <code>FileReader</code>.","Returns a new <code>RowGroupReader</code>","Creates a new <code>RowGroupDeserializer</code>.","Creates a new <code>NestedState</code>.","Create a a new <code>PageReader</code> with <code>PageMetaData</code>.","Advances the iterator, returning the next element.","","","","","","Returns the <code>nth</code> element of the iterator.","Number of rows in this row group.","Returns the number of rows on this row group","number of rows in the file.","Total number of values in this column chunk. Note that …","","The path of this column. For instance, “a.b.c.d”.","The <code>PhysicalType</code> of this column.","Returns the position of the first element matching a …","","Reads all columns that are part of the parquet field …","Reads all columns that are part of the parquet field …","Returns a vector of iterators of <code>Array</code> (<code>ArrayIter</code>) …","Returns a vector of iterators of <code>Array</code> corresponding to …","Reads parquets’ metadata syncronously.","Reads parquets’ metadata asynchronously.","Read <code>PageLocation</code>s from the <code>ColumnChunkMetaData</code>s. Returns …","The row groups of this file","APIs to handle Parquet &lt;-&gt; Arrow schemas.","Returns the <code>Schema</code> associated to this file.","schema descriptor.","Returns bounds on the number of remaining elements in the …","","Returns an iterator which skips the first <code>n</code> elements.","Returns an iterator which skips the first sequence of …","APIs exposing <code>parquet2</code>’s statistics as arrow’s …","Decodes the raw statistics into <code>Statistics</code>.","","Returns an iterator which only returns the first <code>n</code> …","Returns an iterator which only returns the first sequence …","Converts a vector of columns associated with the parquet …","","","","","","","","","","","","Total byte size of all uncompressed column data in this …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the total uncompressed data size of this column …","version of this file.","","","","","","","","","<code>ColumnPageStatistics</code> contains the minimum, maximum, and …","Page statistics of an Arrow field.","An enum describing a page that was either selected in a …","An interval","Variant used for fields with multiple parquet columns …","Variant used for fields with a single parquet column (e.g. …","","","","","","","","","","","","","","","Returns the set of (row) intervals of the pages.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Checks whether the row group have page index information …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Its length","","The maximum values in the pages","The minimum values in the pages","Create a new interal","The number of null values in the pages.","","Reads the column indexes from the reader assuming a valid …","Reads all page locations and index locations (IO-bounded) …","rows to select from the page","Its start","Location of the page in the file","","","","","","","","","","","","","","","Metadata for a Parquet file.","","Wrapper struct to store key values","Representation of a Parquet type describing primitive and …","","A schema descriptor. This encapsulates the top-level …","Column (sort) order used for <code>min</code> and <code>max</code> values of each …","String message for application that wrote this file.","Infers a <code>Schema</code> from parquet’s <code>FileMetaData</code>. This first …","","key_value_metadata of this file.","number of rows in the file.","Converts <code>ParquetType</code>s to a <code>Field</code>, ignoring parquet fields …","Reads an arrow schema from Parquet’s file metadata. …","The row groups of this file","schema descriptor.","","version of this file.","","","","","Arrow-deserialized parquet Statistics of a file","","","Deserializes the statistics in the column chunks from all …","number of dictinct values. This is a <code>UInt64Array</code> for …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Maximum","Minimum","number of nulls. This is a <code>UInt64Array</code> for non-nested types","","","","Bit packed encoding.  This can only be used if the data …","","","Represents a valid brotli compression level.","","Encoding for floating-point data. K byte-streams are …","A <code>CompressedDataPage</code> is compressed, encoded representation …","A <code>CompressedPage</code> is a compressed, encoded representation …","Defines the compression settings for writing a parquet …","A <code>FallibleStreamingIterator</code> that consumes <code>Page</code> and yields …","A <code>DataPage</code>","","Delta encoding for integers. This can be used for int …","Incremental-encoded byte array. Prefix lengths are encoded …","Encoding for byte arrays to separate the length values and …","A descriptor of a parquet column. It contains the …","A <code>DictPage</code>","","","<code>DynIter</code> is an implementation of a single-threaded, …","Dynamically-typed <code>FallibleStreamingIterator</code>.","","The error type of iteration.","A fallible, streaming iterator.","Common type information.","Metadata for a Parquet file.","Sink that writes array <code>chunks</code> as a Parquet file.","An interface to write a parquet to a <code>Write</code>","","","","","Represents a valid gzip compression level.","","","","The type being iterated over.","Wrapper struct to store key values","a list","a list","","","","Descriptor of nested information of a field","A <code>Page</code> is an uncompressed, encoded representation of a …","The set of all physical types representable in Parquet","Representation of a Parquet type describing primitive and …","Default encoding. BOOLEAN - 1 bit per value. 0 is false; 1 …","Deprecated: Dictionary encoding. The values in the …","a primitive (leaf or parquet column) bitmap, _, length","","Group packed run length encoding. Usable for …","Dictionary encoding: the ids are encoded using the RLE …","","An iterator adapter that converts an iterator over <code>Chunk</code> …","A schema descriptor. This encapsulates the top-level …","","a struct","Description for file metadata","","","","The parquet version to use","Currently supported options to write to parquet","","Represents a valid zstd compression level.","","","","","","","","","","","","","","","","","Advances the iterator to the next position.","","","Determines if all elements of the iterator satisfy a …","Determines if any elements of the iterator satisfy a …","Returns a vector of iterators of <code>Page</code>, one per leaf column …","Converts an <code>Array</code> to a <code>CompressedPage</code> based on options, …","Converts an <code>Array</code> to a <code>CompressedPage</code> based on options, …","Returns an iterator of <code>Page</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Borrows an iterator, rather than consuming it.","Checks whether the <code>data_type</code> can be encoded as <code>encoding</code>. …","Checks if <code>sub_type</code> schema is part of current schema. This …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns column order for <code>i</code>th column in this file. If …","Sort order used for the min_value and max_value fields in …","Column (sort) order used for <code>min</code> and <code>max</code> values of each …","The <code>ColumnDescriptor</code> (leafs) of this schema.","Compresses an [<code>EncodedPage</code>] into a <code>CompressedPage</code> using …","","The compression of the data in this page. Note that what …","The compression to apply to every page","Returns the compression level.","Returns the compression level.","Returns the compression level.","Returns the number of remaining elements in the iterator.","String for application that wrote this file.  This should …","String message for application that wrote this file.","The size to flush a page, defaults to 1024 * 1024 if None","","","","Encryption algorithm. This field is set only in encrypted …","Writes the footer of the parquet file. Returns the total …","","","","","","","","","","","","","","","","","","","","","","","","","","","","The schemas’ fields.","Returns an iterator which filters elements by a predicate.","Returns the first element of the iterator which satisfies …","","","","","","","","","","","","","","","","","","","","Retrieval metadata of key used for signing the footer. …","Calls a closure on each element of an iterator.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Helper method to create a <code>ParquetType::PrimitiveType</code> …","Returns an iterator which is well-behaved at the beginning …","Returns the current element.","","","Returns <code>FieldInfo</code> information about the type.","Get the length of <code>Array</code> that should be sliced.","","","","","","","","","","","","","the optional id, to select fields by id","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Deconstructs itself into its iterator and scratch buffer.","Consumes this writer and returns the inner writer","Returns the underlying writer and <code>ThriftFileMetaData</code>","","","Serializes itself to thrift’s …","","","returns the metadata","Optional key/value metadata *","key_value_metadata of this file.","Returns the length (number of rows) of the element","Returns an iterator which applies a transform to elements.","Returns an iterator that applies a transform to errors.","Returns an iterator which applies a transform to elements.","The maximum definition level","The maximum repetition level","Key-value metadata that will be written to the file on …","","","","","","","","","","","","","","The schemas’ name.","Returns this type’s field name.","The field name","Creates a new <code>Compressor</code>","Returns a new <code>DynIter</code>, boxing the incoming iterator","Returns a new <code>DynStreamingIterator</code>, boxing the incoming …","","","Creates new schema descriptor from Parquet schema.","Returns a new <code>CompressedDataPage</code>.","Creates a new <code>Compressor</code> (same as <code>new</code>)","Advances the iterator, returning the next element.","","","Returns the <code>nth</code> element of the iterator.","Number of rows in this file *","number of rows in the file.","","The options assigned to the file","The write options for the file.","The <code>SchemaDescriptor</code> assigned to this file","Returns the <code>SchemaDescriptor</code> of the <code>RowGroupIterator</code>.","The Parquet <code>SchemaDescriptor</code> for the file.","","","","","","Returns the position of the first element matching a …","The <code>PrimitiveType</code> of this column","","","","","The repetition","Maps a <code>Chunk</code> and parquet-specific options to an …","Row groups in this file *","The row groups of this file","Returns the <code>SchemaDescriptor</code> that describes schema of this …","The <code>Schema</code> assigned to this file","The Arrow <code>Schema</code> for the file.","Parquet schema for this file.  This schema contains …","schema descriptor.","the rows to be selected by this page. When <code>None</code>, all rows …","Returns bounds on the number of remaining elements in the …","","","Returns an iterator which skips the first <code>n</code> elements.","Returns an iterator which skips the first sequence of …","returns offset and length to slice the leaf values","Slices the <code>Array</code> to <code>Box&lt;dyn Array&gt;</code> and <code>Vec&lt;Nested&gt;</code>.","","Decodes the raw statistics into a statistics","","","","","Returns an iterator which only returns the first <code>n</code> …","Returns an iterator which only returns the first sequence …","Convert <code>Array</code> to <code>Vec&lt;&amp;dyn Array&gt;</code> leaves in DFS order.","Constructs the necessary <code>Vec&lt;Vec&lt;Nested&gt;&gt;</code> to write the rep …","","","","","","","","","","","","","","","","","Convert <code>ParquetType</code> to <code>Vec&lt;ParquetPrimitiveType&gt;</code> leaves in …","Creates a parquet <code>SchemaDescriptor</code> from a <code>Schema</code>.","Creates a <code>ParquetType</code> from a <code>Field</code>.","Transverses the <code>data_type</code> up to its (parquet) columns and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a schema from","Error","Deserializes <code>crate::thrift_format::FileMetaData</code> into this …","Method to convert from Thrift.","","","","","","","","","","","","","","","","","","","","","","","","","","Attempts to create a brotli compression level.","Attempts to create a gzip compression level.","Attempts to create a zstd compression level from a given …","Returns a new <code>FileWriter</code>.","Creates a new <code>RowGroupIterator</code> from an iterator over <code>Chunk</code>.","Create a new sink that writes arrays to the provided <code>writer</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","Version of this file *","version of this file.","The page and file version to use","Writes a row group to the file.","writes the def levels to a <code>Vec&lt;u8&gt;</code> and returns it.","Writes a parquet file containing only the header and footer","Write <code>repetition_levels</code> and <code>definition_levels</code> to buffer.","Whether to write statistics","","","","","","","","","Returns a visual representation of <code>Chunk</code>","Memory maps dictionaries from an IPC file into","Memory maps an record batch from an IPC file into a <code>Chunk</code>.","Whether it is <code>i32</code> (false) or <code>i64</code> (true).","Sealed trait describing the subset (<code>i32</code> and <code>i64</code>) of <code>Index</code> …","A wrapper type of <code>Vec&lt;O&gt;</code> representing the invariants of …","A wrapper type of <code>Buffer&lt;O&gt;</code> that is guaranteed to:","","","Returns the byte slice stored in this buffer","Returns the byte slice stored in this buffer","","","","","Returns a reference to its internal <code>Buffer</code>.","Returns the capacity of <code>Offsets</code>.","","","","","","","","","","","Extends itself with <code>additional</code> elements equal to the last …","Returns the first offset.","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the inner <code>Vec</code>.","Returns the inner <code>Buffer</code>.","Copy-on-write API to convert <code>OffsetsBuffer</code> into <code>Offsets</code>.","Returns the last offset of this container.","Returns the last offset.","Returns the number of offsets in this container.","Returns the length of this container","Returns the length an array with these offsets would be.","Returns an iterator with the lengths of the offsets","Returns an empty <code>Offsets</code> (i.e. with a single element, the …","Returns an empty <code>OffsetsBuffer</code> (i.e. with a single …","Returns <code>Offsets</code> assuming that <code>offsets</code> fulfills its …","Safety","Returns an <code>Offsets</code> whose all lengths are zero.","Pops the last element","Returns the range of the offsets.","Reserves <code>additional</code> entries.","Shrinks the capacity of self to fit.","Slices this <code>OffsetsBuffer</code>.","Slices this <code>OffsetsBuffer</code> starting at <code>offset</code>.","Returns a range (start, end) corresponding to the position …","Returns a range (start, end) corresponding to the position …","Returns a range (start, end) corresponding to the position …","Returns a range (start, end) corresponding to the position …","","","Try extend from an iterator of lengths","Extends itself from another <code>Offsets</code>","Extends itself from another <code>Offsets</code> sliced by <code>start, length</code>","","","","","","","","Creates a new <code>Offsets</code> from an iterator of lengths","Try to create a new <code>Offsets</code> from a sequence of <code>lengths</code>","","","Pushes a new element with a given length.","Pushes a new element with a given length.","","","Returns a new <code>Offsets</code> with a capacity, allocating at least …","The <code>Scalar</code> implementation of binary (<code>Option&lt;Vec&lt;u8&gt;&gt;</code>).","The <code>Scalar</code> implementation of a boolean.","The <code>DictionaryArray</code> equivalent of <code>Array</code> for <code>Scalar</code>.","The <code>Scalar</code> implementation of fixed size binary ([…","The scalar equivalent of <code>FixedSizeListArray</code>. Like …","The scalar equivalent of <code>ListArray</code>. Like <code>ListArray</code>, this …","The representation of a single entry of a …","The implementation of <code>Scalar</code> for primitive, semantically …","Trait object declaring an optional value with a <code>DataType</code>. …","A single entry of a <code>crate::array::StructArray</code>.","A single entry of a <code>crate::array::UnionArray</code>.","The implementation of <code>Scalar</code> for utf8, semantically …","","","","","","","","","","","","convert itself to","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","the logical type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","whether it is valid","","","","","","","","","","","","returns a new <code>DictionaryScalar</code>","Returns a new <code>PrimitiveScalar</code>.","Returns a new <code>Utf8Scalar</code>","Returns a new <code>BinaryScalar</code>.","Returns a new <code>BooleanScalar</code>","returns a new <code>ListScalar</code>","A new <code>NullScalar</code>","Returns a new <code>StructScalar</code>","returns a new <code>FixedSizeListScalar</code>","Returns a new <code>FixedSizeBinaryScalar</code>.","Returns a new <code>UnionScalar</code>","creates a new <code>Scalar</code> from an <code>Array</code>.","Returns a new <code>PrimitiveScalar</code> with the same value but …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the type of the union scalar","","","","","","","","","","","","The values of the <code>DictionaryScalar</code>","Returns the optional value.","Returns the value irrespectively of the validity.","Its value","The value","Its value","Returns the inner value","The values of the <code>ListScalar</code>","Returns the values irrespectively of the validity.","The values of the <code>FixedSizeListScalar</code>","Number of days between 0001-01-01 and 1970-01-01","Number of microseconds in a second","Number of milliseconds in a second","Number of milliseconds in a day","Number of nanoseconds in a second","Number of seconds in a day","Adds an <code>interval</code> to a <code>timestamp</code> in <code>time_unit</code> units and …","Adds an <code>interval</code> to a <code>timestamp</code> in <code>time_unit</code> units without …","converts a <code>i32</code> representing a <code>date32</code> to <code>NaiveDate</code>","converts a <code>i32</code> representing a <code>date32</code> to <code>NaiveDateTime</code>","converts a <code>i64</code> representing a <code>date64</code> to <code>NaiveDate</code>","converts a <code>i64</code> representing a <code>date64</code> to <code>NaiveDateTime</code>","Parses an offset of the form <code>&quot;+WX:YZ&quot;</code> or <code>&quot;UTC&quot;</code> into …","Parses <code>value</code> to a <code>chrono_tz::Tz</code> with the Arrow’s …","converts a <code>i32</code> representing a <code>time32(ms)</code> to <code>NaiveTime</code>","converts a <code>i32</code> representing a <code>time32(s)</code> to <code>NaiveDateTime</code>","converts a <code>i64</code> representing a <code>time64(ns)</code> to <code>NaiveDateTime</code>","converts a <code>i64</code> representing a <code>time64(us)</code> to <code>NaiveDateTime</code>","converts a <code>i64</code> representing a <code>timestamp(ms)</code> to …","converts a <code>i64</code> representing a <code>timestamp(ns)</code> to …","converts a <code>i64</code> representing a <code>timestamp(s)</code> to <code>NaiveDateTime</code>","Converts a timestamp in <code>time_unit</code> and <code>timezone</code> into …","Converts a timestamp in <code>time_unit</code> and <code>timezone</code> into …","converts a <code>i64</code> representing a <code>timestamp(us)</code> to …","Calculates the scale factor between two TimeUnits. The …","Parses a <code>Utf8Array</code> to naive timestamp, i.e. …","Parses <code>value</code> to <code>Option&lt;i64&gt;</code> consistent with the Arrow’s …","Parses a <code>Utf8Array</code> to a timeozone-aware timestamp, i.e. …","Parses <code>value</code> to <code>Option&lt;i64&gt;</code> consistent with the Arrow’s …","An iterator of known, fixed size. A trait denoting Rusts’…","A chunk of bits. This is used to create masks of a given …","An [<code>Iterator&lt;Item=bool&gt;</code>] over a <code>BitChunk</code>. This iterator is …","An [<code>Iterator&lt;Item=usize&gt;</code>] over a <code>BitChunk</code> returning the …","Type denoting its representation as bytes. This is <code>[u8; N]</code> …","Two i32 representing days and ms","The difference between 1.0 and the next largest …","A 16-bit floating point number.","A 32-bit floating point number.","A 64-bit floating point number.","Whether it is <code>i32</code> (false) or <code>i64</code> (true).","Sealed trait describing the subset of <code>NativeType</code> (<code>i32</code>, <code>i64</code>…","Range of <code>Index</code>, equivalent to <code>(a..b)</code>. <code>Step</code> is unstable in …","A signed 128-bit integer.","A signed 16-bit integer.","A signed 256-bit integer.","A signed 32-bit integer.","A signed 64-bit integer.","A signed 8-bit integer.","months_days_ns(i32, i32, i64)","Sealed trait implemented by all physical types that can be …","Sealed trait describing the subset (<code>i32</code> and <code>i64</code>) of <code>Index</code> …","The corresponding variant of <code>PrimitiveType</code>.","The set of all implementations of the sealed trait …","An unsigned 16-bit integer.","An unsigned 32-bit integer.","An unsigned 64-bit integer.","An unsigned 8-bit integer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The number of days","The number of days","The in-memory representation of the DayMillisecond variant …","","","","","","","","","","","","","","Type representation of the Float16 physical type","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert itself from <code>usize</code>.","From bytes in big endian","","","","","Casts from u16.","Casts an <code>f32</code> into <code>f16</code>","From bytes in little endian","","","","","convert itself from bytes.","Convert itself from <code>usize</code>.","Returns a new <code>i256</code> from two <code>i128</code>.","","","","","Physical representation of a decimal","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","The number of milliseconds","The number of months","The in-memory representation of the MonthDayNano variant …","","","","","","","","","","","","","","","","","Creates a new <code>BitChunkIter</code> with <code>len</code> bits.","Creates a new <code>BitChunkOnes</code> with <code>len</code> bits.","Returns a new <code>IndexRange</code>.","A new <code>days_ms</code>.","A new <code>months_days_ns</code>.","","","","The number of nanoseconds","","An iterator from (inclusive) <code>start</code> to (exclusive) <code>end</code>.","An iterator from (inclusive) <code>start</code> to (exclusive) <code>end</code>.","Contains traits and implementations of multi-data used in …","","","","To bytes in big endian","","","","","Casts to u16.","Casts this <code>f16</code> to <code>f32</code>","To bytes in little endian","","","","","convert itself into bytes.","","","","","","","","","","Convert itself to <code>usize</code>.","","","","","","","","","","","","","","","","","","","","","","","","","The type holding bits for masks.","Describes the ability to convert itself from a <code>BitChunk</code>.","Number of lanes","Type used for masking.","The <code>NativeType</code> of this struct. E.g. <code>f32</code> for a …","A struct that lends itself well to be compiled leveraging …","Trait implemented by some <code>NativeType</code> that have a SIMD …","The SIMD type associated with this trait. This type …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a tuple of 3 items whose middle item is itself, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Multi-Data correspondence of the native type","","","","","","","","","","","","","","","","Multi-Data correspondence of the native type","Multi-Data correspondence of the native type","Multi-Data correspondence of the native type","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert itself from a slice.","Convert itself from a slice.","","","","","","","","","","","","","","","","creates a new Self from <code>v</code> by populating items from <code>v</code> up to …","","","","","","","","","","","","","","","","Multi-Data correspondence of the native type","Multi-Data correspondence of the native type","Multi-Data correspondence of the native type","Multi-Data correspondence of the native type","Multi-Data correspondence of the native type","Multi-Data correspondence of the native type","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Multi-Data correspondence of the native type","","","","","","","","","","","","","","","","","","","","","","","Sets values to <code>default</code> based on <code>mask</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Multi-Data correspondence of the native type","Multi-Data correspondence of the native type","Multi-Data correspondence of the native type","Multi-Data correspondence of the native type","Converts numeric type to a <code>String</code>","Converts numeric type to a <code>String</code>","Converts numeric type to a <code>String</code>"],"i":[0,0,3,3,3,17,3,3,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,17,3,17,0,3,0,3,17,3,3,17,3,3,0,3,3,0,17,3,17,3,17,3,3,3,3,3,3,3,17,3,17,0,3,3,3,17,17,3,3,3,3,3,0,3,3,3,3,3,3,3,17,3,3,3,3,17,17,17,17,17,17,17,3,17,17,3,3,17,17,3,3,3,3,17,17,17,17,17,0,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,3,3,3,3,3,3,3,17,3,3,3,0,3,3,3,3,3,3,3,3,3,3,3,3,17,3,3,3,3,3,3,3,0,3,3,3,0,3,17,3,0,3,17,3,17,3,3,17,0,3,3,0,17,17,17,0,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,79,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,90,76,91,75,80,94,81,95,82,96,83,84,85,73,67,86,87,71,98,72,105,67,67,67,79,79,67,71,72,73,75,76,75,80,81,82,83,84,85,67,86,87,72,77,92,89,90,76,91,75,93,80,94,81,95,82,96,83,84,85,73,67,97,86,87,71,98,72,77,76,75,80,81,82,83,84,85,67,86,87,72,92,89,90,91,93,94,95,96,73,97,71,98,92,89,90,91,93,94,95,96,73,97,71,98,92,89,90,91,93,94,95,96,73,97,71,98,77,79,79,89,90,76,91,75,93,80,94,81,95,82,96,83,84,85,73,67,97,86,87,71,98,72,105,89,90,76,91,75,93,80,94,81,95,82,96,83,84,85,73,67,97,86,87,71,98,72,105,76,75,80,81,82,83,84,85,67,86,87,72,89,94,73,71,98,67,67,67,67,67,67,67,67,67,67,67,67,67,67,0,89,90,76,91,75,80,94,81,95,82,96,83,84,85,73,67,86,87,71,98,72,105,89,90,76,91,75,80,94,81,95,82,96,83,84,85,73,67,86,87,71,98,72,105,77,92,89,90,76,76,91,75,75,93,80,80,94,81,95,82,96,83,84,85,73,67,67,97,86,87,71,98,72,72,89,90,91,93,96,73,67,71,98,72,89,76,98,72,82,83,67,67,67,77,77,77,77,90,76,76,91,75,75,80,80,94,81,81,82,82,83,83,84,84,85,85,73,67,67,86,86,87,87,71,72,72,0,89,90,91,73,71,98,73,73,89,90,91,73,71,98,89,90,91,73,71,98,90,91,73,71,90,91,73,71,90,71,84,86,87,77,89,90,76,91,75,93,80,94,81,95,82,96,83,84,85,73,67,97,86,87,71,98,72,105,89,90,90,90,76,76,76,76,76,91,91,75,75,75,75,93,93,93,80,80,80,94,94,81,81,81,81,95,82,82,82,96,83,83,83,84,84,85,85,73,73,73,67,67,67,67,97,86,86,86,87,87,71,71,71,98,72,72,72,72,72,105,89,90,76,91,75,81,73,67,71,98,72,90,76,71,72,76,91,75,81,73,67,72,89,90,76,91,75,73,67,71,98,72,89,90,76,91,75,73,67,71,98,72,90,76,91,75,73,67,71,72,90,91,75,73,67,71,67,73,67,76,75,81,82,67,72,83,83,0,86,87,67,0,0,87,87,89,90,76,91,75,93,80,94,81,95,82,96,83,84,85,73,67,97,86,87,71,98,72,105,90,91,93,96,73,97,71,93,96,86,71,89,75,73,67,97,98,89,76,91,75,75,80,94,81,82,83,84,67,67,86,87,71,98,72,105,76,75,67,72,77,92,77,80,87,77,92,89,90,76,91,75,80,94,81,82,83,84,73,67,86,87,71,98,72,80,94,80,93,80,80,80,77,92,89,89,90,76,76,91,75,75,93,80,80,94,94,81,81,95,95,82,82,96,96,83,83,84,84,85,73,67,67,97,86,87,87,71,71,98,98,72,72,93,67,67,67,105,105,105,105,105,105,105,105,105,105,105,105,105,95,96,97,89,90,76,91,75,93,94,81,95,82,96,83,84,85,73,67,97,86,87,71,98,72,105,76,75,80,81,82,83,84,85,67,86,87,72,0,95,96,76,75,80,81,82,83,84,85,67,86,87,72,0,71,98,72,96,95,96,105,105,105,77,452,89,90,76,76,96,83,84,87,71,98,72,72,0,67,67,67,67,67,67,89,90,91,94,73,71,98,89,90,91,94,73,97,71,98,92,89,90,91,93,93,94,95,96,73,97,71,98,67,67,92,89,89,90,90,91,91,93,93,94,94,95,95,96,96,73,73,97,97,71,71,98,98,67,67,67,67,67,67,67,67,67,91,73,73,76,75,80,81,82,83,84,73,67,86,71,72,75,73,67,92,89,89,90,90,91,91,93,93,94,94,95,95,96,96,73,73,97,97,71,71,98,98,94,81,95,82,105,77,76,76,75,75,80,80,81,81,82,82,83,83,84,84,85,85,67,67,86,86,87,87,72,72,77,76,76,75,75,80,80,81,81,82,82,83,83,84,84,85,85,67,67,86,86,87,87,72,72,77,76,75,80,81,82,83,84,85,67,86,87,72,77,76,75,80,81,82,83,84,85,67,86,87,72,67,67,67,81,73,67,77,76,75,80,81,82,83,84,85,67,86,87,72,89,90,76,91,75,80,94,81,95,82,96,83,84,85,73,67,86,87,71,98,72,105,152,89,90,91,93,95,96,73,71,98,153,89,90,91,94,95,96,73,71,98,89,90,76,91,75,93,80,94,81,95,82,96,83,84,85,73,67,97,86,87,71,98,72,105,89,94,81,98,80,90,76,91,75,73,71,72,90,76,91,75,73,71,72,83,89,90,76,91,75,93,80,94,81,95,82,96,83,84,85,73,67,97,86,87,71,98,72,105,89,90,76,91,75,80,94,81,82,83,84,85,73,67,97,86,87,71,98,72,80,72,154,89,90,91,93,94,95,96,73,71,98,95,96,89,90,76,91,75,93,80,94,81,95,82,96,83,84,85,73,67,97,86,87,71,98,72,105,87,77,92,89,90,76,76,91,75,75,93,80,80,94,81,81,95,82,82,96,83,83,84,85,73,67,67,97,86,86,87,71,98,72,72,89,76,75,80,94,81,82,83,84,67,97,87,71,98,72,89,76,75,94,81,82,83,84,67,87,71,98,72,452,89,90,76,76,91,75,93,80,94,81,95,82,96,83,73,67,97,86,71,98,72,72,90,76,91,75,80,81,82,83,84,73,67,86,71,72,80,94,73,89,90,71,98,89,90,91,94,96,73,71,98,73,77,76,76,75,75,80,80,81,81,82,82,83,83,84,84,85,67,67,86,86,87,72,72,75,67,67,67,67,0,0,0,0,0,0,0,0,0,0,0,0,0,111,122,112,115,119,120,117,118,121,116,123,114,158,158,111,122,112,115,119,120,117,118,121,116,123,114,111,122,112,115,119,120,117,118,121,116,123,114,111,122,112,115,119,120,117,118,121,116,123,114,119,158,111,122,112,115,119,120,117,118,121,116,123,114,158,111,122,112,115,119,120,117,118,121,116,123,114,111,122,112,115,119,120,117,118,121,116,123,114,111,122,112,115,119,120,117,118,121,116,123,114,158,111,122,112,115,119,120,117,118,121,116,123,114,0,111,122,112,115,119,120,117,118,121,116,123,114,111,122,112,115,119,120,117,118,121,116,123,114,111,122,112,115,119,120,117,118,121,116,123,114,111,122,112,115,119,120,117,118,121,116,123,114,0,0,0,0,0,0,0,0,138,164,142,0,138,142,0,0,138,142,142,138,142,142,138,142,142,138,164,142,138,164,142,142,0,138,142,138,164,142,138,164,142,138,142,138,142,142,142,142,142,142,138,164,142,138,138,138,164,142,142,0,138,142,142,142,138,142,138,142,138,138,142,138,142,138,138,138,164,142,138,138,164,142,138,138,142,138,142,138,142,138,138,164,142,138,164,164,138,142,164,138,142,138,0,142,142,142,0,142,142,142,142,164,138,138,138,138,0,138,164,142,138,164,142,138,142,138,142,138,164,142,138,142,138,164,142,0,0,138,142,0,142,0,0,0,0,0,0,0,126,126,0,0,0,125,165,166,126,167,163,168,125,165,166,126,167,163,168,125,165,166,126,0,125,165,166,126,125,165,166,126,0,0,167,163,168,125,165,166,126,167,163,168,125,165,166,126,162,0,0,167,163,168,125,165,166,126,167,163,168,125,165,166,126,167,0,167,163,167,167,167,167,167,167,167,167,167,167,167,167,167,163,163,163,163,163,163,163,163,163,163,163,163,163,165,167,163,168,125,165,166,126,126,167,163,168,125,165,166,126,125,166,126,125,166,126,453,167,167,163,163,168,453,453,453,167,163,163,168,0,0,0,167,163,168,125,166,126,165,162,125,165,166,126,167,163,168,125,165,166,126,167,163,168,125,165,166,126,167,163,168,125,165,166,126,126,126,0,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,0,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,454,454,0,0,0,0,0,0,0,0,0,454,454,0,0,0,0,0,454,454,0,0,454,454,455,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,456,0,0,0,0,0,0,0,0,457,458,459,460,461,0,0,462,0,0,463,0,0,464,465,466,0,467,468,469,470,0,471,0,0,472,473,474,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,186,0,0,0,0,0,0,0,0,0,186,186,0,0,186,186,0,0,0,0,0,0,186,0,0,0,0,0,0,186,186,0,186,0,0,186,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,186,186,186,186,0,0,0,0,0,0,0,0,0,186,0,0,190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,475,0,0,0,0,0,476,476,0,477,0,477,0,0,0,477,0,477,0,0,0,475,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,193,193,0,0,193,193,193,0,0,193,193,0,0,193,193,193,193,0,0,0,0,0,0,0,0,0,0,195,192,195,192,195,192,0,195,192,195,192,192,192,192,192,195,192,195,192,195,192,0,0,0,192,195,0,0,0,195,192,195,192,195,192,195,192,195,0,0,0,0,0,198,197,197,199,198,200,201,197,199,198,200,201,197,198,197,198,197,197,199,197,197,198,197,198,197,199,198,200,201,197,199,198,200,201,197,197,199,198,200,201,197,200,201,200,200,201,199,198,198,201,201,197,200,200,201,198,197,199,198,200,201,197,199,198,200,201,197,199,198,200,201,197,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,203,106,203,106,0,106,106,207,106,106,206,203,106,106,106,0,203,106,203,106,106,106,106,204,106,204,106,204,106,204,106,0,106,0,203,106,203,106,203,106,203,106,203,106,0,189,189,207,189,203,106,0,203,0,0,0,189,206,203,106,106,106,0,106,204,106,204,106,204,106,204,106,203,106,0,203,106,207,124,203,204,205,106,206,189,207,124,203,204,205,106,206,189,207,124,203,204,205,106,206,189,207,124,203,204,205,106,206,189,207,124,203,204,205,106,206,189,207,124,124,205,124,203,204,205,106,206,189,207,203,124,203,204,205,106,206,189,207,205,205,124,203,204,205,106,206,189,207,124,203,204,205,205,106,106,106,206,189,207,0,124,203,204,106,206,189,207,124,203,204,205,106,206,189,207,206,124,206,124,205,124,124,206,106,124,203,204,205,106,206,189,207,106,124,203,204,205,106,206,189,207,124,203,204,205,106,206,189,207,124,203,204,205,106,206,189,207,124,205,0,133,133,133,133,133,133,133,0,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,0,0,0,0,230,227,228,229,230,227,228,229,227,228,229,227,228,229,0,0,0,230,227,228,229,230,227,228,229,0,0,230,227,228,229,0,230,230,227,228,229,230,227,228,229,230,230,227,228,229,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,233,233,0,233,0,233,233,233,233,233,233,233,233,0,0,0,0,0,0,0,0,0,0,0,237,237,238,237,238,239,237,238,239,238,239,239,237,237,237,238,237,238,238,237,239,0,0,238,237,237,237,237,237,237,238,237,238,237,238,239,237,237,237,237,238,239,237,238,239,238,239,237,239,239,238,239,239,237,0,0,237,238,239,239,239,239,237,239,239,237,237,237,237,238,237,239,237,238,238,237,239,239,0,239,239,239,239,239,237,238,237,237,238,237,237,238,239,237,238,239,237,238,239,237,0,0,0,0,256,256,257,256,217,260,257,256,217,260,257,257,260,260,256,256,256,257,257,257,217,256,257,257,256,0,0,257,257,256,256,256,256,256,256,257,256,257,256,217,217,260,257,256,256,256,256,217,217,260,257,256,260,256,260,260,260,257,260,256,0,0,256,217,260,257,260,260,256,217,260,260,256,217,256,217,256,256,257,256,217,260,217,256,257,257,256,260,260,0,260,260,260,260,260,260,256,217,257,256,217,256,257,256,256,217,260,257,256,217,260,257,256,217,260,257,256,0,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,0,274,0,274,274,274,274,274,274,274,0,0,0,279,0,0,0,0,0,0,0,0,0,0,0,281,277,0,281,277,281,277,281,277,281,277,281,281,281,277,281,277,281,277,281,277,281,277,277,0,281,277,281,277,281,277,281,277,0,0,210,0,0,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,0,286,0,0,0,210,210,286,282,283,282,284,286,285,210,282,283,284,286,285,210,282,283,282,283,282,283,0,0,210,282,283,284,286,285,210,282,283,284,284,286,285,210,282,283,284,284,285,282,283,285,284,285,284,285,284,285,0,0,0,0,284,285,282,283,284,282,0,282,283,284,286,285,210,282,283,284,286,285,210,282,283,284,286,285,210,282,283,286,283,478,479,479,478,480,480,481,482,478,478,0,287,287,287,287,287,287,287,0,287,287,287,287,287,0,288,288,288,288,288,288,288,0,288,288,288,288,0,0,289,0,0,0,289,289,290,291,292,289,290,291,292,289,290,289,290,289,290,290,279,0,289,290,289,290,0,291,292,289,290,291,292,289,290,290,290,290,292,289,291,292,289,290,291,292,291,292,0,292,291,292,0,289,290,291,292,289,290,292,291,292,289,290,292,291,292,289,290,0,291,292,0,294,294,294,294,294,294,294,294,294,294,294,294,0,0,279,295,279,295,279,279,279,279,279,279,279,279,295,279,279,295,279,295,295,295,295,295,279,295,279,295,279,295,279,0,0,0,0,0,0,0,0,0,0,299,0,0,0,299,0,0,0,0,0,0,0,0,0,310,299,297,298,300,301,302,303,304,305,306,307,308,309,310,311,297,298,302,303,304,299,299,297,298,300,301,302,303,304,305,306,307,308,309,310,297,298,300,301,302,303,304,305,306,307,308,309,310,299,310,310,0,299,0,299,299,310,299,297,298,300,301,302,303,304,305,306,307,308,309,310,299,299,297,298,300,301,302,303,304,305,306,307,308,309,310,297,298,300,301,302,303,304,305,306,307,308,309,310,299,299,299,309,310,299,301,304,311,304,299,299,299,297,298,300,301,302,303,304,305,306,307,308,299,299,299,299,310,297,298,300,301,302,303,304,305,306,307,308,309,310,297,298,300,301,302,303,304,305,306,307,308,309,310,297,298,300,301,302,303,304,305,306,307,308,309,310,0,0,0,0,0,0,0,0,0,312,314,318,314,315,316,317,318,319,320,312,314,315,316,317,318,319,320,312,316,312,312,312,319,312,320,312,314,315,316,317,318,319,320,312,314,316,316,315,314,315,316,317,318,319,320,312,314,315,316,317,318,319,320,312,317,320,317,314,315,316,317,318,319,320,312,317,318,315,316,316,318,316,312,0,314,314,315,316,317,318,319,320,312,312,314,315,316,317,318,319,320,312,314,315,316,317,318,319,320,312,314,315,316,317,318,319,320,312,312,312,0,0,0,0,0,0,0,0,299,0,0,299,299,323,299,299,323,323,299,299,0,0,299,299,299,323,299,299,323,0,0,323,323,299,299,299,323,299,299,299,299,299,299,299,299,323,323,323,299,0,0,299,0,324,299,324,299,299,325,324,325,324,299,324,324,299,299,299,324,299,325,324,299,299,324,325,324,325,325,299,299,299,325,324,299,325,299,299,299,299,299,299,299,324,325,324,325,324,325,324,0,0,0,0,0,0,0,332,332,0,332,0,332,0,332,332,332,332,332,0,0,0,0,0,0,0,0,377,347,349,377,0,0,0,358,0,347,349,347,349,0,358,377,347,349,299,483,0,223,223,0,0,337,377,377,0,369,0,349,377,349,377,349,349,377,347,349,223,299,483,347,349,348,350,348,346,346,0,346,0,0,223,0,0,0,0,0,0,0,0,350,0,0,369,0,0,0,0,337,0,347,350,0,347,349,349,347,349,349,349,349,349,349,347,349,347,345,345,223,223,342,343,344,345,346,347,348,349,350,0,0,0,299,483,339,340,341,299,299,343,339,340,366,223,342,343,344,345,346,347,348,337,341,349,371,373,374,375,350,356,339,340,366,223,342,343,344,345,346,347,348,337,341,349,371,373,374,375,350,356,299,342,223,342,343,344,345,346,347,348,349,350,223,342,343,344,345,346,347,348,349,350,342,342,0,336,344,342,344,342,299,0,0,336,342,0,342,343,342,343,346,347,348,349,350,346,347,348,349,350,0,342,342,299,299,223,223,342,343,344,345,346,347,348,337,341,349,350,356,299,339,340,366,223,223,223,223,223,223,223,223,342,343,344,345,346,346,347,348,337,341,349,371,373,374,375,350,356,299,299,483,339,340,341,0,0,0,0,0,342,346,347,348,349,342,0,0,0,0,339,340,366,223,342,343,344,345,346,347,348,337,341,349,371,373,374,375,350,356,339,340,366,366,371,373,374,375,342,336,356,299,299,299,342,0,356,339,340,366,342,343,344,341,371,373,374,375,356,366,299,366,371,373,374,375,299,344,375,336,342,345,343,342,299,223,0,0,0,0,0,0,0,336,0,373,336,299,374,299,299,0,342,366,299,299,0,223,342,343,344,345,346,347,348,349,350,223,344,339,340,366,223,342,343,344,345,346,347,347,348,348,337,341,349,349,371,373,374,375,350,356,339,340,366,223,342,343,344,345,346,347,348,337,341,349,371,373,374,375,350,356,339,340,366,223,342,343,344,345,346,347,348,337,341,349,371,373,374,375,350,356,342,336,484,484,484,484,485,486,485,486,0,0,0,0,382,382,381,372,381,372,382,383,381,372,382,383,381,372,381,372,0,381,372,382,383,381,372,381,372,382,383,381,372,382,382,383,0,381,372,381,372,382,383,381,372,383,383,381,383,372,0,0,372,381,372,381,372,381,372,382,383,381,372,382,383,381,372,382,383,0,369,0,0,369,0,336,336,0,390,336,336,0,0,336,336,390,336,484,484,484,484,0,384,384,0,384,384,384,384,384,384,384,384,384,384,384,389,377,393,0,377,389,0,0,0,0,358,357,389,389,389,0,358,357,377,0,0,0,299,0,0,0,0,0,377,377,369,393,0,377,377,377,299,0,399,399,393,393,393,0,0,0,0,389,389,399,369,389,389,0,0,0,393,399,0,393,398,398,0,0,393,0,390,368,391,336,392,393,394,395,396,389,377,397,369,398,399,387,299,385,386,299,299,0,0,0,0,385,388,386,390,368,391,336,392,401,358,357,393,394,395,396,389,377,397,369,398,402,409,410,399,387,385,388,386,390,368,391,336,392,401,358,357,393,394,395,396,389,377,397,369,398,402,409,410,399,387,358,299,0,369,390,368,391,336,392,393,394,395,396,389,377,397,369,398,399,387,390,368,391,336,392,393,394,395,396,389,377,397,369,398,399,387,390,391,336,391,336,392,0,401,401,387,394,395,396,299,391,336,387,394,395,396,391,402,390,368,391,393,394,395,396,389,377,397,369,398,399,387,390,368,391,393,394,395,396,389,377,397,398,387,0,392,299,299,390,368,391,336,392,401,358,357,393,394,395,396,389,377,397,369,398,399,387,391,299,385,388,386,390,368,391,336,392,401,358,357,393,394,395,396,389,377,397,369,398,402,409,410,399,387,369,369,369,299,299,385,386,369,0,390,368,391,393,394,395,396,389,377,397,398,401,397,385,388,386,390,368,391,336,392,401,358,357,393,394,395,396,389,377,397,369,398,402,409,410,399,387,385,402,402,388,409,336,357,390,336,391,336,399,299,299,299,368,368,410,388,388,388,388,388,388,388,388,388,388,388,388,388,392,369,397,385,388,386,390,391,392,401,385,299,388,409,299,391,336,401,402,410,402,409,410,390,391,410,410,410,299,368,390,390,391,391,397,0,391,336,336,402,410,391,336,401,299,388,386,299,299,0,0,410,401,390,390,391,391,299,299,0,0,390,368,391,336,392,393,394,395,396,389,377,397,369,398,399,387,0,0,0,0,385,388,386,390,368,391,336,392,401,358,357,393,394,395,396,389,389,377,377,397,369,398,402,409,410,399,387,392,369,336,369,385,388,386,390,368,391,336,392,401,358,357,393,394,395,396,389,377,397,369,398,402,409,410,399,387,394,395,396,402,409,410,385,388,386,390,368,391,336,392,401,358,357,393,394,395,396,389,377,397,369,398,402,409,410,399,387,401,390,391,336,387,402,0,0,0,387,390,391,390,391,484,484,484,484,0,0,0,70,0,0,0,141,136,141,136,141,136,141,136,136,141,141,136,141,136,141,136,136,141,136,141,141,136,141,136,141,141,136,136,136,141,136,141,136,136,141,136,141,136,141,136,141,136,141,136,141,141,136,141,141,136,136,141,136,141,136,141,136,141,141,141,141,141,141,136,136,136,136,141,141,141,136,141,141,141,136,141,0,0,0,0,0,0,0,0,0,0,0,0,413,178,414,415,184,416,417,418,419,420,421,128,413,178,414,415,184,416,417,418,419,420,421,413,178,414,415,184,416,417,418,419,420,421,413,178,414,415,184,416,417,418,419,420,421,413,178,414,415,184,416,417,418,419,420,421,413,178,414,415,184,416,417,418,419,420,421,128,413,178,414,415,184,416,417,418,419,420,421,417,128,413,178,414,415,184,416,417,418,419,420,421,178,414,415,184,417,420,413,178,414,415,184,416,417,418,419,420,421,413,178,178,414,414,415,415,184,184,416,417,418,419,420,421,413,178,414,415,184,416,417,418,419,420,421,128,413,178,414,415,184,416,417,418,419,420,421,413,178,414,415,184,416,417,418,419,420,421,0,178,413,178,414,415,184,416,417,418,419,420,421,413,178,414,415,184,416,417,418,419,420,421,413,178,414,415,184,416,417,418,419,420,421,421,413,178,414,415,184,416,417,418,419,420,421,413,178,414,415,184,420,421,416,418,419,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,208,430,208,208,208,70,0,0,208,208,208,208,208,208,208,0,0,69,0,208,208,208,208,429,187,430,431,208,169,433,434,429,187,430,431,208,169,433,434,429,187,430,431,208,429,187,430,431,208,429,187,430,431,208,431,429,187,0,429,187,430,431,429,187,430,431,208,429,187,431,208,0,429,429,187,187,430,430,431,431,208,169,433,434,429,187,430,431,208,196,69,429,187,430,431,430,430,69,429,187,430,431,162,196,431,429,187,431,208,0,169,433,434,429,187,430,431,208,169,433,434,429,187,430,431,429,187,0,434,434,434,434,434,434,434,434,434,434,434,434,434,429,187,431,169,433,434,429,187,169,433,434,187,431,196,196,0,169,433,434,69,429,187,430,431,430,430,69,429,187,430,431,162,429,187,430,431,208,429,187,430,431,196,169,433,434,429,187,430,431,208,169,433,434,429,187,430,431,208,169,433,434,429,187,430,431,208,487,0,487,487,487,0,0,171,435,436,437,438,439,440,441,442,443,444,446,447,448,445,449,435,436,437,438,439,440,441,442,443,444,445,435,436,437,438,439,440,441,442,443,444,445,487,435,436,437,438,439,440,441,442,443,444,446,447,448,445,449,435,436,437,438,439,440,441,442,443,444,446,447,448,445,449,435,436,437,438,439,440,441,442,443,444,446,447,448,445,449,435,436,437,438,439,440,441,442,443,444,446,447,448,445,449,435,436,437,438,439,440,441,442,443,444,446,447,448,445,449,0,435,436,437,438,439,440,441,442,443,444,446,447,448,445,449,0,0,0,435,436,437,438,439,440,441,442,443,444,446,447,448,445,449,488,487,435,436,437,438,439,440,441,442,443,444,446,447,448,445,449,487,435,436,437,438,439,440,441,442,443,444,446,447,448,445,449,0,0,0,0,0,0,435,436,437,438,439,440,441,442,443,444,446,447,448,445,449,435,436,437,438,439,440,441,442,443,444,446,447,448,445,449,435,436,437,438,439,440,441,442,443,444,446,447,448,445,449,435,436,437,438,439,440,441,442,443,444,445,435,436,437,438,439,440,441,442,443,444,445,435,436,437,438,439,440,441,442,443,444,445,435,436,437,438,439,440,441,442,443,444,445,0,435,436,437,438,439,440,441,442,443,444,445,435,436,437,438,439,440,441,442,443,444,445,487,435,436,437,438,439,440,441,442,443,444,446,447,448,445,449,435,436,437,438,439,440,441,442,443,444,445,435,436,437,438,439,440,441,442,443,444,446,447,448,445,449,435,436,437,438,439,440,441,442,443,444,446,447,448,445,449,435,436,437,438,439,440,441,442,443,444,446,447,448,445,449,435,436,437,438,439,440,441,442,443,444,446,447,448,445,449,0,0,0,0,0,0,0],"f":[0,0,0,0,[1],[1],[[[3,[2,2]],4],5],[[[3,[2,2]],4],5],0,[[[3,[6,6]]]],[[[3,[[6,[7]],[6,[7]]]]],7],[3,3],[[[3,[[6,[8]],[6,[8]]]]],8],[[[3,[[6,[9]],[6,[9]]]]],9],[[[3,[[6,[10]],[6,[10]]]]],10],[[[3,[6,6]]]],[[[11,[3]]],[[3,[11,11]]]],[[[11,[3]]],[[3,[11,11]]]],[[[3,[[12,[9]],[12,[9]]]]],9],[[[3,[[12,[7]],[12,[7]]]]],7],[[[3,[[12,[10]],[12,[10]]]]],10],[[[3,[12,12]]]],[3,3],[[[3,[[12,[8]],[12,[8]]]]],8],[[[3,[12,12]]]],[[],13],0,[[]],[[]],[[]],[[]],0,[[[3,[14,14]]],[[15,[14]]]],0,[[[3,[16,16]]],[[3,[16,16]]]],[[[17,[16,16,16]]],[[17,[16,16,16]]]],[[[3,[16,16]],3]],[[]],[[]],[[[3,[18,18]],3],19],[[[3,[2,2]]],20],0,[[[3,[21,21]],22]],[[[3,[2,2]]],22],0,[[],[[17,[23]]]],[[[3,[24,24]]]],[17],[[[3,[25,25]]]],[17],[[[3,[14,14]]],10],[[3,26,26]],[[[3,[27,27]]]],[[3,26,26]],[[],[[20,[28]]]],[[],[[20,[28]]]],[[[3,[[29,[[29,[[29,[29]]]]]],[29,[[29,[[29,[29]]]]]]]],3],5],[[[17,[[0,[30,31]],[29,[[29,[[29,[29]]]]]],32]],17],5],[[],5],[[],5],0,[[[3,[33]],10]],[[[3,[33]],10]],[[[3,[34,34]],35]],[[[17,[[0,[30,31,36]],36,32]],35]],[[[17,[[0,[30,31]],32]],35]],[[[3,[37,37]]],[[37,[3]]]],[3],[[[3,[15,15]]],[[15,[3]]]],[[[3,[37,37]]],[[37,[3]]]],[3],0,[[[3,[21,21]]],[[37,[38]]]],[[[3,[2,2]],4],15],[[[3,[2,2]],4],15],[3,3],[[[3,[39,39]]],[[37,[38]]]],[[[3,[40,40]],41],[[37,[42]]]],[[[3,[33,33]],41],[[37,[42]]]],[[[17,[33,33,32]],41],[[37,[42]]]],[[[3,[2,2]],4]],[[[3,[2,2]],4]],[37,3],[[]],[[]],[[[43,[23]]],[[17,[23]]]],[[],[[17,[[0,[30,31]],23]]]],[35,[[17,[[0,[30,31]],23]]]],[[[17,[[45,[[0,[31,30,44]]]],32]]],15],[[[17,[[45,[[0,[31,30,44]]]],32]]],15],[[[17,[[45,[[0,[31,30,44]]]],32]]],15],[[[3,[31,31]]]],[[[17,[[0,[30,31,[45,[[0,[30,31,44]]]]]],32]]]],[[[17,[[0,[31,30]],32]],[0,[31,30]]],15],[3,37],[[]],[[]],[[[17,[23]]],[[43,[23]]]],[[]],[3],[[]],[[[3,[35,35]]],3],[17],[17],[17],[[[17,[[0,[31,30]],32]]],[[46,[[0,[31,30]]]]]],[[[17,[[0,[31,30]],32]]],[[47,[[0,[31,30]]]]]],0,[3,5],[3,5],[[[3,[2,2]]],15],[3,15],[[3,26],3],[3],[[[3,[48]]],48],[[3,26]],[[[3,[49,49]]],22],[[3,26],3],[[3,26],3],[[3,26],3],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[17,[23]]]],[[[3,[2,2]]],15],[[[3,[50,50]]],15],[[[3,[2,2]],22],15],0,[[[3,[[51,[[51,[[51,[51]]]]]],[51,[[51,[[51,[51]]]]]]]],3],[[15,[19]]]],[[[3,[2,2]],4]],[[[11,[3]],52],53],[[[3,[2,2]],4],[[15,[22]]]],[54],[[[3,[55,55]]],[[37,[22,38]]]],[[[3,[55,55]]],[[37,[38]]]],[[[3,[21,21]],56],[[37,[22,38]]]],[[[3,[55,55]],57],[[37,[22,38]]]],[[[3,[55,55]],56],[[37,[22,38]]]],[[[3,[21,21]],58,57],[[37,[22,38]]]],[[],[[37,[59,38]]]],[[[17,[[45,[[0,[31,30,44]]]],32]]],15],[[[3,[50,50]],4],15],[[[3,[50,50]],4]],[3,15],[[3,26],3],[3],[[[3,[48]]],48],[[3,26]],0,[[[3,[60,60]],61],[[37,[62,38]]]],[[[3,[2,2]]]],[[[3,[14,14]]],[[15,[14]]]],0,[[]],[[]],[[],56],0,[[],37],[[],37],[[],37],[[],37],[[11,52],53],[[],63],[[],63],0,[[[3,[33]]]],[[[3,[33]]]],0,[22,[[17,[23]]]],[[22,32],[[17,[32]]]],[32,[[17,[32]]]],0,[[[3,[39,39]]],[[37,[22,38]]]],[[[3,[39,39]]],[[37,[38]]]],[[[3,[39,39]],64],[[37,[38]]]],[59,[[37,[22,38]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[[[67,[[0,[65,66]]]],67],[[67,[[0,[65,66]]]]]],[[[67,[68]],67],[[67,[68]]]],[[[67,[[0,[65,66]]]]],[[67,[[0,[65,66]]]]]],[[],5],[[],5],[[[67,[69]],26]],[[[71,[70]],26]],[[[72,[70]],26]],[[[73,[69]],74]],[[75,74]],[[[76,[70]]],[[78,[77]]]],[75,[[78,[77]]]],[[[80,[79]]],[[78,[77]]]],[81,[[78,[77]]]],[82,[[78,[77]]]],[[[83,[70]]],[[78,[77]]]],[84,[[78,[77]]]],[85,[[78,[77]]]],[[[67,[69]]],[[78,[77]]]],[86,[[78,[77]]]],[87,[[78,[77]]]],[[[72,[70]]],[[78,[77]]]],[[],88],[[],88],[[[89,[70]]],88],[[[90,[70]]],88],[[[76,[70]]],88],[91,88],[75,88],[[[93,[79,92]]],88],[[[80,[79]]],88],[94,88],[81,88],[[[95,[92]]],88],[82,88],[[[96,[70,92]]],88],[[[83,[70]]],88],[84,88],[85,88],[[[73,[69]]],88],[[[67,[69]]],88],[97,88],[86,88],[87,88],[[[71,[70]]],88],[[[98,[70]]],88],[[[72,[70]]],88],[[],88],[[[76,[70]]],88],[75,88],[[[80,[79]]],88],[81,88],[82,88],[[[83,[70]]],88],[84,88],[85,88],[[[67,[69]]],88],[86,88],[87,88],[[[72,[70]]],88],[[],[[78,[77]]]],[[[89,[70]]],[[78,[77]]]],[[[90,[70]]],[[78,[77]]]],[91,[[78,[77]]]],[[[93,[79,92]]],[[78,[77]]]],[94,[[78,[77]]]],[[[95,[92]]],[[78,[77]]]],[[[96,[70,92]]],[[78,[77]]]],[[[73,[69]]],[[78,[77]]]],[97,[[78,[77]]]],[[[71,[70]]],[[78,[77]]]],[[[98,[70]]],[[78,[77]]]],[[],[[99,[77]]]],[[[89,[70]]],[[99,[77]]]],[[[90,[70]]],[[99,[77]]]],[91,[[99,[77]]]],[[[93,[79,92]]],[[99,[77]]]],[94,[[99,[77]]]],[[[95,[92]]],[[99,[77]]]],[[[96,[70,92]]],[[99,[77]]]],[[[73,[69]]],[[99,[77]]]],[97,[[99,[77]]]],[[[71,[70]]],[[99,[77]]]],[[[98,[70]]],[[99,[77]]]],[[],88],[[[89,[70]]],88],[[[90,[70]]],88],[91,88],[[[93,[79,92]]],88],[94,88],[[[95,[92]]],88],[[[96,[70,92]]],88],[[[73,[69]]],88],[97,88],[[[71,[70]]],88],[[[98,[70]]],88],[77,77],[[],22],[[],22],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[76,[70]]],[[99,[77]]]],[75,[[99,[77]]]],[[[80,[79]]],[[99,[77]]]],[81,[[99,[77]]]],[82,[[99,[77]]]],[[[83,[70]]],[[99,[77]]]],[84,[[99,[77]]]],[85,[[99,[77]]]],[[[67,[69]]],[[99,[77]]]],[86,[[99,[77]]]],[87,[[99,[77]]]],[[[72,[70]]],[[99,[77]]]],[[[89,[70]]],22],[94,22],[[[73,[69]]],22],[[[71,[70]]],22],[[[98,[70]]],22],[[[67,[[0,[65,100]]]],67],[[67,[[0,[65,100]]]]]],[[[67,[[0,[65,100]]]]],[[67,[[0,[65,100]]]]]],[[[67,[68]],67],[[67,[68]]]],[[[67,[[0,[65,101]]]],67],[[67,[[0,[65,101]]]]]],[[[67,[68]],67],[[67,[68]]]],[[[67,[[0,[65,101]]]]],[[67,[[0,[65,101]]]]]],[[[67,[[0,[65,102]]]]],[[67,[[0,[65,102]]]]]],[[[67,[68]],67],[[67,[68]]]],[[[67,[[0,[65,102]]]],67],[[67,[[0,[65,102]]]]]],[[[67,[[0,[65,103]]]],67],[[67,[[0,[65,103]]]]]],[[[67,[[0,[65,103]]]]],[[67,[[0,[65,103]]]]]],[[[67,[[0,[65,104]]]],67],[[67,[[0,[65,104]]]]]],[[[67,[[0,[65,104]]]]],[[67,[[0,[65,104]]]]]],[[[67,[68]],67],[[67,[68]]]],[77,[[99,[77]]]],[[[89,[[0,[16,70]]]]],[[89,[[0,[16,70]]]]]],[[[90,[[0,[16,70]]]]],[[90,[[0,[16,70]]]]]],[[[76,[[0,[16,70]]]]],[[76,[[0,[16,70]]]]]],[91,91],[75,75],[[[80,[[0,[16,79]]]]],[[80,[[0,[16,79]]]]]],[94,94],[81,81],[[[95,[[0,[16,92]]]]],[[95,[[0,[16,92]]]]]],[82,82],[[[96,[[0,[16,70]],[0,[16,92]]]]],[[96,[[0,[16,70]],[0,[16,92]]]]]],[[[83,[[0,[16,70]]]]],[[83,[[0,[16,70]]]]]],[84,84],[85,85],[[[73,[[0,[16,69]]]]],[[73,[[0,[16,69]]]]]],[[[67,[[0,[16,69]]]]],[[67,[[0,[16,69]]]]]],[86,86],[87,87],[[[71,[[0,[16,70]]]]],[[71,[[0,[16,70]]]]]],[[[98,[[0,[16,70]]]]],[[98,[[0,[16,70]]]]]],[[[72,[[0,[16,70]]]]],[[72,[[0,[16,70]]]]]],[[[105,[[0,[16,0]]]]],[[105,[[0,[16,0]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],106],[[],106],[[[89,[70]]],106],[[[90,[70]]],106],[[[76,[70]]],106],[[[76,[70]]],106],[91,106],[75,106],[75,106],[[[93,[79,92]]],106],[[[80,[79]]],106],[[[80,[79]]],106],[94,106],[81,106],[[[95,[92]]],106],[82,106],[[[96,[70,92]]],106],[[[83,[70]]],106],[84,106],[85,106],[[[73,[69]]],106],[[[67,[69]]],106],[[[67,[69]]],106],[97,106],[86,106],[87,106],[[[71,[70]]],106],[[[98,[70]]],106],[[[72,[70]]],106],[[[72,[70]]],106],[[],[[89,[70]]]],[[],[[90,[70]]]],[[],91],[[],[[93,[79,[0,[92,48]]]]]],[[],[[96,[70,[0,[92,48]]]]]],[[],[[73,[69]]]],[[],[[67,[69]]]],[[],[[71,[70]]]],[[],[[98,[70]]]],[[],[[72,[70]]]],[[],106],[[],106],[[],106],[[],106],[[106,22],106],[106,106],[[[67,[[0,[65,107,108]]]]],[[67,[[0,[65,107,108]]]]]],[[[67,[68]],67],[[67,[68]]]],[[[67,[[0,[65,107]]]],67],[[67,[[0,[65,107]]]]]],[[77,77],5],[[77,76],5],[[77,67],5],[[77,72],5],[[[90,[70]],[90,[70]]],5],[[[76,[70]],77],5],[[[76,[70]],[76,[70]]],5],[[91,91],5],[[75,75],5],[[75,77],5],[[[80,[79]],77],5],[[[80,[79]],[80,[79]]],5],[[94,94],5],[[81,77],5],[[81,81],5],[[82,82],5],[[82,77],5],[[[83,[70]],[83,[70]]],5],[[[83,[70]],77],5],[[84,77],5],[[84,84],5],[[85,85],5],[[85,77],5],[[[73,[69]],[73,[69]]],5],[[[67,[69]],[67,[69]]],5],[[[67,[69]],77],5],[[86,77],5],[[86,86],5],[[87,87],5],[[87,77],5],[[[71,[70]],[71,[70]]],5],[[[72,[70]],77],5],[[[72,[70]],[72,[70]]],5],[[77,77],5],[[[89,[70]],35]],[[[90,[70]],35]],[[91,35]],[[[73,[69]],35]],[[[71,[70]],35]],[[[98,[70]],35]],[[[73,[69]],22,[15,[69]]]],[[[73,[69]]]],[[[89,[70]],109]],[[[90,[70]],109]],[[91,109]],[[[73,[69]],109]],[[[71,[70]],109]],[[[98,[70]],109]],[[[89,[70]],2]],[[[90,[70]],2]],[[91,2]],[[[73,[69]],2]],[[[71,[70]],2]],[[[98,[70]],2]],[[[90,[70]],109]],[[91,109]],[[[73,[69]],109]],[[[71,[70]],109]],[[[90,[70]],2]],[[91,2]],[[[73,[69]],2]],[[[71,[70]],2]],[[[90,[70]],2]],[[[71,[70]],2]],[84,99],[86],[87,57],[[77,41],110],[[[89,[[0,[33,70]]]],41],110],[[[90,[[0,[33,70]]]],41],110],[[[76,[70]],41],110],[[91,41],110],[[75,41],110],[[[93,[[0,[33,79]],[0,[33,92]]]],41],110],[[[80,[79]],41],110],[[94,41],110],[[81,41],110],[[[95,[[0,[33,92]]]],41],110],[[82,41],110],[[[96,[[0,[33,70]],[0,[33,92]]]],41],110],[[[83,[70]],41],110],[[84,41],110],[[85,41],110],[[[73,[[0,[33,69]]]],41],110],[[[67,[69]],41],110],[[97,41],110],[[86,41],110],[[87,41],110],[[[71,[[0,[33,70]]]],41],110],[[[98,[[0,[33,70]]]],41],110],[[[72,[70]],41],110],[[[105,[[0,[33,0]]]],41],110],[[]],[12,[[90,[70]]]],[[]],[[[89,[70]]],[[90,[70]]]],[[[111,[70]]],[[76,[70]]]],[[[90,[70]]],[[76,[70]]]],[[]],[[[89,[70]]],[[76,[70]]]],[12,[[76,[70]]]],[[]],[12,91],[12,75],[91,75],[112,75],[[]],[113],[[]],[92,[[93,[79,92]]]],[[]],[[[114,[79]]],[[80,[79]]]],[[[93,[79,92]]],[[80,[79]]]],[[]],[12,94],[94,81],[12,81],[115,81],[[]],[[]],[[[95,[92]]],82],[[]],[116,82],[[]],[[]],[[[117,[70]]],[[83,[70]]]],[[[96,[70,92]]],[[83,[70]]]],[118,84],[[]],[[]],[119,85],[12,[[73,[69]]]],[[]],[106,[[73,[69]]]],[[[120,[69]]],[[67,[69]]]],[[]],[[[73,[69]]],[[67,[69]]]],[12,[[67,[69]]]],[[]],[121,86],[97,86],[[]],[122,87],[[]],[[]],[12,[[71,[70]]]],[[[98,[70]]],[[71,[70]]]],[[]],[12,[[72,[70]]]],[[]],[[[71,[70]]],[[72,[70]]]],[[[98,[70]]],[[72,[70]]]],[[[123,[70]]],[[72,[70]]]],[[]],[35,[[89,[70]]]],[35,[[90,[70]]]],[35,[[76,[70]]]],[35,91],[35,75],[[35,22],81],[35,[[73,[69]]]],[35,[[67,[69]]]],[35,[[71,[70]]]],[35,[[98,[70]]]],[35,[[72,[70]]]],[2,[[90,[70]]]],[2,[[76,[70]]]],[2,[[71,[70]]]],[2,[[72,[70]]]],[12,[[76,[70]]]],[12,91],[12,75],[12,81],[12,[[73,[69]]]],[12,[[67,[69]]]],[12,[[72,[70]]]],[109,[[89,[70]]]],[109,[[90,[70]]]],[109,[[76,[70]]]],[109,91],[109,75],[109,[[73,[69]]]],[109,[[67,[69]]]],[109,[[71,[70]]]],[109,[[98,[70]]]],[109,[[72,[70]]]],[2,[[89,[70]]]],[2,[[90,[70]]]],[2,[[76,[70]]]],[2,91],[2,75],[2,[[73,[69]]]],[2,[[67,[69]]]],[2,[[71,[70]]]],[2,[[98,[70]]]],[2,[[72,[70]]]],[109,[[90,[70]]]],[109,[[76,[70]]]],[109,91],[109,75],[109,[[73,[69]]]],[109,[[67,[69]]]],[109,[[71,[70]]]],[109,[[72,[70]]]],[2,[[90,[70]]]],[2,91],[2,75],[2,[[73,[69]]]],[2,[[67,[69]]]],[2,[[71,[70]]]],[35,[[67,[69]]]],[[[57,[69]]],[[73,[69]]]],[[[57,[69]]],[[67,[69]]]],[[[76,[70]],22],15],[[75,22],[[15,[5]]]],[[81,22],15],[[82,22],[[15,[[99,[77]]]]]],[[[67,[69]],22],[[15,[69]]]],[[[72,[70]],22],[[15,[10]]]],[106,124],[106,106],[[77,10],[[99,[74]]]],[106],[106],[[[67,[69]]],15],[[77,10],[[99,[74]]]],0,[[87,22]],[[87,22]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[90,[70]]],[[78,[77]]]],[91,[[78,[77]]]],[[[93,[79,92]]],[[78,[77]]]],[[[96,[70,92]]],[[78,[77]]]],[[[73,[69]]],[[78,[77]]]],[97,[[78,[77]]]],[[[71,[70]]],[[78,[77]]]],[[[93,[79,92]]],[[99,[77]]]],[[[96,[70,92]]],[[99,[77]]]],[86],[[[71,[70]]]],[[[89,[70]]]],[75],[[[73,[69]]]],[[[67,[69]]]],[97],[[[98,[70]]]],[89],[76],[91],[75],[75],[80],[94],[81],[82],[83],[84],[67],[[[67,[69]]]],[86],[87],[71],[98],[72],[[]],[[[76,[70]]],[[3,[[76,[70]],[90,[70]]]]]],[75,[[3,[75,91]]]],[[[67,[69]]],[[3,[[67,[69]],[73,[69]]]]]],[[[72,[70]]],[[3,[[72,[70]],[71,[70]]]]]],[[],5],[[],5],[22,5],[[[80,[79]]],5],[106,5],[22,5],[22,5],[[[89,[70]]],[[105,[[89,[70]]]]]],[[[90,[70]]],[[126,[[105,[[89,[70]]]],125]]]],[[[76,[70]]],[[126,[[127,[70]],125]]]],[91,[[126,[5,125,125]]]],[75,[[126,[5,125,125]]]],[[[80,[79]]],[[126,[[99,[128]],[0,[79]],125]]]],[94,[[126,[[129,[58]],125]]]],[81,[[126,[[129,[58]],125]]]],[82,[[126,[[99,[77]],[105,[82]],125]]]],[[[83,[70]]],[[126,[[99,[77]],[130,[70]],125]]]],[84,[[126,[[99,[77]],0,125]]]],[[[73,[69]]],[[126,[[131,[69]],125]]]],[[[67,[69]]],[[126,[[131,[69]],125]]]],[86,[[126,[[57,[[99,[128]]]],0,125]]]],0,[[[71,[70]]],[[126,[10,[105,[[98,[70]]]],125]]]],[[[98,[70]]],[[105,[[98,[70]]]]]],[[[72,[70]]],[[126,[10,[132,[70]],125]]]],[[[80,[79]]],[[37,[[126,[[0,[79,0]],125]],133]]]],[94,[[129,[58]]]],[[[80,[79]],22],22],[[[93,[79,92]]],73],[[[80,[79]]],67],[[[80,[79]]],[[0,[109,16]]]],[[[80,[79]]],[[0,[109,16]]]],[[],22],[[],22],[[[89,[70]]],22],[[[89,[70]]],22],[[[90,[70]]],22],[[[76,[70]]],22],[[[76,[70]]],22],[91,22],[75,22],[75,22],[[[93,[79,92]]],22],[[[80,[79]]],22],[[[80,[79]]],22],[94,22],[94,22],[81,22],[81,22],[[[95,[92]]],22],[[[95,[92]]],22],[82,22],[82,22],[[[96,[70,92]]],22],[[[96,[70,92]]],22],[[[83,[70]]],22],[[[83,[70]]],22],[84,22],[84,22],[85,22],[[[73,[69]]],22],[[[67,[69]]],22],[[[67,[69]]],22],[97,22],[86,22],[87,22],[87,22],[[[71,[70]]],22],[[[71,[70]]],22],[[[98,[70]]],22],[[[98,[70]]],22],[[[72,[70]]],22],[[[72,[70]]],22],[[[93,[79,92]]],134],[[[67,[[0,[65,135]]]]],[[67,[[0,[65,135]]]]]],[[[67,[68]],67],[[67,[68]]]],[[[67,[[0,[65,135]]]],67],[[67,[[0,[65,135]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[95,[92]]]],[[[96,[70,92]]]],[97,57],[[],[[89,[70]]]],[[],[[90,[70]]]],[[106,[136,[70]],[137,[58]],[15,[138]]],[[76,[70]]]],[[],91],[[106,138,[15,[138]]],75],[[],[[93,[79,[0,[92,48]]]]]],[22,94],[[106,[137,[58]],[15,[138]]],81],[[92,22],[[95,[92]]]],[[106,[99,[77]],[15,[138]]],82],[[],[[96,[70,[0,[92,48]]]]]],[[106,[136,[70]],[99,[77]],[15,[138]]],[[83,[70]]]],[[106,[136,[139]],[99,[77]],[15,[138]]],84],[[106,22],85],[[],[[73,[69]]]],[[106,[137,[69]],[15,[138]]],[[67,[69]]]],[[106,[57,[[99,[92]]]]],97],[[106,[57,[[99,[77]]]],[15,[138]]],86],[[106,[137,[140]],[57,[[99,[77]]]],[15,[[137,[139]]]]],87],[[],[[71,[70]]]],[[],[[98,[70]]]],[[106,[136,[70]],[137,[58]],[15,[138]]],[[72,[70]]]],[[],[[105,[0]]]],[106,[[76,[70]]]],[106,75],[106,[[80,[79]]]],[106,81],[106,82],[106,[[83,[70]]]],[106,84],[106,85],[106,[[67,[69]]]],[106,86],[106,87],[106,[[72,[70]]]],[106,[[99,[77]]]],[[92,106,22],[[95,[92]]]],[[92,106,22],[[96,[70,92]]]],[[106,22],[[76,[70]]]],[[106,22],75],[[106,22],[[80,[79]]]],[[106,22],81],[[106,22],82],[[106,22],[[83,[70]]]],[[106,22],84],[[106,22],85],[[106,22],[[67,[69]]]],[[106,22],86],[[106,22],87],[[106,22],[[72,[70]]]],[[106,22],[[99,[77]]]],[[106,[141,[70]],[57,[58]],[15,[142]]],[[71,[70]]]],[[106,[141,[70]],[57,[58]]],[[98,[70]]]],[[106,[136,[70]],[137,[58]],[15,[138]]],[[72,[70]]]],[[92,22],[[96,[70,92]]]],[[92,10,5,22],[[95,[92]]]],[[92,10,5],[[96,[70,92]]]],[[[105,[0]]],15],[[[105,[0]]],15],[[[105,[0]],22],15],[[],22],[[]],[[[89,[70]]],141],[[[90,[70]]],141],[[[76,[70]]]],[[[76,[70]]],136],[[[96,[70,92]]],141],[[[83,[70]]],136],[84,136],[87,[[15,[137]]]],[[[71,[70]]],141],[[[98,[70]]],141],[[[72,[70]]],136],[[[72,[70]]]],0,[[[67,[[0,[65,143]]]],67]],[[[67,[[0,[65,143]]]]]],[[[67,[[0,[65,144]]]]]],[[[67,[[0,[65,144]]]],67]],[[[67,[[0,[65,145]]]],67]],[[[67,[[0,[65,145]]]]]],[[[89,[70]]],[[15,[[57,[58]]]]]],[[[90,[70]]],[[15,[[57,[58]]]]]],[91,[[15,[5]]]],[94,[[15,[[57,[58]]]]]],[[[73,[69]]],[[15,[69]]]],[[[71,[70]]],[[15,[56]]]],[[[98,[70]]],[[15,[56]]]],[[[89,[70]],12]],[[[90,[70]],[15,[12]]]],[[91,[15,[5]]]],[[94,[15,[12]]]],[[[73,[69]],[15,[69]]]],[[97,5]],[[[71,[70]],[15,[[12,[10]]]]]],[[[98,[70]],[12,[10]]]],[[]],[[[89,[70]]]],[[[90,[70]]]],[91],[[[93,[79,92]]]],[[[93,[79,92]]]],[94],[[[95,[92]]]],[[[96,[70,92]]]],[[[73,[69]]]],[97],[[[71,[70]]]],[[[98,[70]]]],[[[67,[[0,[65,146]]]],67],[[67,[[0,[65,146]]]]]],[[[67,[[0,[65,146,108]]]]],[[67,[[0,[65,146,108]]]]]],[22],[[[89,[70]],22,22]],[[[89,[70]],22]],[[[90,[70]],22,22]],[[[90,[70]],22]],[[91,22]],[[91,22]],[[[93,[79,92]],22]],[[[93,[79,92]],22]],[[94,22]],[[94,22]],[[[95,[92]],22]],[[[95,[92]],22]],[[[96,[70,92]],22]],[[[96,[70,92]],22]],[[[73,[69]],22]],[[[73,[69]],22]],[[97,22]],[[97,22]],[[[71,[70]],22,22]],[[[71,[70]],22]],[[[98,[70]],22]],[[[98,[70]],22,22]],[[[67,[68]],67],[[67,[68]]]],[[[67,[[0,[65,147]]]],67],[[67,[[0,[65,147]]]]]],[[[67,[[0,[65,147]]]]],[[67,[[0,[65,147]]]]]],[[[67,[[0,[65,148]]]],67],[[67,[[0,[65,148]]]]]],[[[67,[68]],67],[[67,[68]]]],[[[67,[[0,[65,148]]]]],[[67,[[0,[65,148]]]]]],[[[67,[[0,[65,149]]]]],[[67,[[0,[65,149]]]]]],[[[67,[68]],67],[[67,[68]]]],[[[67,[[0,[65,149]]]],67],[[67,[[0,[65,149]]]]]],[[91,22,[15,[5]]]],[[[73,[69]],22,[15,[69]]]],[[[73,[69]],22,[15,[69]]]],[[[76,[70]],[15,[138]]]],[[75,[15,[138]]]],[[[80,[79]],[15,[138]]]],[[81,[15,[138]]]],[[82,[15,[138]]]],[[[83,[70]],[15,[138]]]],[[84,[15,[138]]]],[[[73,[69]],[15,[142]]]],[[[67,[69]],[15,[138]]]],[[86,[15,[138]]]],[[[71,[70]],[15,[142]]]],[[[72,[70]],[15,[138]]]],[[75,138]],[[[73,[69]],[57,[69]]]],[[[67,[69]],[137,[69]]]],[[]],[[[89,[70]]]],[[[89,[70]]]],[[[90,[70]]]],[[[90,[70]]]],[91],[91],[[[93,[79,92]]]],[[[93,[79,92]]]],[94],[94],[[[95,[92]]]],[[[95,[92]]]],[[[96,[70,92]]]],[[[96,[70,92]]]],[[[73,[69]]]],[[[73,[69]]]],[97],[97],[[[71,[70]]]],[[[71,[70]]]],[[[98,[70]]]],[[[98,[70]]]],[94,22],[81,22],[[[95,[92]]],22],[82,22],[[[105,[0]]]],[[22,22]],[[[76,[70]],22,22]],[[[76,[70]],22,22]],[[75,22,22]],[[75,22,22]],[[[80,[79]],22,22]],[[[80,[79]],22,22]],[[81,22,22]],[[81,22,22]],[[82,22,22]],[[82,22,22]],[[[83,[70]],22,22]],[[[83,[70]],22,22]],[[84,22,22]],[[84,22,22]],[[85,22,22]],[[85,22,22]],[[[67,[69]],22,22]],[[[67,[69]],22,22]],[[86,22,22]],[[86,22,22]],[[87,22,22]],[[87,22,22]],[[[72,[70]],22,22]],[[[72,[70]],22,22]],[[22,22]],[[[76,[70]],22,22]],[[[76,[70]],22,22]],[[75,22,22]],[[75,22,22]],[[[80,[79]],22,22]],[[[80,[79]],22,22]],[[81,22,22]],[[81,22,22]],[[82,22,22]],[[82,22,22]],[[[83,[70]],22,22]],[[[83,[70]],22,22]],[[84,22,22]],[[84,22,22]],[[85,22,22]],[[85,22,22]],[[[67,[69]],22,22]],[[[67,[69]],22,22]],[[86,22,22]],[[86,22,22]],[[87,22,22]],[[87,22,22]],[[[72,[70]],22,22]],[[[72,[70]],22,22]],[[22,22],[[99,[77]]]],[[[76,[70]],22,22],[[76,[70]]]],[[75,22,22],75],[[[80,[79]],22,22],[[80,[79]]]],[[81,22,22],81],[[82,22,22],82],[[[83,[70]],22,22],[[83,[70]]]],[[84,22,22],84],[[85,22,22],85],[[[67,[69]],22,22],[[67,[69]]]],[[86,22,22],86],[[87,22,22],87],[[[72,[70]],22,22],[[72,[70]]]],[[22,22],[[99,[77]]]],[[[76,[70]],22,22],[[76,[70]]]],[[75,22,22],75],[[[80,[79]],22,22],[[80,[79]]]],[[81,22,22],81],[[82,22,22],82],[[[83,[70]],22,22],[[83,[70]]]],[[84,22,22],84],[[85,22,22],85],[[[67,[69]],22,22],[[67,[69]]]],[[86,22,22],86],[[87,22,22],87],[[[72,[70]],22,22],[[72,[70]]]],[[[67,[[0,[65,150]]]],67],[[67,[[0,[65,150]]]]]],[[[67,[68]],67],[[67,[68]]]],[[[67,[[0,[65,150]]]]],[[67,[[0,[65,150]]]]]],[[81,106],81],[[[73,[69]],106],[[73,[69]]]],[[[67,[69]],106],[[67,[69]]]],[[],[[99,[77]]]],[[[76,[70]]],[[99,[77]]]],[75,[[99,[77]]]],[[[80,[79]]],[[99,[77]]]],[81,[[99,[77]]]],[82,[[99,[77]]]],[[[83,[70]]],[[99,[77]]]],[84,[[99,[77]]]],[85,[[99,[77]]]],[[[67,[69]]],[[99,[77]]]],[86,[[99,[77]]]],[87,[[99,[77]]]],[[[72,[70]]],[[99,[77]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[35,151],[[[89,[70]],35],151],[[[90,[70]],35],151],[[91,35],[[37,[133]]]],[[[93,[79,[0,[92,[152,[[15,[31]]]]]]]],35],151],[[[95,[[0,[92,[152,[15]]]]]],35],151],[[[96,[70,[0,[92,[152,[15]]]]]],35],151],[[[73,[69]],35],[[37,[133]]]],[[[71,[70]],35],151],[[[98,[70]],35],151],[[],151],[[[89,[70]],[89,[70]]],151],[[[90,[70]],[90,[70]]],151],[[91,91],[[37,[133]]]],[[94,94],[[37,[133]]]],[[[95,[[0,[92,153]]]],[95,[[0,[92,153]]]]],151],[[[96,[70,[0,[92,153]]]],[96,[70,[0,[92,153]]]]],151],[[[73,[69]],[73,[69]]],[[37,[133]]]],[[[71,[70]],[71,[70]]],151],[[[98,[70]],[98,[70]]],151],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[35,[[151,[[89,[70]]]]]],[[35,22],[[37,[94,133]]]],[[35,22],[[37,[81,133]]]],[35,[[151,[[98,[70]]]]]],[[[67,[79]],[99,[77]]],[[37,[[80,[79]],133]]]],[109,[[37,[[90,[70]]]]]],[109,[[37,[[76,[70]]]]]],[109,[[37,[91]]]],[109,[[37,[75]]]],[109,[[37,[[73,[69]]]]]],[109,[[37,[[71,[70]]]]]],[109,[[37,[[72,[70]]]]]],[35,[[37,[[90,[70]]]]]],[35,[[37,[[76,[70]]]]]],[2,[[37,[91]]]],[2,[[37,[75]]]],[35,[[37,[[73,[69]]]]]],[35,[[37,[[71,[70]]]]]],[35,[[37,[[72,[70]]]]]],[106,[[37,[124,133]]]],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[106,[141,[70]],[57,[58]]],[[151,[[89,[70]]]]]],[[106,[141,[70]],[57,[58]],[15,[142]]],[[151,[[90,[70]]]]]],[[106,[136,[70]],[137,[58]],[15,[138]]],[[37,[[76,[70]],133]]]],[[106,142,[15,[142]]],[[37,[91,133]]]],[[106,138,[15,[138]]],[[37,[75,133]]]],[[106,[67,[79]],[99,[77]]],[[37,[[80,[79]],133]]]],[[106,[57,[58]],[15,[142]]],[[37,[94,133]]]],[[106,[137,[58]],[15,[138]]],[[37,[81,133]]]],[[106,[99,[77]],[15,[138]]],[[37,[82,133]]]],[[106,[136,[70]],[99,[77]],[15,[138]]],[[37,[[83,[70]],133]]]],[[106,[136,[139]],[99,[77]],[15,[138]]],[[37,[84,133]]]],[[106,22],[[37,[85,133]]]],[[106,[57,[69]],[15,[142]]],[[37,[[73,[69]],133]]]],[[106,[137,[69]],[15,[138]]],[[37,[[67,[69]],133]]]],[[106,[57,[[99,[92]]]],[15,[142]]],[[37,[97,133]]]],[[106,[57,[[99,[77]]]],[15,[138]]],[[37,[86,133]]]],[[106,[137,[140]],[57,[[99,[77]]]],[15,[[137,[139]]]]],[[37,[87,133]]]],[[106,[141,[70]],[57,[58]],[15,[142]]],[[151,[[71,[70]]]]]],[[106,[141,[70]],[57,[58]]],[[151,[[98,[70]]]]]],[[106,[136,[70]],[137,[58]],[15,[138]]],[[151,[[72,[70]]]]]],[[106,[67,[79]],[99,[77]]],[[37,[[80,[79]],133]]]],[[106,[136,[70]],[137,[58]],[15,[138]]],[[151,[[72,[70]]]]]],[[],151],[[[89,[70]],12],151],[[[90,[70]],[15,[12]]],151],[[91,[15,[5]]],[[37,[133]]]],[[[93,[79,[0,[92,[154,[[15,[31]]]]]]]],[15,[31]]],151],[[94,[15,[12]]],[[37,[133]]]],[[[95,[[0,[92,[152,[15]]]]]],[15,[35]]],151],[[[96,[70,[0,[92,[152,[15]]]]]],[15,[35]]],151],[[[73,[69]],[15,[69]]],[[37,[133]]]],[[[71,[70]],[15,[[12,[10]]]]],151],[[[98,[70]],[12,[10]]],151],[[[95,[92]]],151],[[[96,[70,92]]],151],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[87,137],[[],[[15,[138]]]],[[],[[15,[142]]]],[[[89,[70]]],[[15,[142]]]],[[[90,[70]]],[[15,[142]]]],[[[76,[70]]],[[15,[138]]]],[[[76,[70]]],[[15,[138]]]],[91,[[15,[142]]]],[75,[[15,[138]]]],[75,[[15,[138]]]],[[[93,[79,92]]],[[15,[142]]]],[[[80,[79]]],[[15,[138]]]],[[[80,[79]]],[[15,[138]]]],[94,[[15,[142]]]],[81,[[15,[138]]]],[81,[[15,[138]]]],[[[95,[92]]],[[15,[142]]]],[82,[[15,[138]]]],[82,[[15,[138]]]],[[[96,[70,92]]],[[15,[142]]]],[[[83,[70]]],[[15,[138]]]],[[[83,[70]]],[[15,[138]]]],[84,[[15,[138]]]],[85,[[15,[138]]]],[[[73,[69]]],[[15,[142]]]],[[[67,[69]]],[[15,[138]]]],[[[67,[69]]],[[15,[138]]]],[97,[[15,[142]]]],[86,[[15,[138]]]],[86,[[15,[138]]]],[87,[[15,[138]]]],[[[71,[70]]],[[15,[142]]]],[[[98,[70]]],[[15,[142]]]],[[[72,[70]]],[[15,[138]]]],[[[72,[70]]],[[15,[138]]]],[[[89,[70]],22]],[[[76,[70]],22]],[[75,22],5],[[[80,[79]],22],[[99,[128]]]],[[94,22]],[[81,22]],[[82,22],[[99,[77]]]],[[[83,[70]],22],[[99,[77]]]],[[84,22],[[99,[77]]]],[[[67,[69]],22],69],[[97,22],15],[[87,22],[[99,[128]]]],[[[71,[70]],22],10],[[[98,[70]],22],10],[[[72,[70]],22],10],[[[89,[70]],22]],[[[76,[70]],22]],[[75,22],5],[[94,22]],[[81,22]],[[82,22],[[99,[77]]]],[[[83,[70]],22],[[99,[77]]]],[[84,22],[[99,[77]]]],[[[67,[69]],22],69],[[87,22],[[99,[128]]]],[[[71,[70]],22],10],[[[98,[70]],22],10],[[[72,[70]],22],10],[[]],[[[89,[70]]],57],[[[90,[70]]],57],[[[76,[70]]],137],[[[76,[70]]]],[91,142],[75,138],[[[93,[79,92]]]],[[[80,[79]]],99],[94,57],[81,137],[[[95,[92]]]],[82,99],[[[96,[70,92]]]],[[[83,[70]]],99],[[[73,[69]]],57],[[[67,[69]]],137],[97,57],[86],[[[71,[70]]],57],[[[98,[70]]],57],[[[72,[70]]],137],[[[72,[70]]]],[[[90,[70]]],[[105,[[89,[70]]]]]],[[[76,[70]]],[[127,[70]]]],[91,125],[75,125],[[[80,[79]]],[[0,[79]]]],[81,[[129,[58]]]],[82,[[105,[82]]]],[[[83,[70]]],[[130,[70]]]],0,[[[73,[69]]],[[131,[69]]]],[[[67,[69]]],[[131,[69]]]],0,[[[71,[70]]],[[105,[[98,[70]]]]]],[[[72,[70]]],[[132,[70]]]],[[[80,[79]]],[[37,[[0,[79,0]],133]]]],[94],[[[73,[69]]]],[[22,22],[[89,[70]]]],[[22,22],[[90,[70]]]],[[22,22],[[71,[70]]]],[[22,22],[[98,[70]]]],[22,[[89,[70]]]],[22,[[90,[70]]]],[22,91],[[22,22],94],[22,[[96,[70,[0,[92,48]]]]]],[22,[[73,[69]]]],[22,[[71,[70]]]],[22,[[98,[70]]]],[[22,106],[[73,[69]]]],[[[15,[138]]],[[99,[77]]]],[[[76,[70]],[15,[138]]],[[99,[77]]]],[[[76,[70]],[15,[138]]],[[76,[70]]]],[[75,[15,[138]]],[[99,[77]]]],[[75,[15,[138]]],75],[[[80,[79]],[15,[138]]],[[99,[77]]]],[[[80,[79]],[15,[138]]],[[80,[79]]]],[[81,[15,[138]]],[[99,[77]]]],[[81,[15,[138]]],81],[[82,[15,[138]]],[[99,[77]]]],[[82,[15,[138]]],82],[[[83,[70]],[15,[138]]],[[99,[77]]]],[[[83,[70]],[15,[138]]],[[83,[70]]]],[[84,[15,[138]]],[[99,[77]]]],[[84,[15,[138]]],84],[[85,[15,[138]]],[[99,[77]]]],[[[67,[69]],[15,[138]]],[[99,[77]]]],[[[67,[69]],[15,[138]]],[[67,[69]]]],[[86,[15,[138]]],[[99,[77]]]],[[86,[15,[138]]],86],[[87,[15,[138]]],[[99,[77]]]],[[[72,[70]],[15,[138]]],[[99,[77]]]],[[[72,[70]],[15,[138]]],[[72,[70]]]],[[75,138],75],[[[67,[69]],[137,[69]]],[[67,[69]]]],[[[67,[[0,[65,155]]]],67],[[67,[[0,[65,155]]]]]],[[[67,[[0,[65,156]]]],67],[[67,[[0,[65,156]]]]]],[[[67,[[0,[65,157]]]],67],[[67,[[0,[65,157]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[[111,[70]]],[[78,[77]]]],[122,[[78,[77]]]],[112,[[78,[77]]]],[115,[[78,[77]]]],[119,[[78,[77]]]],[[[120,[69]]],[[78,[77]]]],[[[117,[70]]],[[78,[77]]]],[118,[[78,[77]]]],[121,[[78,[77]]]],[116,[[78,[77]]]],[[[123,[70]]],[[78,[77]]]],[[[114,[79]]],[[78,[77]]]],[[],[[78,[77]]]],[[],[[99,[77]]]],[[[111,[70]]],[[99,[77]]]],[122,[[99,[77]]]],[112,[[99,[77]]]],[115,[[99,[77]]]],[119,[[99,[77]]]],[[[120,[69]]],[[99,[77]]]],[[[117,[70]]],[[99,[77]]]],[118,[[99,[77]]]],[121,[[99,[77]]]],[116,[[99,[77]]]],[[[123,[70]]],[[99,[77]]]],[[[114,[79]]],[[99,[77]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],119],[[22,22,22]],[[[111,[70]],22,22,22]],[[122,22,22,22]],[[112,22,22,22]],[[115,22,22,22]],[[119,22,22,22]],[[[120,[69]],22,22,22]],[[[117,[70]],22,22,22]],[[118,22,22,22]],[[121,22,22,22]],[[116,22,22,22]],[[[123,[70]],22,22,22]],[[[114,[79]],22,22,22]],[22],[[[111,[70]],22]],[[122,22]],[[112,22]],[[115,22]],[[119,22]],[[[120,[69]],22]],[[[117,[70]],22]],[[118,22]],[[121,22]],[[116,22]],[[[123,[70]],22]],[[[114,[79]],22]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],22],[[[111,[70]]],22],[122,22],[112,22],[115,22],[119,22],[[[120,[69]]],22],[[[117,[70]]],22],[118,22],[121,22],[116,22],[[[123,[70]]],22],[[[114,[79]]],22],[[5,22],[[99,[158]]]],[[[57,[76]],5,22],[[111,[70]]]],[[[57,[87]],22],122],[[[57,[75]],5,22],112],[[[57,[81]],5,22],115],[106,119],[[[57,[67]],5,22],[[120,[69]]]],[[[57,[83]],5,22],[[117,[70]]]],[[[57,[84]],5,22],118],[[[57,[86]],5,22],121],[[[57,[82]],5,22],116],[[[57,[72]],5,22],[[123,[70]]]],[[5,22],[[114,[79]]]],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],0,[[77,77],[[151,[159]]]],[[],19],[[160,160],19],[[161,161],19],0,0,0,[1],[1],[1],[[138,138],138],[138],[142],[[138,138,74],138],[[142,138,74]],[[138,138],138],[[142,138],142],[[142,138]],[[138,138],138],[[142,138],142],[[142,138]],[[138,138],138],[[142,138],142],[[142,138]],[[]],[[]],[[]],[[]],[[]],[[]],[142,22],[109,[[57,[58]]]],[138,[[163,[162]]]],[142],[138,138],[164,164],[142,142],[[]],[[]],[[]],[[],138],[[],142],[[138,138],5],[[142,142],5],[[142,22,5]],[[142,138]],[[142,22,22]],[[142,109]],[[142,2]],[[138,41],110],[[164,41],110],[[142,41],110],[142,138],[12,138],[[]],[[]],[12,142],[[]],[2,[[57,[58]]]],[35,138],[35,142],[22,142],[22,142],[109,138],[109,142],[2,138],[2,142],[[12,22],138],[[[57,[58]],22],138],[[[57,[58]],22],142],[[138,22],[[15,[5]]]],[[142,22],5],[[138,22],5],[[138,22],5],[[]],[[]],[[]],[138],[138],[[]],[142],[138,[[3,[138,142]]]],[138,5],[142,5],[138,125],[142,125],[138,22],[142,22],[138,142],[[],138],[138,164],[[],142],[22,138],[164,15],[164,15],[138,138],[142,142],[[164,22],15],[138,22],[142,22],[[138,22,22],22],[[138,138],138],[142,[[15,[5]]]],[[142,5]],[[142,5]],[[138,138,138,138,74],138],[[142,22]],[[142,22,5]],[[142,22,5]],[142],[164],[[138,22,22]],[[138,22,22]],[[138,22,22],138],[[138,22,22],138],[[138,138,138,74],138],[[]],[[]],[[]],[[],37],[[],37],[[],37],[109,[[37,[138]]]],[109,[[37,[142]]]],[2,[[37,[138]]]],[2,[[37,[142]]]],[[],37],[[],37],[[],37],[[[57,[58]],22],[[37,[138,133]]]],[[[57,[58]],22],[[37,[142,133]]]],[[],63],[[],63],[[],63],[[138,74],138],[[142,74]],[138,22],[142,22],0,[22,142],[[138,138],138],0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[22,22],[125,125],[165,165],[[[166,[16,[0,[2,16]],[0,[2,16]]]]],[[166,[16,[0,[2,16]],[0,[2,16]]]]]],[[[126,[16,[0,[2,16]],[0,[2,16]]]]],[[126,[16,[0,[2,16]],[0,[2,16]]]]]],[[]],[[]],[[]],[[]],[[22,22],22],[[22,22,41],110],[[[167,[[0,[33,162]]]],41],110],[[[163,[[0,[33,162]]]],41],110],[[[168,[[0,[33,162]]]],41],110],[[125,41],110],[[165,41],110],[[[166,[33,[0,[2,33]],[0,[2,33]]]],41],110],[[[126,[33,[0,[2,33]],[0,[2,33]]]],41],110],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[22,5],[22,5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[167,[162]]],5],[[58,22],5],[[[167,[162]]],22],[[[163,[162]]],22],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[22,[[167,[162]]]],[[22,22],[[163,[162]]]],[22,[[168,[162]]]],[[22,22],125],[138,165],[[2,2],[[166,[2,2]]]],[[2,[15,[2]]],[[126,[2,2]]]],[[2,[15,[138]]],[[126,[2,125]]]],[[[167,[162]]],15],[[[163,[162]]],[[15,[162]]]],[[[168,[162]]],15],[125,15],[165,15],[[[166,[2,2]]],15],[[[126,[2,2]]],15],[125,[[15,[5]]]],[[[166,[50,50]]],15],[[[126,[50,50]]],15],[[125,22],15],[[[166,[2,2]],22],15],[[[126,[2,2]],22],15],[[]],[[[167,[162]]],162],[[[167,[162]]],162],[[[163,[162]]],162],[[[163,[162]]],162],[[[168,[162]]]],[[],169],[[],169],[[],22],[[[167,[162]]],22],[[[163,[162]]],22],[[[163,[162]]],22],[[[168,[162]]],22],[[58,22,5],58],[[22,5]],[[22,5]],[[[167,[162]]]],[[[163,[162]]]],[[[168,[162]]]],[125],[[[166,[2,2]]]],[[[126,[2,2]]]],[165,22],[[]],[[]],[[]],[[]],[[]],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[[126,[2,2]]],[[166,[2,2]]]],[[[126,[2,2]]],2],0,[1],[137],[[]],[[]],[[[137,[16]]],[[137,[16]]]],[[]],[[],137],[137],[[[137,[29]],[137,[29]]],5],[[[137,[33]],41],110],[[]],[57,137],[35,137],[137,[[15,[57]]]],[137,15],[[]],[[[137,[36]]]],[137,[[3,[137,57]]]],[137,5],[137,22],[[],137],[137,22],[137,22],[137,22],[[137,22,22]],[[137,22,22]],[[137,22,22],137],[[137,22,22],137],[[]],[[],37],[[],37],[[],63],0,[1],[[[170,[[12,[77]]]]]],[[]],[[]],[[[170,[[0,[16,[12,[77]]]]]]],[[170,[[0,[16,[12,[77]]]]]]]],[[]],[[[170,[[12,[77]]]]]],[[[170,[[12,[77]]]]]],[[[170,[[0,[29,[12,[77]]]]]],170],5],[[],5],[[[170,[[0,[33,[12,[77]]]]]],41],110],[[]],[[]],[[[170,[[12,[77]]]]],[[57,[[12,[77]]]]]],[[[170,[[12,[77]]]]],5],[[[170,[[12,[77]]]]],22],[[[57,[[12,[77]]]]],[[170,[[12,[77]]]]]],[[]],[[],37],[[],37],[[[57,[[12,[77]]]]],[[151,[[170,[[12,[77]]]]]]]],[[],63],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[106,5],[106,5],[106,5],[77,22],[77,[[151,[[99,[128]]]]]],[76,15],[75,[[15,[5]]]],[[]],[[]],[67,[[15,[[0,[69,171]]]]]],[72,[[15,[10]]]],[77,[[151,[[99,[128]]]]]],[76,15],[75,[[15,[5]]]],[[]],[[]],[67,[[15,[[0,[69,171]]]]]],[72,[[15,[10]]]],[[]],[[]],[[]],[77,[[151,[[99,[128]]]]]],[67,[[15,[[0,[69,171,66,[172,[[0,[69,171,66,[172,[[0,[69,171,66,[172,[[0,[69,171,66,172]]]]]]]]]]]]]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[77,77],[[99,[77]]]],[[]],[[77,128],[[99,[77]]]],0,[[106,106],5],[[106,106],5],[[106,106],5],[106,5],[[106,106],5],[[106,106],5],[[]],[[]],[[]],[[]],[[]],0,[[77,77],[[99,[77]]]],[[]],[[77,128],[[99,[77]]]],[[77,77],[[99,[77]]]],[[]],[[77,128],[[99,[77]]]],[77,[[99,[77]]]],[[]],[[]],[[]],[[77,77],[[99,[77]]]],[[]],[[]],[[]],[[]],[[77,77],[[99,[77]]]],[[]],[[77,128],[[99,[77]]]],0,[[]],[[]],[[]],0,[[67,67],[[67,[[0,[65,66]]]]]],[67,[[67,[[0,[65,66]]]]]],[[67,67],[[67,[[0,[65,100]]]]]],[67,[[67,[[0,[65,100]]]]]],[[67,67],[[67,[[0,[65,101]]]]]],[67,[[67,[[0,[65,101]]]]]],[[67,67],[[67,[[0,[65,102]]]]]],[67,[[67,[[0,[65,102]]]]]],[67,[[67,[[0,[69,173]]]]]],[[67,22],[[67,[[0,[65,102,174]]]]]],[[67,67],[[67,[[0,[65,103]]]]]],[67,[[67,[[0,[65,103]]]]]],[[67,67],[[67,[[0,[65,104]]]]]],[67,[[67,[[0,[65,104]]]]]],[[67,67],[[67,[[0,[65,107]]]]]],[67,[[67,[[0,[65,107,108]]]]]],[[67,67],[[67,[[0,[65,135]]]]]],[67,[[67,[[0,[65,135]]]]]],[67,[[67,[[0,[69,175]]]]]],[[67,67]],[67],[[67,67]],[67],[[67,67]],[67],[[67,[0,[65,[176,[[0,[65,[176,[[0,[65,[176,[[0,[65,[176,[[0,[65,176]]]]]]]]]]]]]]]]]]],[[67,[[0,[65,[176,[[0,[65,[176,[[0,[65,[176,[[0,[65,176]]]]]]]]]]]]]]]]]],[[67,67],[[67,[[0,[65,146]]]]]],[67,[[67,[[0,[65,146,108]]]]]],[[67,67],[[67,[[0,[65,147]]]]]],[67,[[67,[[0,[65,147]]]]]],[[67,67],[[67,[[0,[65,148]]]]]],[67,[[67,[[0,[65,148]]]]]],[[67,67],[[67,[[0,[65,149]]]]]],[67,[[67,[[0,[65,149]]]]]],[[67,67],[[67,[[0,[65,150]]]]]],[67,[[67,[[0,[65,150]]]]]],[[67,67],[[67,[[0,[65,155]]]]]],[67,[[67,[[0,[65,155]]]]]],[[67,67],[[67,[[0,[65,156]]]]]],[67,[[67,[[0,[65,156]]]]]],[67,[[67,[[0,[69,177]]]]]],[[67,67],[[67,[[0,[65,157]]]]]],[67,[[67,[[0,[65,157]]]]]],[[67,67],[[151,[[67,[68]]]]]],[[67,67],[[151,[[67,[68]]]]]],[[67,67],[[151,[[67,[68]]]]]],[[67,67],[[151,[[67,[68]]]]]],[[67,67],[[67,[68]]]],[[67,67],[[67,[68]]]],[[67,67],[[67,[68]]]],[[67,67],[[67,[68]]]],[[67,67],[[67,[68]]]],[[67,67],[[67,[68]]]],[[67,178],[[67,[68]]]],[[67,67],[[67,[68]]]],[[67,178],[[67,[68]]]],[[67,67],[[67,[68]]]],[[67,67],[[67,[68]]]],[[67,67],[[67,[68]]]],[[67,67],[[67,[68]]]],[[67,67],[[67,[68]]]],[[67,67],[[67,[[0,[69,[66,[[0,[69,[66,[[0,[69,[66,[[0,[69,66]]]]]]]]]]]]]]]]]],[[67,178],[[67,[[0,[69,[66,[[0,[69,[66,[[0,[69,[66,[[0,[69,66]]]]]]]]]]]]]]]]]],[[67,67],[[151,[[67,[179]]]]]],[[67,178],[[151,[[67,[179]]]]]],[[67,178],[[67,[[0,[69,[150,[[0,[69,[150,[[0,[69,[150,[[0,[69,150]]]]]]]]]]]]]]]]]],[[67,178],[[151,[[67,[179]]]]]],[[67,67],[[67,[[0,[69,[150,[[0,[69,[150,[[0,[69,[150,[[0,[69,150]]]]]]]]]]]]]]]]]],[[67,67],[[151,[[67,[179]]]]]],[[67,67,106,74],[[67,[69]]]],[[67,67,106,74],[[67,[69]]]],[[67,67,106,74]],[[67,67,106,74],[[151,[[67,[69]]]]]],[[67,74,106],[[151,[[67,[69]]]]]],[[67,74,106],[[67,[69]]]],[[67,74,106],[[67,[69]]]],[[67,74,106]],[[67,67,74]],[[67,74]],[[67,67],[[67,[[0,[69,180]]]]]],[67,[[67,[[0,[69,180]]]]]],[67,[[67,[[0,[69,181]]]]]],[[67,67],[[67,[[0,[69,182]]]]]],[67,[[67,[[0,[69,182]]]]]],[[67,67],[[67,[[0,[69,183]]]]]],[67,[[67,[[0,[69,183]]]]]],[75,5],[[75,75],75],[[75,184],75],[75,5],[77,75],[77,75],[75,75],[[75,75],75],[[75,184],75],[75,5],[[75,75],75],[[75,184],75],[75,5],[[75,75],75],[[75,184],75],0,[1],[[76,106],[[151,[[76,[139]]]]]],[76,[[151,[[80,[79]]]]]],[[76,106],[[76,[179]]]],[[76,106],[[151,[[72,[179]]]]]],[[76,106],[[67,[[0,[69,185]]]]]],[[76,106],[[151,[[72,[70]]]]]],[75,[[76,[70]]]],[75,[[67,[[0,[69,174]]]]]],[75,[[72,[70]]]],[[]],[[]],[[106,106],5],[[77,106,186],[[151,[[99,[77]]]]]],[186,186],[[]],[67,[[67,[179]]]],[67,[[67,[139]]]],[67,[[67,[187]]]],[[67,22,22],[[67,[68]]]],[67,[[67,[[0,[69,188]]]]]],[67,[[67,[[0,[69,108]]]]]],[[],186],[80,[[151,[[80,[[0,[79,108]]]]]]]],[[80,106],[[151,[[80,[79]]]]]],[80,[[99,[77]]]],[67,[[67,[160]]]],[[81,106],[[76,[70]]]],[[67,22,22],[[67,[68]]]],[[186,41],110],[[]],[[67,22,22],[[67,[68]]]],[[]],[67,[[67,[187]]]],[[67,189],[[72,[70]]]],0,[[76,106],[[67,[[0,[69,185]]]]]],[[72,106],[[67,[[0,[69,185]]]]]],[[67,106],[[67,[69]]]],[67,[[76,[70]]]],[[67,106],75],[67,[[151,[[80,[79]]]]]],[[67,106],[[67,[[0,[69,108]]]]]],[[67,106],[[67,[69]]]],[67,[[72,[70]]]],[[67,189,189],[[67,[179]]]],[67,[[67,[139]]]],[67,[[67,[139]]]],[[67,189,189],[[67,[139]]]],[67,[[67,[179]]]],[67,[[67,[179]]]],[[67,189],[[67,[139]]]],[[67,189],[[67,[179]]]],[[67,189,189,15],[[67,[179]]]],[[67,189,10],[[151,[[72,[70]]]]]],[[]],[[],37],[[],37],[[],63],[72,[[151,[[72,[139]]]]]],[[72,106],[[76,[70]]]],[72,[[67,[139]]]],[72,[[67,[179]]]],[72,[[151,[[80,[79]]]]]],[72,[[72,[179]]]],[72,[[67,[179]]]],[[72,106],[[67,[[0,[69,185]]]]]],[[72,56],[[151,[[67,[179]]]]]],0,[80,[[151,[[80,[79]]]]]],[[80,106],[[151,[[80,[79]]]]]],0,0,0,0,0,0,0,[106,5],[106,5],[106,5],[106,5],[106,5],[106,5],[106,5],[106,5],[106,5],[106,5],[106,5],[106,5],[[77,77],75],[[],58],[[77,77],75],[[77,128],75],[[77,128],75],[[75,[15,[138]],[15,[138]]],75],[[75,[15,[138]],[15,[138]]],75],[[]],[[]],[[77,77],75],[[],58],[[77,77],75],[[],58],[[77,128],75],[[77,128],75],[[77,77],75],[[],58],[[77,77],75],[[],58],[[77,128],75],[[77,128],75],[[77,77],75],[[],58],[[77,77],75],[[77,128],75],[[77,128],75],0,0,[[76,76],75],[[76,76],75],[76,75],[76,75],[[76,76],75],[[76,76],75],[76,75],[76,75],[[76,76],75],[[76,76],75],[76,75],[76,75],[[76,76],75],[[76,76],75],[76,75],[76,75],[[75,5,74],75],[[75,75],75],[[75,75],75],[[75,5],75],[[75,5],75],[[75,75],75],[[75,75],75],[[75,5],75],[[75,5],75],[[75,75],75],[[75,75],75],[[75,5],75],[[75,5],75],[[75,75],75],[[75,75],75],[[75,5],75],[[75,5],75],[[67,[0,[69,190]],74],75],[[67,67],75],[[67,67],75],[[67,[0,[69,190]]],75],[[67,[0,[69,190]]],75],[[67,67],75],[[67,67],75],[[67,[0,[69,190]]],75],[[67,[0,[69,190]]],75],[[67,67],75],[[67,67],75],[[67,[0,[69,190]]],75],[[67,[0,[69,190]]],75],[[67,67],75],[[67,67],75],[[67,[0,[69,190]]],75],[[67,[0,[69,190]]],75],[[72,72],75],[[72,72],75],[[72,10],75],[[72,10],75],[[72,72],75],[[72,72],75],[[72,10],75],[[72,10],75],[[72,72],75],[[72,72],75],[[72,10],75],[[72,10],75],[[72,72],75],[[72,72],75],[[72,10],75],[[72,10],75],[[],[[151,[[99,[77]]]]]],[[77,77],[[151,[75]]]],0,[75,[[151,[191]]]],[[77,75],[[151,[[99,[77]]]]]],[[170,75],[[151,[[170,[[99,[77]]]]]]]],[106,5],[77,[[151,[[67,[62]]]]]],[76,[[67,[62]]]],[75,[[67,[62]]]],[67,[[67,[62]]]],[72,[[67,[62]]]],[[75,77,77],[[151,[[99,[77]]]]]],[106,5],[77,[[151,[[99,[77]]]]]],[[76,76],[[151,[75]]]],[76,[[151,[75]]]],[[72,72],[[151,[75]]]],[[72,10],[[151,[75]]]],[[76,76],[[151,[75]]]],[76,[[151,[75]]]],[[72,72],[[151,[75]]]],[[72,10],[[151,[75]]]],[[77,22],[[99,[77]]]],0,0,0,[[]],[[]],[[],[[151,[[99,[74]]]]]],[74,[[151,[[99,[74]]]]]],[[]],[[]],[[]],[[77,77,192,[15,[22]]],[[151,[[99,[77]]]]]],[[2,2,99],[[193,[2,2]]]],[[]],[[[193,[2,2]]],15],[[],[[151,[[57,[194]]]]]],[[35,[15,[22]]],[[99,[77]]]],[[[193,[2,2]],[15,[22]]],[[57,[194]]]],[[],37],[[],37],[[],63],[[106,106],5],[[77,77],[[99,[77]]]],[[77,128],[[99,[77]]]],[[67,67],[[67,[[0,[69,190]]]]]],[[67,[0,[69,190]]],[[67,[[0,[69,190]]]]]],[[],[[151,[2]]]],[[72,72],[[151,[75]]]],[[72,10],[[151,[75]]]],0,0,[1],[1],[[]],[[]],[[]],[[]],[106,5],[195,195],[192,192],[[]],[[]],[[],192],0,[[192,192],5],[[],5],[[195,41],110],[[192,41],110],[[]],[[]],[[]],[[]],[[[15,[22]]],[[151,[[57,[[99,[77]]]]]]]],[[[15,[22]]],[[151,[[67,[196]]]]]],[[[15,[22]],74],[[151,[[67,[196]]]]]],0,0,0,[[77,192,[15,[22]]],[[151,[[99,[77]]]]]],[[77,192,[15,[22]]],[[151,[[67,[196]]]]]],[[]],[[]],[[],37],[[],37],[[],37],[[],37],[[],63],[[],63],0,0,0,0,0,0,[1],[1],[197],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[198,198],[197,197],[[]],[[]],[[197,197],19],[199,[[151,[200]]]],[[],[[20,[28]]]],[[],[[20,[28]]]],[[198,198],5],[[197,197],5],[[],5],[[],5],[[199,41],110],[[198,41],110],[[200,41],110],[[201,41],110],[[197,41],110],[[]],[[]],[[]],[[]],[[]],[197],[[]],[[]],[[]],[[]],[[]],[200],[[]],[200,201],[200,22],[201,22],[[[57,[198]]],199],[106,198],[[106,192],198],[201,15],[201,15],[[197,197],[[15,[19]]]],[[200,22],197],[[200,22],197],[201],[[]],[[]],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],63],[[],63],[[],63],[[],63],[[],63],[106,5],[[77,179,15],[[151,[[99,[77]]]]]],[106,5],[[77,67],[[151,[[99,[77]]]]]],[106,5],[106,5],[106,5],[106,5],[106,5],[106,5],[106,5],[106,5],[106,5],[77,[[151,[[67,[202]]]]]],[77,[[151,[[67,[202]]]]]],[77,[[151,[[67,[202]]]]]],[77,[[151,[[67,[202]]]]]],[77,[[151,[[67,[202]]]]]],[77,[[151,[[67,[202]]]]]],[77,[[151,[[67,[202]]]]]],[77,[[151,[[67,[202]]]]]],[77,[[151,[[67,[139]]]]]],[106,5],[106,5],[77,[[151,[[99,[77]]]]]],[77,[[151,[[99,[77]]]]]],[[74,72],[[72,[70]]]],[[77,179],[[151,[[99,[77]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],[1],[1],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[124,124],[203,203],[204,204],[205,205],[106,106],[206,206],[189,189],[207,207],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[124,106],0,[[],205],[[124,124],5],[[203,203],5],[[204,204],5],[[205,205],5],[[106,106],5],[[206,206],5],[[189,189],5],[[207,207],5],[[203,208],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],0,[[205,74],205],[[124,41],110],[[203,41],110],[[204,41],110],[[205,41],110],[[106,41],110],[[206,41],110],[[189,41],110],[[207,41],110],[[]],[[]],[[]],[[]],[[[57,[124]]],205],[204,106],[208,106],[[]],[[]],[[]],[[]],[209,15],[124],[203],[204],[106],[206],[189],[207],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[206,5],0,[206,5],0,0,0,[[[27,[56]],106,5],124],[5,206],[106,106],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[106,203],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[124,209],124],[[205,209],205],0,0,0,0,0,0,0,0,0,[[]],[[]],[[133,41],110],[[133,41],110],[[]],[210,133],[211,133],[212,133],[213,133],[214,133],[215,133],[216,133],[217,133],[218,133],[38,133],[219,133],[220,133],[221,133],[222,133],[223,133],[224,133],[[[0,[14,225,226]]],133],[[]],[54],[[],56],[[],37],[[],37],[[],63],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[227],[228],[229],[[],227],[[],228],[[],229],[[[99,[77]]],228],[124,227],[[[99,[2]],124],229],[230,124],[[227,41],110],[[228,41],110],[[229,41],110],[[]],[[]],[[]],[[]],[[228,106],[[151,[[99,[77]]]]]],[227,[[151,[124]]]],[[]],[[]],[[]],[[]],0,[230,[[15,[[37,[[99,[77]],133]]]]]],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[[99,[229]]],[[37,[230,133]]]],[[],63],[[],63],[[],63],[[],63],[[],[[67,[69]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[231,[[151,[[170,[[99,[77]]]]]]]],[[]],[232,[[151,[205]]]],[[]],[[[233,[55]]],55],[[]],[[55,234,[57,[124]],[15,[[57,[5]]]]],[[233,[55]]]],[[[233,[55]]],15],[[],37],[[],37],[[],63],0,[106,5],[[77,235],236],[231],[205,[[151,[232]]]],0,0,0,0,0,0,[1],[237],[238,238],[[]],[[]],[[]],[[]],[[]],[[]],[[238,22],238],[[[239,[55]]],[[37,[237,212]]]],[[[239,[55]]],[[240,[55]]]],[237],[237,237],[[]],[[238,[15,[58]]],238],[[],237],[[],238],[[238,58],238],[[237,[15,[237]]],[[37,[241,212]]]],[[[239,[55]]],[[243,[55,242]]]],[[15,22,74],[[151,[[170,[[99,[77]]]]]]]],[[22,106,22],[[151,[[99,[77]]]]]],[[238,5],238],[[237,237],5],[[237,57],5],[237,5],[[237,57],5],[237,5],[[],5],[[238,[15,[58]]],238],[[237,35]],[[238,5],238],[[237,41],[[37,[42]]]],[[238,41],[[37,[42]]]],[[[239,[33]],41],[[37,[42]]]],[[[57,[12,244]]],237],[245,237],[[],237],[[]],[[]],[[]],[35,237],[[238,[12,[7]]],[[37,[[239,[246]],212]]]],[[[12,[7]]],[[37,[[239,[246]],212]]]],[[238,55],[[239,[55]]]],[55,[[239,[55]]]],[[237,22],15],[[[239,[55]]]],[[[239,[55]]]],[[238,5],238],[[[239,[55]]],5],[[[239,[55]]],[[37,[245,212]]]],[[237,22]],[[],106],[[239,[15,[22]],5],151],[[]],[[]],[[]],[[[239,[55]]],[[247,[55]]]],[[[239,[55]]],[[248,[55,242]]]],[[[239,[55]]],55],[237,249],[[[239,[55]]],[[250,[55]]]],[[[239,[55]]],5],[237,5],[237,249],[237,22],[[],237],[[],238],[237,[[15,[251]]]],[[[239,[55]]],251],[237],[[238,58],238],[[238,5],238],[[237,22],[[15,[[252,[22]]]]]],[[[239,[55]],237],[[37,[5,212]]]],[[[239,[55]],245],[[37,[5,212]]]],[[239,22],[[151,[22]]]],[[[239,[55]]],[[253,[55]]]],[[[239,[[0,[55,60]]]],251],[[37,[212]]]],[[[239,[[0,[55,60]]]],61,251],[[37,[212]]]],[[[239,[55]],237]],[[[239,[55]],245]],[[237,[15,[251]]]],[[238,254],238],[[]],[237],[[238,255],238],[[237,22]],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],63],[[],63],[[],63],[[22,22],237],0,0,0,0,[1],[256],[257,257],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[257,22],257],[[[260,[[0,[258,259,225]]]]],261],[[[260,[[0,[258,259,225]]]]],[[262,[[0,[258,259,225]]]]]],[256],[256,256],[[]],[[257,[15,[58]]],257],[[257,[0,[258,259,225]]],[[263,[[0,[258,259,225]]]]]],[[257,[0,[258,259,225]]],[[260,[[0,[258,259,225]]]]]],[40,217],[[],256],[[],257],[[257,58],257],[[256,[15,[256]]],[[37,[241,217]]]],[[15,22,74],[[151,[[170,[[99,[77]]]]]]]],[[22,106,22],[[151,[[99,[77]]]]]],[[257,5],257],[[257,5],257],[256,5],[[256,57],5],[[256,256],5],[256,5],[[256,57],5],[[],5],[[257,[15,[58]]],257],[[256,35]],[[257,5],257],[[256,41],[[37,[42]]]],[[217,41],[[37,[42]]]],[[217,41],[[37,[42]]]],[[[260,[33]],41],[[37,[42]]]],[[257,41],[[37,[42]]]],[[],256],[[]],[[[57,[12,244]]],256],[264,256],[38,217],[[]],[[]],[[]],[35,256],[[[0,[258,259,225]]],[[260,[[0,[258,259,225]]]]]],[[256,22],15],[[[260,[[0,[258,259,225]]]]]],[[[260,[[0,[258,259,225]]]]]],[[[260,[[0,[258,259,225]]]]],5],[[257,5],257],[[[260,[[0,[258,259,225]]]]],261],[[256,22]],[[],106],[[260,[15,[22]],5],151],[[]],[[]],[[]],[[]],[[[260,[[0,[258,259,225]]]]],[[265,[[0,[258,259,225]]]]]],[[[260,[[0,[258,259,225]]]]],[[0,[258,259,225]]]],[256,266],[217,267],[[[260,[[0,[258,259,225]]]]],[[268,[[0,[258,259,225]]]]]],[[[260,[[0,[258,259,225]]]]],5],[256,5],[217,5],[256,266],[217,267],[256,22],[[],256],[[],257],[256,[[15,[269]]]],[217,[[15,[269]]]],[[[260,[[0,[258,259,225]]]]],269],[54],[256],[[257,58],257],[[257,5],257],[[256,22],[[15,[[252,[22]]]]]],[[[260,[[0,[258,259,225]]]],256],261],[[[260,[[0,[258,259,225]]]],264],261],[[260,22],[[151,[22]]]],[[[260,[[0,[258,259,225]]]]],[[270,[[0,[258,259,225]]]]]],[[[260,[[0,[258,271,259]]]]],261],[[[260,[[0,[258,271,259]]]],269],261],[[[260,[[0,[258,271,259]]]],61,269],261],[[[260,[[0,[258,259,225]]]],256]],[[[260,[[0,[258,259,225]]]],264]],[[256,[15,[269]]]],[217,[[15,[14]]]],[[257,272],257],[[]],[[],56],[256],[[257,273],257],[[256,22]],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],63],[[],63],[[],63],[[],63],[[22,22],256],0,[1],[[]],[[]],[274,274],[[]],0,0,[[],274],0,[[274,274],5],[[],5],[[274,41],110],[[]],[274],[[]],[[77,274],[[151,[[99,[275]]]]]],0,[[170,274],[[151,[[57,[[57,[58]]]]]]]],0,0,0,[[]],[[],37],[[],37],[[],63],[[170,274],151],[274,151],0,0,0,[[276,277,278],[[151,[[170,[[99,[77]]]]]]]],[[276,277,278],151],[[276,277,278],[[151,[[15,[[170,[[99,[77]]]]]]]]]],[[],151],[[170,279],151],[[205,15],276],[[205,15],[[151,[[57,[58]]]]]],[[205,15],280],0,0,[1],[1],0,[[]],[[]],[[]],[[]],[281,281],[277,277],[[]],[[]],[[],281],0,[[281,281],5],[[277,277],5],0,0,[[281,41],110],[[277,41],110],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[],37],[[],37],[[],37],[[],37],[[],63],[[],63],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[282,282],[283,283],[[]],[[]],[[],151],0,[[210,41],110],[[282,41],110],[[283,41],110],[[]],[[]],[[]],[[]],[[]],[[]],[[[284,[[0,[55,60]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[284,[[0,[55,60]]]]],[[0,[55,60]]]],[[]],[[]],0,0,[[[285,[55]]],5],[[[284,[[0,[55,60]]]]],282],[[[285,[55]]],283],[[[0,[55,60]],282,[15,[[57,[22]]]],[15,[22]]],[[284,[[0,[55,60]]]]]],[[55,283,[15,[[57,[22]]]]],[[285,[55]]]],[[[284,[[0,[55,60]]]]],15],[[[285,[55]]],15],[[278,282,15,[15,[22]],22,57,57],[[151,[[170,[[99,[77]]]]]]]],[[282,57],[[151,[278]]]],[[],[[151,[282]]]],[[],[[151,[283]]]],[[[284,[[0,[55,60]]]]],205],[[[285,[55]]],205],0,0,[[[284,[[0,[55,60]]]]]],0,0,[[]],[[]],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[286,[[170,[[99,[77]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[287,282],[[[0,[258,271,259,225]],282,[15,[[57,[22]]]],[15,[22]]],287],[[[11,[287]],52],[[53,[15]]]],[[],[[151,[282]]]],[287,205],[[],37],[[],37],[[11,52],[[53,[[15,[37]]]]]],[[],63],0,[[]],[[]],[[]],[[]],[[[288,[[0,[258,259,225]]]]],283],[[[0,[258,259,225]],283],[[288,[[0,[258,259,225]]]]]],[[[11,[[288,[[0,[258,259,225]]]]]],52],[[53,[15]]]],[[],[[151,[283]]]],[[],37],[[],37],[[11,52],[[53,[[15,[37]]]]]],[[],63],0,0,0,0,0,0,0,[1],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[289,289],[290,290],[[]],[[]],[290,170],0,[[],[[57,[281]]]],[[289,289],5],[[290,290],5],[[],5],[290,15],0,[[[291,[39]]],151],[[[292,[39]]],151],[[289,41],110],[[290,41],110],[[]],[[]],[[]],[[]],[[],290],[[],290],[[[170,[[99,[77]]]]],290],0,[289],[[]],[[]],[[]],[[]],[[[291,[39]]],39],[[[292,[39]]],39],[[39,279],[[291,[39]]]],[[39,205,[15,[[57,[281]]]],279],[[292,[39]]]],[205,[[57,[58]]]],0,[[[291,[39]],205,[15,[[57,[281]]]]],151],[[[292,[39]]],151],0,[[]],[[]],[[],37],[[],37],[[],37],[[],37],[[[0,[55,60,39]],282,279],[[151,[[292,[[0,[55,60,39]]]]]]]],[[],37],[[],37],[[],37],[[],37],[[39,205,[15,[[57,[281]]]],279],[[151,[[292,[39]]]]]],[[],63],[[],63],[[],63],[[],63],[[77,57,57,57,179,5,[15,[289]]]],[[[291,[39]],170,15],151],[[[292,[39]],170,15],151],0,[[]],[[]],[[]],[[]],[[[0,[293,259,225]],205,[15,[[57,[281]]]],279],[[294,[[0,[293,259,225]]]]]],[[[11,[[294,[[0,[293,259,225]]]]]],52],[[53,[151]]]],[[[11,[[294,[[0,[293,259,225]]]]]],52],[[53,[151]]]],[[[11,[[294,[[0,[293,259,225]]]]]],52],[[53,[151]]]],[[[11,[[294,[[0,[293,259,225]]]]]],290],151],[[],37],[[],37],[[],63],0,0,[1],[[]],[[]],[[]],[[]],[279,279],[[]],0,[[],279],[[279,279],5],[[],5],[[279,41],110],[[]],[[]],[279],[[]],[[]],[[[0,[293,259,225]],205,[15,[[57,[281]]]],279],[[295,[[0,[293,259,225]]]]]],[[[11,[[295,[[0,[293,259,225]]]]]],52],[[53,[151]]]],[[[11,[[295,[[0,[293,259,225]]]]]],52],[[53,[151]]]],[[[11,[[295,[[0,[293,259,225]]]]]],52],[[53,[151]]]],[[[11,[[295,[[0,[293,259,225]]]]]],290],151],[[]],[[],37],[[],37],[[],37],[[],37],[[],63],[[],63],0,0,[[296,106],[[37,[[99,[77]],133]]]],[[296,205],[[37,[[170,[[99,[77]]]],133]]]],[296,[[151,[106]]]],[296,[[151,[205]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[[],37],[[[297,[2]]],37],[298,37],[[[300,[299,4]]],37],[[[301,[299]]],37],[[[302,[299,4]]],37],[[[303,[299,74]]],37],[[[304,[299,74]]],37],[[[305,[299]]],37],[[[306,[299,4]]],37],[[[307,[299]]],37],[[[308,[299,4]]],37],[309,[[37,[133]]]],[[[310,[[12,[77]],2]]],[[37,[133]]]],[[],37],[[[297,[50]]],37],[298,37],[[[302,[311,4]]],37],[[[303,[311,74]]],37],[[[304,[311,74]]],37],[4,[[37,[5]]]],[4,[[37,[5]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[310,[[0,[[12,[77]],16]],[0,[2,16]]]]],[[310,[[0,[[12,[77]],16]],[0,[2,16]]]]]],[[]],[2,[[297,[2]]]],[44,[[37,[22]]]],[[],298],[[44,4],[[300,[44,4]]]],[4,[[37,[15]]]],[[[310,[[0,[[12,[77]],33]],[0,[2,33]]]],41],110],[[44,4],37],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[44,[[301,[44]]]],[[],15],[[[297,[2]]],15],[298,15],[[[300,[299,4]]],15],[[[301,[299]]],15],[[[302,[299,4]]],15],[[[303,[299,74]]],15],[[[304,[299,74]]],15],[[[305,[299]]],15],[[[306,[299,4]]],15],[[[307,[299]]],15],[[[308,[299,4]]],15],[309,15],[[[310,[[12,[77]],2]]],15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[44,4],[[302,[44,4]]]],[[44,74],[[304,[44,74]]]],[[44,74],[[303,[44,74]]]],[[205,170,[57,[58]]],309],[[2,[57,[58]]],[[310,[[12,[77]],2]]]],[[],[[37,[15]]]],[[[301,[299]]],[[37,[15]]]],[[[304,[299,74]]],[[37,[15]]]],[[],[[37,[15]]]],[[[304,[311,74]]],[[37,[15]]]],[22,[[37,[15]]]],[4,[[37,[[15,[22]]]]]],[[]],[[[297,[2]]]],[298],[[[300,[299,4]]]],[[[301,[299]]]],[[[302,[299,4]]]],[[[303,[299,74]]]],[[[304,[299,74]]]],[[[305,[299]]]],[[[306,[299,4]]]],[[[307,[299]]]],[[[308,[299,4]]]],[[44,22],[[305,[44]]]],[[44,4],[[306,[44,4]]]],[[44,22],[[307,[44]]]],[[44,4],[[308,[44,4]]]],[[]],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[299,[[37,[133]]]],0,0,0,0,0,0,0,0,[1],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[312,312],[[]],0,0,0,0,[313,[[37,[314]]]],[313,[[37,[315]]]],[313,[[37,[316]]]],[313,[[37,[317]]]],[313,[[37,[318]]]],[313,[[37,[319]]]],[313,[[37,[320]]]],[313,[[37,[312]]]],0,0,0,0,[[314,41],110],[[315,41],110],[[316,41],110],[[317,41],110],[[318,41],110],[[319,41],110],[[320,41],110],[[312,41],110],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[[314,321],37],[[315,321],37],[[316,321],37],[[317,321],37],[[318,321],37],[[319,321],37],[[320,321],37],[[312,321],37],[[]],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],0,0,0,[[205,319,17],[[151,[[170,[[99,[77]]]]]]]],[322,151],[[106,281,312,17],[[151,[[99,[77]]]]]],[170,319],[205,315],0,0,0,0,0,0,[[],37],[[[323,[21]]],151],[4,[[37,[5]]]],[4,[[37,[5]]]],[[]],[[]],[[]],[44,[[37,[22]]]],[106,[[37,[[99,[77]],133]]]],[[2,106],[[37,[[99,[77]],133]]]],[[44,4],[[300,[44,4]]]],[4,[[37,[15]]]],[[44,4],37],[[]],[44,[[301,[44]]]],[[],15],[[[323,[21]]],15],[[[15,[22]]],[[151,[106]]]],[2,[[151,[106]]]],[[]],[[[323,[21]]]],[[44,4],[[302,[44,4]]]],[[44,74],[[304,[44,74]]]],[[44,74],[[303,[44,74]]]],[[21,[57,[56]],[15,[22]]],[[323,[21]]]],[[],[[37,[15]]]],[22,[[37,[15]]]],[4,[[37,[[15,[22]]]]]],[[]],[[44,22],[[305,[44]]]],[[44,4],[[306,[44,4]]]],[[44,22],[[307,[44]]]],[[44,4],[[308,[44,4]]]],[[],37],[[],37],[[],63],0,0,0,0,0,[1],[[],37],[[[324,[[12,[77]],2]]],[[37,[133]]]],[4,[[37,[5]]]],[4,[[37,[5]]]],[[]],[[]],[[]],[[]],[[]],[[[324,[[0,[[12,[77]],16]],[0,[2,16]]]]],[[324,[[0,[[12,[77]],16]],[0,[2,16]]]]]],[[]],[44,[[37,[22]]]],[[44,4],[[300,[44,4]]]],[4,[[37,[15]]]],[[[324,[[0,[[12,[77]],33]],[0,[2,33]]]],41],110],[[44,4],37],[[]],[[]],[44,[[301,[44]]]],[[],15],[[[324,[[12,[77]],2]]],15],[[]],[[]],[[[325,[39,299]]]],[[]],[[44,4],[[302,[44,4]]]],[[44,74],[[304,[44,74]]]],[[44,74],[[303,[44,74]]]],[[39,299],[[325,[39,299]]]],[[2,[57,[58]]],[[324,[[12,[77]],2]]]],[[],[[37,[15]]]],[[[325,[39,299]]],15],[22,[[37,[15]]]],[4,[[37,[[15,[22]]]]]],[[]],[[44,22],[[305,[44]]]],[[44,4],[[306,[44,4]]]],[[44,22],[[307,[44]]]],[[44,4],[[308,[44,4]]]],[[]],[[],37],[[],37],[[],37],[[],37],[[],63],[[],63],0,0,0,[22,[[37,[[327,[326]],215]]]],[[328,106],[[99,[77]]]],[[],[[151,[[57,[124]]]]]],0,[[]],[[]],[[[57,[329]],22],[[327,[326]]]],[[]],[[],[[151,[[57,[329]]]]]],[[]],[[77,330],151],[[],37],[[],37],[[331,[57,[124]]],[[151,[332]]]],[[],63],[[332,170],151],0,0,[[106,333],[[37,[[99,[77]],133]]]],[334,[[37,[205,133]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[[],[[37,[[57,[[99,[335,244]],244]],223]]]],[[],[[37,[336,223]]]],[[],261],[[],37],[[],[[37,[337]]]],[[[339,[338]]],[[37,[223]]]],[[[340,[2]]],[[37,[223]]]],[341,[[37,[[337,[341]],223]]]],[4,[[37,[5]]]],[4,[[37,[5]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[342],[223,223],[342,342],[343,343],[344,344],[345,345],[346,346],[347,347],[348,348],[349,349],[350,350],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[342,351],[342,57],[[[57,[352]],[57,[353]],124,[15,[22]],22],[[151,[354]]]],0,[344],[342,179],[344,22],[342,355],[44,[[37,[22]]]],[[106,356,[99,[77]]],[[99,[77]]]],[[106,356,[99,[77]]],[[99,[77]]]],0,[342,179],[[357,57],[[37,[358,223]]]],[342,343],0,[342,[[15,[179]]]],[[343,343],5],[[346,346],5],[[347,347],5],[[348,348],5],[[349,349],5],[[350,350],5],[[],5],[[],5],[[],5],[[],5],[[],5],0,[342,179],[342,15],[[44,4],[[300,[44,4]]]],[4,[[37,[15]]]],[[223,41],[[37,[42]]]],[[223,41],[[37,[42]]]],[[342,41],[[37,[42]]]],[[343,41],[[37,[42]]]],[[344,41],[[37,[42]]]],[[345,41],[[37,[42]]]],[[346,41],[[37,[42]]]],[[347,41],[[37,[42]]]],[[348,41],[[37,[42]]]],[[[337,[33]],41],[[37,[42]]]],[[341,41],[[37,[42]]]],[[349,41],[[37,[42]]]],[[350,41],110],[[356,41],110],[[44,4],37],[[]],[[]],[[]],[221,223],[359,223],[133,223],[360,223],[361,223],[362,223],[38,223],[[]],[[]],[[]],[[]],[[]],[363,346],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[44,[[301,[44]]]],[[],15],[[],15],[[[339,[338]]],15],[[[340,[2]]],15],[341,15],[[[0,[55,60]],344,10,[15,[[78,[74]]]],[57,[58,244]],22],[[364,[[0,[55,60]]]]]],[10,[[57,[342]]]],[10,57],[[342,[0,[55,60]],[15,[365]],[57,[58]],22],[[151,[[366,[[0,[55,60]]]]]]]],[[342,[57,[58,244]],[78,[74]],22],261],[342,5],[346],[347],[348],[349],[342,[[15,[179]]]],0,0,[22,356],[[],179],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[339,[338]]]],[[[340,[2]]],[[57,[58,244]]]],[[[366,[55]]]],[[]],[[]],[[]],[[]],[[]],[342,351],0,[356,22],[[44,4],[[302,[44,4]]]],[[44,74],[[304,[44,74]]]],[[44,74],[[303,[44,74]]]],[342,367],[106,22],0,[[338,[57,[58,244]]],[[339,[338]]]],[[2,[57,[58,244]]],[[340,[2]]]],[[55,342,[78,[74]],[57,[58,244]],22],[[366,[55]]]],[[351,343],342],[[368,[57,[56,244]],369],343],[[[57,[342,244]],22,22],344],[[369,[57,[244]]],341],[[[57,[370]],[57,[124]]],371],[[[0,[55,60]],[57,[344]],205,[15,[22]],[15,[22]],[15,[[57,[[57,[[57,[[57,[372]]]]]]]]]]],[[373,[[0,[55,60]]]]]],[[[0,[55,60]],205,[57,[344]],[15,[22]],[15,[22]],[15,[[57,[[57,[[57,[[57,[372]]]]]]]]]]],[[374,[[0,[55,60]]]]]],[[[57,[354]],22,[15,[22]]],375],[[[57,[[99,[0]]]]],356],[[55,376,[78,[74]],[57,[58,244]],22],[[366,[55]]]],[[],[[37,[15]]]],[[[366,[55]]],15],[371,15],[[[373,[[0,[55,60]]]]],15],[[[374,[[0,[55,60]]]]],15],[375,15],[22,[[37,[15]]]],[344,22],[375,22],0,[342,179],[345,22],0,[342,377],[4,[[37,[[15,[22]]]]]],[54],[10,[[151,[57]]]],[[[0,[74,16]],10],[[151,[57]]]],[[344,[57,[124]],[15,[22]],[15,[22]],[15,[[57,[[57,[[57,[372]]]]]]]]],[[151,[[57,[354]]]]]],[[[0,[74,16]],344,[57,[124]],[15,[22]],[15,[22]],[15,[[57,[[57,[[57,[372]]]]]]]]],[[151,[[57,[354]]]]]],[[],[[151,[336]]]],[[],[[151,[336]]]],[[],[[37,[[57,[[57,[378,244]],244]],223]]]],0,0,[[[373,[[0,[55,60]]]]],205],0,[[]],[[[374,[[0,[55,60]]]]]],[[44,22],[[305,[44]]]],[[44,4],[[306,[44,4]]]],0,[342,[[15,[[37,[[78,[379]],223]]]]]],[[[366,[55]],57]],[[44,22],[[307,[44]]]],[[44,4],[[308,[44,4]]]],[[57,124,22,[15,[22]],[15,[[57,[[57,[372]]]]]]],[[151,[354]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],56],[344,22],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[380,[[37,[347]]]],[[],37],[380,[[37,[348]]]],[[],37],[[],37],[[],37],[[],[[37,[349]]]],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[342,179],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[381,381],[372,372],[[]],[[]],[22,[[37,[[57,[381]],223]]]],[[381,381],5],[[372,372],5],[[382,382],5],[[383,383],5],[[],5],[[],5],[[381,41],[[37,[42]]]],[[372,41],[[37,[42]]]],[[382,41],110],[[383,41],110],[[]],[[]],[383,382],[[]],[[]],[344,5],[381],[372],[[]],[[]],[[]],[[]],0,0,0,0,[[22,22],381],0,0,[[],[[37,[[57,[382]],133]]]],[[344,74],[[37,[[57,[[57,[[57,[372]]]]]],133]]]],0,0,0,[[]],[[]],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],63],[[],63],[[],63],[[],63],0,0,0,0,0,0,0,0,[336,[[151,[205]]]],0,0,0,[[],[[57,[124]]]],[209,[[151,[[15,[205]]]]]],0,0,0,0,0,0,0,0,0,[[]],[[]],[124,[[151,[384]]]],0,[[384,384],5],[[384,41],110],[[]],[[]],0,0,0,[[],37],[[],37],[[],63],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[[],37],[[[385,[2]]],37],[386,37],[4,[[37,[5]]]],[4,[[37,[5]]]],[[[0,[[12,[77]],225,226]],369,387],[[151,[[57,[[388,[[151,[358]]]]]]]]]],[[77,353,387,389],[[151,[358]]]],[[77,353,387,389],[[151,[358]]]],[[77,353,387,389],[[151,[[388,[[151,[358]]]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[358,57],[[]],[[106,389],5],[[369,369],5],[390,390],[368,368],[391,391],[336,336],[392,392],[393,393],[394,394],[395,395],[396,396],[389,389],[377,377],[397,397],[369,369],[398,398],[399,399],[387,387],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[390,390],19],[[391,391],19],[[336,22],400],0,0,[392],[[358,[57,[58,244]],393],[[37,[357,223]]]],[401,22],[401,355],0,[394,202],[395,58],[396,139],[44,[[37,[22]]]],0,0,0,[[],394],[[],395],[[],396],0,[[[402,[39]],[15,[[57,[390]]]]],[[151,[62]]]],[[390,390],5],[[368,368],5],[[391,391],5],[[393,393],5],[[394,394],5],[[395,395],5],[[396,396],5],[[389,389],5],[[377,377],5],[[397,397],5],[[369,369],5],[[398,398],5],[[399,399],5],[[387,387],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],0,[392],[[44,4],[[300,[44,4]]]],[4,[[37,[15]]]],[[390,41],[[37,[42]]]],[[368,41],[[37,[42]]]],[[391,41],[[37,[42]]]],[[336,41],[[37,[42]]]],[[392,41],[[37,[42]]]],[[401,41],[[37,[42]]]],[[358,41],[[37,[42]]]],[[357,41],[[37,[42]]]],[[393,41],[[37,[42]]]],[[394,41],[[37,[42]]]],[[395,41],[[37,[42]]]],[[396,41],[[37,[42]]]],[[389,41],[[37,[42]]]],[[377,41],[[37,[42]]]],[[397,41],[[37,[42]]]],[[369,41],[[37,[42]]]],[[398,41],[[37,[42]]]],[[399,41],110],[[387,41],110],0,[[44,4],37],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[56,[57,[369,244]],403,[15,[404]],[15,[139]]],369],[[56,403,[15,[404]],[15,[348]],[57,[369,244]],[15,[139]]],369],[[56,377],369],[44,[[301,[44]]]],[[],15],[[[385,[2]]],15],[386,15],[369,397],[[],22],[390],[368],[391],[393],[394],[395],[396],[389],[377],[397],[398],[401,345],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[385,[2]]]],[[[402,[39]]],39],[[[402,[39]]]],[[]],[[]],[336,391],[357,5],0,[336,15],0,0,[399,22],[[44,4],[[302,[44,4]]]],[[44,74],[[304,[44,74]]]],[[44,74],[[303,[44,74]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[392,10],[369,10],0,[[2,393,[57,[58,244]]],[[385,[2]]]],[[[0,[2,225,226]]],388],[[[0,[299,225,226]]],386],[[56,[27,[[15,[56]]]]],390],[[139,[57,[405,244]],179,[57,[406,244]],[27,[[15,[[57,[390,244]]]]]],[27,[[15,[56]]]],[27,[[15,[[57,[407,244]]]]]],[27,[[15,[408]]]],[27,[[15,[[57,[58,244]]]]]]],391],[[56,[57,[369,244]]],392],[[345,[57,[58,244]],355,22,368,[15,[22]]],401],[[2,393,[57,[58,244]]],[[385,[2]]]],[[],[[37,[15]]]],[388,15],[[[409,[[0,[[12,[77]],225,226]],2]]],15],[22,[[37,[15]]]],0,0,[401,22],[[[402,[39]]],387],[[[410,[[0,[293,225,259]]]]],387],[[[402,[39]]],392],[[[409,[[12,[77]],2]]],392],[[[410,[[0,[293,225,259]]]]],392],[[390,390],[[15,[19]]]],[[391,391],[[15,[19]]]],[[[11,[[410,[[0,[293,225,259]]]]]],52],[[53,[37]]]],[[[11,[[410,[[0,[293,225,259]]]]]],52],[[53,[37]]]],[[[11,[[410,[[0,[293,225,259]]]]]],52],[[53,[37]]]],[4,[[37,[[15,[22]]]]]],0,[[],[[37,[390,362]]]],[[],[[37,[390,362]]]],[[],[[37,[391,362]]]],[[],[[37,[391,362]]]],0,[[[170,[[0,[[12,[77]],225,226]]]],[57,[[57,[389]]]],[57,[369]],387],[[411,[133]]]],0,0,[336,392],[[[402,[39]]],205],[[[410,[[0,[293,225,259]]]]],205],0,0,[401,15],[[]],[388],[386],[[44,22],[[305,[44]]]],[[44,4],[[306,[44,4]]]],[[]],[[77,22,22]],[[[11,[[410,[[0,[293,225,259]]]]]],[170,[[99,[77]]]]],37],[401,[[15,[[37,[[78,[379]],223]]]]]],[[],[[11,[[99,[261,244]]]]]],[[],261],[[],[[11,[[99,[261,244]]]]]],[[],261],[[44,22],[[307,[44]]]],[[44,4],[[308,[44,4]]]],[77,[[57,[77]]]],[[77,369],[[151,[[57,[[57,[399]]]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[369,[[57,[353]]]],[205,[[151,[392]]]],[124,[[151,[369]]]],[[106,[0,[74,16]]],57],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[412,[[37,[389]]]],[[],37],[[],[[37,[377]]]],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[10,[[37,[392,223]]]],[[56,377,403,[15,[349]],[15,[347]],[15,[139]]],[[37,[369,223]]]],[391,[[37,[336,223]]]],[[],[[37,[369,223]]]],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[202,[[37,[394,223]]]],[58,[[37,[395,223]]]],[139,[[37,[396,223]]]],[[39,205,387],[[151,[[402,[39]]]]]],[[2,205,387,[57,[[57,[389]]]]],[[151,[[409,[[12,[77]],2]]]]]],[[[0,[293,225,259]],205,[57,[[57,[389]]]],387],[[37,[[410,[[0,[293,225,259]]]],133]]]],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[401,22],0,0,0,0,[[[402,[39]],[411,[133]]],151],[[57,5,[15,[138]],22,398],151],[391,[[37,[62,223]]]],[[398,57],151],0,[390,[[37,[22,362]]]],[391,[[37,[22,362]]]],[390,261],[391,261],0,0,0,0,[[],56],[[282,[78,[12]]],[[37,[278,133]]]],[[282,278,[78,[12]],22],[[37,[[170,[[99,[77]]]],133]]]],0,0,0,0,[1],[1],[[[141,[70]]]],[[[136,[70]]]],[[]],[[]],[[]],[[]],[[[136,[70]]],137],[[[141,[70]]],22],[[[141,[[0,[16,70]]]]],[[141,[[0,[16,70]]]]]],[[[136,[[0,[16,70]]]]],[[136,[[0,[16,70]]]]]],[[]],[[]],[[],[[141,[70]]]],[[],[[136,[70]]]],[[[136,[70]]]],[[[141,[[0,[29,70]]]],141],5],[[[136,[[0,[29,70]]]],136],5],[[],5],[[[141,[70]],22]],[[[136,[70]]]],[[[141,[[0,[33,70]]]],41],110],[[[136,[[0,[33,70]]]],41],110],[[[141,[139]]],[[141,[179]]]],[[]],[136,[[136,[179]]]],[[[141,[70]]],[[136,[70]]]],[[]],[[]],[[]],[[[141,[70]]],[[57,[70]]]],[[[136,[70]]],[[137,[70]]]],[[[136,[70]]],[[3,[[136,[70]],[141,[70]]]]]],[[[141,[70]]]],[[[136,[70]]]],[[[141,[70]]],22],[[[136,[70]]],22],[[[141,[70]]],22],[[[136,[70]]],2],[[],[[141,[70]]]],[[],[[136,[70]]]],[[[57,[70]]],[[141,[70]]]],[[[137,[70]]],[[136,[70]]]],[22,[[141,[70]]]],[[[141,[70]]],[[15,[70]]]],[[[136,[70]]],70],[[[141,[70]],22]],[[[141,[70]]]],[[[136,[70]],22,22]],[[[136,[70]],22,22]],[[[141,[70]],22]],[[[136,[70]],22]],[[[141,[70]],22]],[[[136,[70]],22]],[[]],[[]],[[[141,[70]],2],[[37,[133]]]],[[[141,[70]],[141,[70]]],[[37,[133]]]],[[[141,[70]],136,22,22],[[37,[133]]]],[[[141,[179]]],[[37,[[141,[139]]]]]],[[],37],[[[57,[70]]],[[37,[[141,[70]]]]]],[[[57,[70]]],[[37,[[136,[70]]]]]],[[],37],[136,[[37,[[136,[139]]]]]],[[[137,[70]]],[[37,[[136,[70]]]]]],[35,[[37,[[141,[70]],133]]]],[2,[[37,[[141,[70]],133]]]],[[],37],[[],37],[[[141,[70]],70],[[37,[133]]]],[[[141,[70]],22],[[37,[133]]]],[[],63],[[],63],[22,[[141,[70]]]],0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[[],88],[[[413,[79]]],88],[[[178,[69]]],88],[[[414,[70]]],88],[[[415,[70]]],88],[184,88],[[[416,[70]]],88],[417,88],[418,88],[419,88],[420,88],[421,88],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[413,[[0,[16,79]]]]],[[413,[[0,[16,79]]]]]],[[[178,[[0,[16,69]]]]],[[178,[[0,[16,69]]]]]],[[[414,[[0,[16,70]]]]],[[414,[[0,[16,70]]]]]],[[[415,[[0,[16,70]]]]],[[415,[[0,[16,70]]]]]],[184,184],[[[416,[[0,[16,70]]]]],[[416,[[0,[16,70]]]]]],[417,417],[418,418],[419,419],[420,420],[421,421],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],106],[[[413,[79]]],106],[[[178,[69]]],106],[[[414,[70]]],106],[[[415,[70]]],106],[184,106],[[[416,[70]]],106],[417,106],[418,106],[419,106],[420,106],[421,106],[[],417],[[128,128],5],[[[413,[79]],[413,[79]]],5],[[[178,[[0,[29,69]]]],178],5],[[[414,[[0,[29,70]]]],414],5],[[[415,[[0,[29,70]]]],415],5],[[184,184],5],[[[416,[70]],[416,[70]]],5],[[417,417],5],[[418,418],5],[[419,419],5],[[420,420],5],[[421,421],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[413,[[0,[33,79]]]],41],110],[[[178,[[0,[33,69]]]],41],110],[[[414,[[0,[33,70]]]],41],110],[[[415,[[0,[33,70]]]],41],110],[[184,41],110],[[[416,[[0,[33,70]]]],41],110],[[417,41],110],[[418,41],110],[[419,41],110],[[420,41],110],[[421,41],110],[[]],[[]],[[[15,[69]]],[[178,[69]]]],[[]],[[[15,[[27,[56]]]]],[[414,[70]]]],[[]],[[[15,[[27,[[57,[58]]]]]]],[[415,[70]]]],[[]],[[[15,[5]]],184],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],5],[[[413,[79]]],5],[[[178,[69]]],5],[[[414,[70]]],5],[[[415,[70]]],5],[184,5],[[[416,[70]]],5],[417,5],[418,5],[419,5],[420,5],[421,5],[[106,[15,[[99,[128]]]]],[[413,[79]]]],[[106,[15,[69]]],[[178,[69]]]],[[[15,[[27,[56]]]]],[[414,[70]]]],[[[15,[[27,[[57,[58]]]]]]],[[415,[70]]]],[[[15,[5]]],184],[[106,[15,[[99,[77]]]]],[[416,[70]]]],[[],417],[[106,[15,[[57,[[99,[128]]]]]]],418],[[106,[15,[[99,[77]]]]],419],[[106,[15,[[27,[[57,[58]]]]]]],420],[[106,140,[99,[128]]],421],[[77,22],[[99,[128]]]],[[[178,[69]],106],[[178,[69]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[421,140],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[[413,[79]]],[[15,[99]]]],[[[178,[69]]],15],[[[414,[70]]],[[15,[10]]]],[[[415,[70]]],15],[184,[[15,[5]]]],[420,15],[421,99],[[[416,[70]]],99],[418],[419,[[15,[99]]]],0,0,0,0,0,0,[[179,189,187],179],[[179,189,187],179],[139,422],[139,423],[179,422],[179,423],[10,[[151,[424]]]],[10,[[151,[425]]]],[139,426],[139,426],[179,426],[179,426],[179,423],[179,423],[179,423],[[179,189],[[428,[427]]]],[[179,189],423],[179,423],[[189,189],161],[[72,10],[[67,[179]]]],[[10,10],[[15,[179]]]],[[72,10,56],[[151,[[67,[179]]]]]],[[10,10],[[15,[179]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[429,429],[187,187],[430,430],[431,431],[208,208],[[]],[[]],[[]],[[]],[[]],[[431,431],19],[429,139],[187,139],0,[[],429],[[],187],[[],430],[[],431],[[429,429],5],[[187,187],5],[[430,430],5],[[431,431],5],[[208,208],5],[[],5],[[],5],[[],5],[[],5],0,[[429,41],110],[[429,41],110],[[187,41],110],[[187,41],110],[[430,41],110],[[430,41],110],[[431,41],110],[[431,41],110],[[208,41],110],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[22],[[]],[[],429],[[],187],[[],430],[[],431],[432,430],[160,430],[[]],[[],429],[[],187],[[],430],[[],431],[[]],[22,15],[[68,68],431],[429],[187],[431],[208],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[429,139],[187,139],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[429],[187],[431],[[162,22],[[169,[162]]]],[162,[[433,[162]]]],[[196,196],[[434,[196]]]],[[139,139],429],[[139,139,179],187],[[[169,[162]]],15],[[[433,[162]]],15],[[[434,[196]]],15],[187,179],[[431,431],[[15,[19]]]],[[22,22],[[15,[434]]]],[[22,22],[[15,[434]]]],0,[[[169,[162]]]],[[[433,[162]]]],[[[434,[196]]]],[[]],[429],[187],[430],[431],[430,432],[430,160],[[]],[429],[187],[430],[431],[[]],[[]],[[]],[[]],[[]],[[]],[[],56],[[],56],[[],56],[[],56],[[],22],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[[435,435]],[[436,436]],[[437,437]],[[438,438]],[[439,439]],[[440,440]],[[441,441]],[[442,442]],[[443,443]],[[444,444]],[[445,445]],[[435,435]],[[436,436]],[[437,437]],[[438,438]],[[439,439]],[[440,440]],[[441,441]],[[442,442]],[[443,443]],[[444,444]],[[445,445]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[435,435],[436,436],[437,437],[438,438],[439,439],[440,440],[441,441],[442,442],[443,443],[444,444],[446,446],[447,447],[448,448],[445,445],[449,449],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],435],[[],436],[[],437],[[],438],[[],439],[[],440],[[],441],[[],442],[[],443],[[],444],[[],446],[[],447],[[],448],[[],445],[[],449],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],435],[[],436],[[],437],[[],438],[[],439],[[],440],[[],441],[[],442],[[],443],[[],444],[[],446],[[],447],[[],448],[[],445],[[],449],[[]],[58,435],[432,436],[202,437],[62,438],[140,439],[450,440],[139,441],[179,442],[160,443],[161,444],[430,446],[429,447],[187,448],[68,445],[431,449],0,0,0,0,0,0,[[435,22]],[[436,22]],[[437,22]],[[438,22]],[[439,22]],[[440,22]],[[441,22]],[[442,22]],[[443,22]],[[444,22]],[[446,22]],[[447,22]],[[448,22]],[[445,22]],[[449,22]],[[435,22]],[[436,22]],[[437,22]],[[438,22]],[[439,22]],[[440,22]],[[441,22]],[[442,22]],[[443,22]],[[444,22]],[[446,22]],[[447,22]],[[448,22]],[[445,22]],[[449,22]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[435,58],[436,432],[437,202],[438,62],[439,140],[440,450],[441,139],[442,179],[443,160],[444,161],[445,68],[[435,435],435],[[436,436],436],[[437,437],437],[[438,438],438],[[439,439],439],[[440,440],440],[[441,441],441],[[442,442],442],[[443,443],443],[[444,444],444],[[445,445],445],[435,58],[436,432],[437,202],[438,62],[439,140],[440,450],[441,139],[442,179],[443,160],[444,161],[445,68],[[435,435],435],[[436,436],436],[[437,437],437],[[438,438],438],[[439,439],439],[[440,440],440],[[441,441],441],[[442,442],442],[[443,443],443],[[444,444],444],[[445,445],445],0,[[],435],[[],436],[[],437],[[],438],[[],439],[[],440],[[],441],[[],442],[[],443],[[],444],[[],445],[[],435],[[],436],[[],437],[[],438],[[],439],[[],440],[[],441],[[],442],[[],443],[[],444],[[],445],[[]],[[435,62,435],435],[[436,202,436],436],[[437,432,437],437],[[438,58,438],438],[[439,62,439],439],[[440,202,440],440],[[441,432,441],441],[[442,58,442],442],[[443,432,443],443],[[444,58,444],444],[[446,202,446],446],[[447,58,447],447],[[448,58,448],448],[[445,58,445],445],[[449,58,449],449],[435,58],[436,432],[437,202],[438,62],[439,140],[440,450],[441,139],[442,179],[443,160],[444,161],[445,68],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],0,0,0,0,[451,[[57,[58]]]],[[451,57]],[451,56]],"p":[[3,"Private"],[8,"Iterator"],[4,"Either"],[8,"FnMut"],[15,"bool"],[8,"AsMut"],[3,"Path"],[3,"CStr"],[3,"OsStr"],[15,"str"],[3,"Pin"],[8,"AsRef"],[3,"UncasedStr"],[8,"Error"],[4,"Option"],[8,"Clone"],[3,"AHashMap"],[8,"Ord"],[4,"Ordering"],[8,"FromIterator"],[8,"BufRead"],[15,"usize"],[3,"RandomState"],[8,"Deref"],[8,"DerefMut"],[8,"FnOnce"],[8,"Into"],[15,"char"],[8,"PartialEq"],[8,"Eq"],[8,"Hash"],[8,"BuildHasher"],[8,"Debug"],[8,"Extend"],[8,"IntoIterator"],[8,"Copy"],[4,"Result"],[3,"Error"],[8,"Write"],[8,"Display"],[3,"Formatter"],[3,"Error"],[3,"HashMap"],[8,"Sized"],[8,"Borrow"],[3,"IntoKeys"],[3,"IntoValues"],[8,"Default"],[8,"ExactSizeIterator"],[8,"DoubleEndedIterator"],[8,"PartialOrd"],[3,"Context"],[4,"Poll"],[3,"Demand"],[8,"Read"],[3,"String"],[3,"Vec"],[15,"u8"],[8,"VarInt"],[8,"Seek"],[4,"SeekFrom"],[15,"u64"],[3,"TypeId"],[3,"Arguments"],[8,"NativeArithmetics"],[8,"Add"],[3,"PrimitiveArray"],[15,"i128"],[8,"NativeType"],[8,"Offset"],[3,"MutableUtf8Array"],[3,"Utf8Array"],[3,"MutablePrimitiveArray"],[8,"Fn"],[3,"BooleanArray"],[3,"BinaryArray"],[8,"Array"],[3,"Arc"],[8,"DictionaryKey"],[3,"DictionaryArray"],[3,"FixedSizeBinaryArray"],[3,"FixedSizeListArray"],[3,"ListArray"],[3,"MapArray"],[3,"NullArray"],[3,"StructArray"],[3,"UnionArray"],[8,"Any"],[3,"MutableBinaryValuesArray"],[3,"MutableBinaryArray"],[3,"MutableBooleanArray"],[8,"MutableArray"],[3,"MutableDictionaryArray"],[3,"MutableFixedSizeBinaryArray"],[3,"MutableFixedSizeListArray"],[3,"MutableListArray"],[3,"MutableStructArray"],[3,"MutableUtf8ValuesArray"],[3,"Box"],[8,"CheckedAdd"],[8,"CheckedDiv"],[8,"CheckedMul"],[8,"CheckedRem"],[8,"CheckedSub"],[3,"ArrayValuesIter"],[4,"DataType"],[8,"Div"],[8,"NumCast"],[8,"TrustedLen"],[6,"Result"],[3,"GrowableBinary"],[3,"GrowableBoolean"],[15,"never"],[3,"GrowableDictionary"],[3,"GrowableFixedSizeBinary"],[3,"GrowableFixedSizeList"],[3,"GrowableList"],[3,"GrowableMap"],[3,"GrowableNull"],[3,"GrowablePrimitive"],[3,"GrowableStruct"],[3,"GrowableUnion"],[3,"GrowableUtf8"],[3,"Field"],[3,"BitmapIter"],[4,"ZipValidity"],[6,"BinaryValueIter"],[8,"Scalar"],[3,"ChunksExact"],[6,"ListValuesIter"],[3,"Iter"],[6,"Utf8ValuesIter"],[4,"Error"],[6,"HashedMap"],[8,"Mul"],[3,"OffsetsBuffer"],[3,"Buffer"],[3,"Bitmap"],[15,"i32"],[15,"i8"],[3,"Offsets"],[3,"MutableBitmap"],[8,"OverflowingAdd"],[8,"OverflowingMul"],[8,"OverflowingSub"],[8,"Rem"],[8,"SaturatingAdd"],[8,"SaturatingMul"],[8,"SaturatingSub"],[8,"Sub"],[6,"Result"],[8,"TryExtend"],[8,"TryExtendFromSelf"],[8,"TryPush"],[8,"WrappingAdd"],[8,"WrappingMul"],[8,"WrappingSub"],[8,"Growable"],[6,"DynComparator"],[15,"f32"],[15,"f64"],[8,"BitChunk"],[3,"BitChunks"],[3,"IntoIter"],[3,"SlicesIterator"],[3,"ZipValidityIter"],[3,"BitChunksExact"],[3,"BitChunksExactMut"],[3,"BitChunkIter"],[3,"Chunk"],[8,"Simd"],[8,"Sum"],[8,"CheckedNeg"],[8,"One"],[8,"Neg"],[8,"Pow"],[8,"WrappingNeg"],[3,"PrimitiveScalar"],[15,"i64"],[8,"BitAnd"],[8,"Not"],[8,"BitOr"],[8,"BitXor"],[3,"BooleanScalar"],[8,"FromLexical"],[3,"CastOptions"],[3,"months_days_ns"],[8,"Float"],[4,"TimeUnit"],[8,"Simd8"],[6,"Filter"],[3,"SortOptions"],[3,"MergeSortSlices"],[6,"MergeSlice"],[3,"SortColumn"],[8,"Index"],[3,"Row"],[3,"SortField"],[3,"RowConverter"],[3,"Rows"],[3,"RowsIter"],[15,"u32"],[4,"PhysicalType"],[4,"IntegerType"],[3,"Schema"],[4,"UnionMode"],[4,"IntervalUnit"],[4,"PrimitiveType"],[6,"Metadata"],[4,"OutOfSpecKind"],[3,"Utf8Error"],[3,"Error"],[3,"Utf8Error"],[4,"Error"],[4,"Error"],[3,"ParseError"],[3,"CSVError"],[3,"FromUtf8Error"],[3,"Error"],[4,"Error"],[3,"TryReserveError"],[3,"Error"],[4,"ParquetError"],[4,"Error"],[8,"Send"],[8,"Sync"],[3,"ArrowSchema"],[3,"ArrowArray"],[3,"ArrowArrayStream"],[3,"ArrowArrayStreamReader"],[3,"Block"],[3,"Record"],[3,"Reader"],[3,"FileMetadata"],[4,"Schema"],[6,"BoxSerializer"],[3,"ByteRecord"],[3,"ReaderBuilder"],[3,"Reader"],[3,"ByteRecordsIter"],[8,"Deserialize"],[8,"DeserializeOwned"],[3,"DeserializeRecordsIter"],[3,"Global"],[3,"StringRecord"],[3,"File"],[3,"ByteRecordsIntoIter"],[3,"DeserializeRecordsIntoIter"],[3,"ByteRecordIter"],[3,"StringRecordsIntoIter"],[3,"Position"],[3,"Range"],[3,"StringRecordsIter"],[4,"Terminator"],[4,"Trim"],[3,"ByteRecord"],[3,"AsyncReaderBuilder"],[8,"AsyncRead"],[8,"Unpin"],[3,"AsyncReader"],[8,"Future"],[3,"ByteRecordsStream"],[3,"AsyncDeserializer"],[3,"StringRecord"],[3,"ByteRecordsIntoStream"],[3,"ByteRecordIter"],[4,"ErrorKind"],[3,"StringRecordsIntoStream"],[3,"Position"],[3,"StringRecordsStream"],[8,"AsyncSeek"],[4,"Terminator"],[4,"Trim"],[3,"SerializeOptions"],[8,"StreamingIterator"],[3,"FlightData"],[3,"IpcSchema"],[6,"Dictionaries"],[3,"WriteOptions"],[3,"SchemaResult"],[3,"IpcField"],[3,"FileMetadata"],[3,"StreamMetadata"],[3,"FileReader"],[3,"StreamReader"],[4,"StreamState"],[3,"FileStream"],[3,"AsyncStreamReader"],[4,"Compression"],[3,"Record"],[3,"StreamWriter"],[3,"FileWriter"],[8,"AsyncWrite"],[3,"FileSink"],[3,"StreamSink"],[4,"Value"],[3,"Convert"],[3,"Empty"],[8,"FallibleStreamingIterator"],[3,"Filter"],[3,"Fuse"],[3,"Map"],[3,"MapRef"],[3,"MapErr"],[3,"Skip"],[3,"SkipWhile"],[3,"Take"],[3,"TakeWhile"],[3,"RecordSerializer"],[3,"Serializer"],[8,"DoubleEndedFallibleStreamingIterator"],[3,"ArrowJsonColumn"],[8,"Deserializer"],[3,"ArrowJson"],[3,"ArrowJsonSchema"],[3,"ArrowJsonField"],[3,"ArrowJsonFieldDictionary"],[3,"IntegerType"],[3,"ArrowJsonBatch"],[3,"ArrowJsonDictionaryBatch"],[8,"Serializer"],[4,"Value"],[3,"FileReader"],[3,"Serializer"],[3,"FileWriter"],[4,"AnyColumnBuffer"],[3,"ColumnarBuffer"],[4,"AnyColumnView"],[3,"ColumnDescription"],[4,"AnyColumnViewMut"],[3,"Prepared"],[3,"Writer"],[3,"Column"],[3,"Footer"],[8,"Index"],[3,"FileMetaData"],[4,"State"],[8,"PageIterator"],[3,"Decompressor"],[3,"BasicDecompressor"],[3,"ReadColumnIterator"],[3,"ColumnChunkMetaData"],[3,"ColumnDescriptor"],[3,"RowGroupMetaData"],[4,"DataPageHeader"],[4,"ParquetTimeUnit"],[4,"PrimitiveLogicalType"],[4,"GroupLogicalType"],[4,"PrimitiveConvertedType"],[4,"InitNested"],[3,"ColumnChunk"],[8,"Pages"],[3,"PrimitiveType"],[6,"ArrayIter"],[4,"Compression"],[3,"NestedState"],[4,"CompressedPage"],[4,"Page"],[3,"TryFromIntError"],[4,"Error"],[3,"TryFromSliceError"],[4,"Error"],[4,"TimeUnit"],[3,"ColumnIterator"],[6,"PageFilter"],[3,"PageReader"],[3,"ColumnMetaData"],[3,"Descriptor"],[4,"ParquetType"],[6,"NestedArrayIter"],[3,"StructIterator"],[3,"FilteredPage"],[3,"FileReader"],[3,"RowGroupReader"],[3,"RowGroupDeserializer"],[3,"PageMetaData"],[4,"ParquetPhysicalType"],[3,"PageLocation"],[8,"Statistics"],[4,"LogicalType"],[3,"Interval"],[4,"FieldPageStatistics"],[3,"ColumnPageStatistics"],[3,"Statistics"],[3,"Compressor"],[3,"DynStreamingIterator"],[3,"WriteOptions"],[3,"DynIter"],[4,"Encoding"],[3,"KeyValue"],[3,"ThriftFileMetaData"],[3,"SchemaDescriptor"],[4,"CompressionOptions"],[3,"BrotliLevel"],[3,"GzipLevel"],[3,"ZstdLevel"],[3,"FieldInfo"],[4,"Version"],[4,"Nested"],[4,"ColumnOrder"],[3,"CompressedDataPage"],[3,"FileWriter"],[4,"Repetition"],[4,"GroupConvertedType"],[3,"SchemaElement"],[3,"RowGroup"],[4,"ColumnOrder"],[4,"EncryptionAlgorithm"],[3,"RowGroupIterator"],[3,"FileSink"],[6,"RowGroupIter"],[3,"Encoding"],[3,"DictionaryScalar"],[3,"Utf8Scalar"],[3,"BinaryScalar"],[3,"ListScalar"],[3,"NullScalar"],[3,"StructScalar"],[3,"FixedSizeListScalar"],[3,"FixedSizeBinaryScalar"],[3,"UnionScalar"],[3,"NaiveDate"],[3,"NaiveDateTime"],[3,"FixedOffset"],[4,"Tz"],[3,"NaiveTime"],[8,"TimeZone"],[3,"DateTime"],[3,"days_ms"],[3,"f16"],[3,"i256"],[15,"u16"],[3,"BitChunkOnes"],[3,"IndexRange"],[3,"u8x64"],[3,"u16x32"],[3,"u32x16"],[3,"u64x8"],[3,"i8x64"],[3,"i16x32"],[3,"i32x16"],[3,"i64x8"],[3,"f32x16"],[3,"f64x8"],[3,"i128x8"],[3,"f16x32"],[3,"days_msx8"],[3,"months_days_nsx8"],[3,"i256x8"],[15,"i16"],[8,"ToLexical"],[8,"GenericBinaryArray"],[8,"BitChunkIterExact"],[8,"SimdOrd"],[8,"Sum"],[8,"ArrayAdd"],[8,"ArrayCheckedAdd"],[8,"ArrayCheckedDiv"],[8,"ArrayCheckedMul"],[8,"ArrayCheckedRem"],[8,"ArrayCheckedSub"],[8,"ArrayDiv"],[8,"ArrayMul"],[8,"ArrayOverflowingAdd"],[8,"ArrayOverflowingMul"],[8,"ArrayOverflowingSub"],[8,"ArrayRem"],[8,"ArraySaturatingAdd"],[8,"ArraySaturatingMul"],[8,"ArraySaturatingSub"],[8,"ArraySub"],[8,"ArrayWrappingAdd"],[8,"ArrayWrappingMul"],[8,"ArrayWrappingSub"],[8,"Simd8PartialEq"],[8,"Simd8Lanes"],[8,"Simd8PartialOrd"],[13,"InvalidBuffer"],[13,"InvalidBuffersLength"],[13,"InvalidBitmap"],[13,"InvalidId"],[13,"InvalidIdDataType"],[8,"MutStreamingIterator"],[13,"GroupType"],[13,"Time"],[13,"Timestamp"],[8,"NativeSimd"],[8,"FromMaskChunk"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
