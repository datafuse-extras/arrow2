searchState.loadedDescShard("arrow2", 0, "Welcome to arrow2’s documentation. Thanks for checking …\nA <code>HashMap</code> using <code>RandomState</code> to hash the items. (Requires …\nThe enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …\nA value of type <code>L</code>.\nA value of type <code>R</code>.\nContains the <code>Array</code> and <code>MutableArray</code> trait objects …\nConvert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.\nConvert <code>Pin&lt;&amp;mut Either&lt;L, R&gt;&gt;</code> to …\nConvert <code>Pin&lt;&amp;Either&lt;L, R&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;L&gt;, Pin&lt;&amp;R&gt;&gt;</code>, …\nConvert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.\ncontains <code>Bitmap</code> and <code>MutableBitmap</code>, containers of <code>bool</code>.\nContains <code>Buffer</code>, an immutable container for all Arrow …\nContains <code>Chunk</code>, a container of <code>Array</code> where every array has …\ncontains a wide range of compute operations (e.g. …\nContains all metadata, such as <code>PhysicalType</code>, <code>DataType</code>, …\nApply one of two functions depending on contents, unifying …\nConvert the contained value into <code>T</code>\nLike <code>either</code>, but provide some context to whichever of the …\nDefines <code>Error</code>, representing all errors returned by this …\nReturns the left value\nReturns the right value\nFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.\nFactor out a homogeneous type from an either of pairs.\nConverts an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>…\nBorrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>s\nMutably borrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> …\nFactors out <code>None</code> from an <code>Either</code> of <code>Option</code>.\nFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.\nFactor out a homogeneous type from an either of pairs.\ncontains FFI bindings to import and export <code>Array</code> via Arrow…\nConvert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nExamples\nThis crates a hashmap from the provided iterator using …\nReturns a reference to the value corresponding to the key.\nReturns the key-value pair corresponding to the supplied …\nReturns a mutable reference to the value corresponding to …\nReturns a reference to the value corresponding to the …\nInserts a key-value pair into the map.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtract the value of an either over two equivalent types.\nConvert the inner value to an iterator.\nCreates a consuming iterator visiting all the keys in …\nCreates a consuming iterator visiting all the values in …\nContains modules to interface with other formats such as …\nReturn true if the value is the <code>Left</code> variant.\nReturn true if the value is the <code>Right</code> variant.\nBorrow the inner value as an iterator.\nMutably borrow the inner value as an iterator.\nConvert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.\nApply the function <code>f</code> on the value in the <code>Left</code> variant if …\nReturn left value or given value\nReturn left or a default\nReturns left value or computes it from a closure\nMap <code>f</code> over the contained value and return the result in the\nApply the functions <code>f</code> and <code>g</code> to the <code>Left</code> and <code>Right</code> variants …\nSimilar to <code>map_either</code>, with an added context <code>ctx</code> …\nApply the function <code>f</code> on the value in the <code>Left</code> variant if …\nApply the function <code>f</code> on the value in the <code>Right</code> variant if …\nMemory maps regions defined on the IPC format into <code>Array</code>.\nThis crates a hashmap using RandomState::new which obtains …\nContains the declaration of <code>Offset</code>\nRemoves a key from the map, returning the value at the key …\nConvert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.\nApply the function <code>f</code> on the value in the <code>Right</code> variant if …\nReturn right value or given value\nReturn right or a default\nReturns right value or computes it from a closure\ncontains the <code>Scalar</code> trait object representing individual …\nConversion methods for dates and times.\nDeclares <code>TrustedLen</code>.\nSealed traits and implementations to handle all <em>physical </em>…\nReturns the left value\nReturns the right value\nMisc utilities used in different places in the crate.\nThis crates a hashmap with the specified capacity using …\nMatch <code>PrimitiveType</code> to standard Rust types\nA trait representing an immutable Arrow array. Arrow …\nIterator of values of an <code>ArrayAccessor</code>.\nTrait providing bi-directional conversion between arrow2 …\nA <code>BinaryArray</code> is Arrow’s semantically equivalent of an …\nIterator of values of an <code>BinaryArray</code>.\nA <code>BooleanArray</code> is Arrow’s semantically equivalent of an …\nA type definition <code>PrimitiveArray</code> for <code>days_ms</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>days_ms</code>\nAn <code>Array</code> whose values are stored as indices. This <code>Array</code> is …\nTrait denoting <code>NativeType</code>s that can be used as keys of a …\nThe Arrow’s equivalent to an immutable …\nThe Arrow’s equivalent to an immutable …\nA type definition <code>PrimitiveArray</code> for <code>f16</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>f16</code>\nA type definition <code>PrimitiveArray</code> for <code>f32</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>f32</code>\nA type definition <code>PrimitiveArray</code> for <code>f64</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>f64</code>\nTrait that <code>BinaryArray</code> and <code>Utf8Array</code> implement for the …\nA type definition <code>PrimitiveArray</code> for <code>i128</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>i128</code>\nA type definition <code>PrimitiveArray</code> for <code>i16</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>i16</code>\nA type definition <code>PrimitiveArray</code> for <code>i256</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>i256</code>\nA type definition <code>PrimitiveArray</code> for <code>i32</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>i32</code>\nA type definition <code>PrimitiveArray</code> for <code>i64</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>i64</code>\nA type definition <code>PrimitiveArray</code> for <code>i8</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>i8</code>\nThe corresponding <code>IntegerType</code> of this key\nAn <code>Array</code> semantically equivalent to …\nIterator of values of a <code>ListArray</code>.\nAn array representing a (key, value), both of arbitrary …\nA type definition <code>PrimitiveArray</code> for <code>months_days_ns</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>months_days_ns</code>\nA trait describing a mutable array; i.e. an array whose …\nThe Arrow’s equivalent to <code>Vec&lt;Option&lt;Vec&lt;u8&gt;&gt;&gt;</code>. …\nA <code>MutableArray</code> that builds a <code>BinaryArray</code>. It differs from …\nThe Arrow’s equivalent to <code>Vec&lt;Option&lt;bool&gt;&gt;</code>, but with …\nA mutable, strong-typed version of <code>DictionaryArray</code>.\nThe Arrow’s equivalent to a mutable …\nThe mutable version of <code>FixedSizeListArray</code>.\nThe mutable version of <code>ListArray</code>.\nA distinct type to disambiguate clashing methods\nThe Arrow’s equivalent to <code>Vec&lt;Option&lt;T&gt;&gt;</code> where <code>T</code> is …\nConverting a <code>MutableStructArray</code> into a <code>StructArray</code> is <code>O(1)</code>.\nA <code>MutableArray</code> that builds a <code>Utf8Array</code>. It differs from …\nA <code>MutableArray</code> that builds a <code>Utf8Array</code>. It differs from …\nThe concrete <code>Array</code> of <code>DataType::Null</code>.\nA <code>PrimitiveArray</code> is Arrow’s semantically equivalent of …\nA trait describing the ability of a struct to receive new …\nA <code>StructArray</code> is a nested <code>Array</code> with an optional validity …\nA trait describing the ability of a struct to create …\nA trait describing the ability of a struct to extend from …\nA trait describing the ability of a struct to receive new …\nA type definition <code>PrimitiveArray</code> for <code>u16</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>u16</code>\nA type definition <code>PrimitiveArray</code> for <code>u32</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>u32</code>\nA type definition <code>PrimitiveArray</code> for <code>u64</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>u64</code>\nA type definition <code>PrimitiveArray</code> for <code>u8</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>u8</code>\n<code>UnionArray</code> represents an array whose each slot can contain …\nA <code>Utf8Array</code> is arrow’s semantic equivalent of an …\nIterator of values of an <code>Utf8Array</code>.\nIf the key type always can be converted to <code>usize</code>.\nIf the key type always can be converted to <code>usize</code>.\nApplies a function <code>f</code> to the validity of this array.\nApplies a function <code>f</code> to the validity of this array.\nApplies a function <code>f</code> to the validity of this array.\nApplies a function <code>f</code> to the validity of this array.\nApplies a function <code>f</code> to the values of this array, cloning …\nApplies a function <code>f</code> to the values of this array, cloning …\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nConverts itself to a reference of <code>Any</code>, which enables …\nConvert to <code>Any</code>, to enable dynamic casting.\nConverts itself to a mutable reference of <code>Any</code>, which …\nConvert itself to an (immutable) atomically reference …\nConvert itself to an (immutable) <code>Array</code>.\nConvert to mutable <code>Any</code>, to enable dynamic casting.\nRepresents this key as a <code>usize</code>.\nRepresents this key as a <code>usize</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nReturns the capacity in number of items\nReturns the capacity of this array\nReturns the capacity of this <code>MutablePrimitiveArray</code>.\nReserves <code>additional</code> elements and <code>additional_values</code> on the …\nReturns the capacity in number of items\nClones a dynamic <code>Array</code>.\nThe <code>DataType</code> of the <code>Array</code>. In combination with …\nThe <code>DataType</code> of the array.\nReturns the <code>DataType</code> of this array.\nReturns the arrays’ <code>DataType</code>.\nReturns the <code>DataType</code> of this <code>DictionaryArray</code>\nReturns the arrays’ <code>DataType</code>.\nReturns the <code>DataType</code> of this array.\nReturns the default <code>DataType</code> of this container: …\nReturns the default <code>DataType</code>, <code>DataType::Binary</code> or …\nReturns the default <code>DataType</code> of this container: …\nReturns a default <code>DataType</code> of this array, which depends on …\nReturns a <code>DataType</code> consistent with <code>FixedSizeListArray</code>.\nReturns a default <code>DataType</code>: inner field is named “item”…\nLogically compares two <code>Array</code>s. Two arrays are logically …\nExtends the <code>MutablePrimitiveArray</code> with a constant\nExtend with a fallible iterator\nExtend with a fallible iterator\nExtend with a fallible iterator\nExtend with a fallible iterator\nExtends the <code>MutablePrimitiveArray</code> from a slice\nExtends the <code>MutableBinaryValuesArray</code> from a <code>TrustedLen</code>\nExtends the <code>MutableBinaryArray</code> from an iterator of …\nExtends the <code>MutableBooleanArray</code> from an iterator of …\nExtends the <code>MutablePrimitiveArray</code> from an iterator of …\nExtends the <code>MutableUtf8Array</code> from an iterator of trusted …\nExtends the <code>MutableUtf8ValuesArray</code> from a <code>TrustedLen</code>\nExtends <code>MutableBinaryValuesArray</code> from an iterator of …\nExtends the <code>MutableBinaryArray</code> from an iterator of …\nExtends the <code>MutableBooleanArray</code> from an iterator of …\nExtends the <code>MutablePrimitiveArray</code> from an iterator of …\nExtends <code>MutableUtf8Array</code> from an iterator of trusted len.\nExtends <code>MutableUtf8ValuesArray</code> from an iterator of trusted …\nExtends the <code>MutableBinaryArray</code> from an iterator of trusted …\nExtends the <code>MutableBooleanArray</code> from an iterator of values …\nExtends the <code>MutablePrimitiveArray</code> from an iterator of …\nExtends the <code>MutableUtf8Array</code> from an iterator of values of …\nExtends the <code>MutableBinaryArray</code> from an <code>iterator</code> of values …\nExtends the <code>MutableBooleanArray</code> from an iterator of values …\nExtends the <code>MutablePrimitiveArray</code> from an iterator of …\nExtends the <code>MutableUtf8Array</code> from an iterator of values of …\nExtends the <code>MutableBinaryArray</code> from an iterator of values. …\nExtends the <code>MutableUtf8Array</code> from an iterator of values. …\nReturns the field (guaranteed to be a <code>Struct</code>)\nReturns the fields of this <code>StructArray</code>.\nThe fields.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>MutableBinaryArray</code> from a slice of optional …\nReturns the argument unchanged.\nCreates a new <code>BinaryArray</code> from a slice of optional <code>&amp;[u8]</code>.\nCreates a new <code>MutableBooleanArray</code> out of a slice of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>MutableFixedSizeBinaryArray</code> from a slice of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>FixedSizeBinaryArray</code> from a slice of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>MutableUtf8Array</code> from a slice of optional …\nReturns the argument unchanged.\nReturns a new <code>Utf8Array</code> from a slice of <code>&amp;str</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert an <code>arrow_data::ArrayData</code> to arrow2 <code>Array</code>\nCreate this <code>Array</code> from [<code>ArrayData</code>]\nCreate this array from <code>ArrayData</code>\nCreates a <code>[PrimitiveArray]</code> from its internal …\nCreates a <code>[BooleanArray]</code> from its internal representation. …\nCreates a <code>[PrimitiveArray]</code> from its internal …\nCreates a <code>FixedSizeBinaryArray</code> from an iterator of …\nCreates a new <code>MutableBinaryArray</code> from a <code>Iterator</code> of <code>&amp;[u8]</code>.\nReturns a new <code>BinaryArray</code> from a <code>Iterator</code> of <code>&amp;[u8]</code>.\nCreates a new <code>MutableUtf8Array</code> from a <code>Iterator</code> of <code>&amp;str</code>.\nCreates a new <code>Utf8Array</code> from a <code>Iterator</code> of <code>&amp;str</code>.\nCreates a new <code>BinaryArray</code> from slices of <code>&amp;[u8]</code>.\nCreates a new <code>MutableBooleanArray</code> from a slice of <code>bool</code>.\nCreates a new <code>BooleanArray</code> from a slice of <code>bool</code>.\nCreates a <code>FixedSizeBinaryArray</code> from a slice of arrays of …\nCreates a <code>MutablePrimitiveArray</code> from a slice of values.\nCreates a (non-null) <code>PrimitiveArray</code> from a slice of values.\nReturns a <code>Utf8Array</code> from a slice of <code>&amp;str</code>.\nCreates a <code>MutableBinaryValuesArray</code> from a <code>TrustedLen</code>\nCreates a <code>MutableBinaryArray</code> from an iterator of trusted …\nCreates a <code>BinaryArray</code> from a <code>TrustedLen</code>\nCreates a <code>BooleanArray</code> from a <code>TrustedLen</code>.\nCreates a <code>BooleanArray</code> from a <code>TrustedLen</code>.\nCreates a <code>MutablePrimitiveArray</code> from a <code>TrustedLen</code>.\nCreates a <code>PrimitiveArray</code> from a <code>TrustedLen</code> of optional …\nCreates a <code>MutableUtf8Array</code> from an iterator of trusted …\nCreates a <code>MutableUtf8ValuesArray</code> from a <code>TrustedLen</code>\nCreates a <code>Utf8Array</code> from an iterator of trusted length.\nReturns a new <code>MutableBinaryValuesArray</code> from an iterator of …\nCreates a <code>MutableBinaryArray</code> from an iterator of trusted …\nCreates a <code>BinaryArray</code> from an iterator of trusted length.\nCreates a <code>BooleanArray</code> from an iterator of trusted length. …\nCreates a <code>BooleanArray</code> from an iterator of trusted length. …\nCreates a <code>MutablePrimitiveArray</code> from an iterator of …\nCreates a <code>PrimitiveArray</code> from an iterator of optional …\nCreates a <code>MutableUtf8Array</code> from an iterator of trusted …\nReturns a new <code>MutableUtf8ValuesArray</code> from an iterator of …\nCreates a <code>Utf8Array</code> from an iterator of trusted length.\nCreates a new <code>BinaryArray</code> from a <code>TrustedLen</code> of <code>&amp;[u8]</code>.\nReturns a <code>BinaryArray</code> from an iterator of trusted length.\nCreates a new <code>MutableBooleanArray</code> from an <code>TrustedLen</code> of …\nCreates a new <code>BooleanArray</code> from an <code>TrustedLen</code> of <code>bool</code>.\nCreates a new <code>MutablePrimitiveArray</code> out an iterator over …\nCreates a (non-null) <code>PrimitiveArray</code> from a <code>TrustedLen</code> of …\nCreates a new <code>MutableUtf8Array</code> from a <code>TrustedLen</code> of <code>&amp;str</code>.\nReturns a (non-null) <code>Utf8Array</code> created from a <code>TrustedLen</code> …\nCreates a new <code>BinaryArray</code> from a <code>TrustedLen</code> of <code>&amp;[u8]</code>.\nCreates a new <code>MutableBooleanArray</code> from an <code>TrustedLen</code> of …\nCreates a new <code>BooleanArray</code> from an <code>TrustedLen</code> of <code>bool</code>. Use …\nCreates a new <code>MutablePrimitiveArray</code> from an iterator over …\nCreates a new <code>PrimitiveArray</code> from an iterator over values\nCreates a <code>MutableUtf8Array</code> from an iterator of trusted …\nCreates an empty <code>MutableDictionaryArray</code> preloaded with a …\nCreates a (non-null) <code>PrimitiveArray</code> from an iterator of …\nCreates a (non-null) <code>MutablePrimitiveArray</code> from a vector …\nCreates a (non-null) <code>PrimitiveArray</code> from a vector of …\nReturns the element at index <code>i</code> or <code>None</code> if it is null\nReturns the element at index <code>i</code> or <code>None</code> if it is null\nReturns the element at index <code>i</code> or <code>None</code> if it is null\nReturns the element at index <code>i</code> or <code>None</code> if it is null\nReturns the element at index <code>i</code> or <code>None</code> if it is null\nReturns the element at index <code>i</code> or <code>None</code> if it is null\nReturns a the inner <code>Field</code>\nReturns a the inner <code>DataType</code>\nReturns a function that writes the element of <code>array</code> at …\nReturns the fields the <code>DataType::Struct</code>.\nReturns all fields from <code>DataType::Union</code>.\nReturns an option of a mutable reference to the values of …\nReturns a function that writes the value of the element of …\nContains the trait <code>Growable</code> and corresponding concreate …\nReturns the index and slot of the field to select from …\nReturns the index and slot of the field to select from …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts itself into an <code>Array</code>.\nConverts itself into an <code>Array</code>.\nconverts itself into <code>Arc&lt;dyn Array&gt;</code>\nConverts itself into an <code>Array</code>.\nConverts itself into an <code>Array</code>.\nConverts itself into an <code>Array</code>.\nConverts itself into an <code>Array</code>.\nconverts itself into <code>Box&lt;dyn Array&gt;</code>\nconverts itself into <code>Box&lt;dyn Array&gt;</code>\nDeconstructs the <code>StructArray</code> into its individual …\nExtract the low-end APIs from the <code>MutableUtf8Array</code>.\nCreates an empty <code>MutableDictionaryArray</code> retaining the same …\nExtract the low-end APIs from the <code>MutableBinaryValuesArray</code>.\nReturns its internal representation\nReturns its internal representation\nExtract the low-end APIs from the <code>MutablePrimitiveArray</code>.\nReturns its internal representation\nExtract the low-end APIs from the <code>MutableStructArray</code>.\nExtract the low-end APIs from the <code>MutableUtf8ValuesArray</code>.\nReturns its internal representation\nTry to convert this <code>BinaryArray</code> to a <code>MutableBinaryArray</code>\nTry to convert this <code>BooleanArray</code> to a <code>MutableBooleanArray</code>\nTry to convert this <code>PrimitiveArray</code> to a …\nTry to convert this <code>Utf8Array</code> to a <code>MutableUtf8Array</code>\nwhether the array is empty\nWhether the array is empty.\nReturns whether slot <code>i</code> is null.\nReturns whether slot <code>i</code> is null.\nReturns whether the values of this <code>DictionaryArray</code> are …\nReturns whether the <code>DataType::Union</code> is sparse or not.\nReturns whether slot <code>i</code> is valid.\nWhether <code>index</code> is valid / set.\nReturns an iterator of <code>&amp;[u8]</code>\nReturns an iterator of <code>Option&lt;&amp;[u8]&gt;</code>\nReturns an iterator of <code>Option&lt;&amp;[u8]&gt;</code> over every element of …\nReturns an iterator over the optional values of this …\nReturns an iterator over the optional values of this …\nReturns an iterator of <code>Option&lt;Box&lt;dyn Scalar&gt;&gt;</code>.\nconstructs a new iterator\nconstructs a new iterator\nReturns an iterator of <code>Option&lt;Box&lt;dyn Array&gt;&gt;</code>\nReturns an iterator of <code>Option&lt;Box&lt;dyn Array&gt;&gt;</code>\nReturns an iterator of <code>Option&lt;Box&lt;dyn Array&gt;&gt;</code>\nReturns an iterator over <code>Option&lt;T&gt;</code>\nReturns an iterator over the values and validity, …\nReturns an iterator of <code>Option&lt;Box&lt;dyn Array&gt;&gt;</code>\nconstructs a new iterator\nReturns an iterator of <code>Option&lt;&amp;str&gt;</code>\nReturns an iterator of <code>&amp;str</code>\nReturns an iterator of <code>Option&lt;&amp;str&gt;</code>\nReturns an iterator over the the optional values of  …\nReturns iterator over the values of …\nReturns the keys’ value of the <code>DictionaryArray</code> as <code>usize</code>\nReturns the dictionary keys\nReturns the keys of the <code>DictionaryArray</code>. These keys can be …\nReturns an iterator of the keys’ of the <code>DictionaryArray</code> …\nReturns an iterator of the keys’ values of the …\nThe length of the <code>Array</code>. Every array has a length …\nThe length of the array.\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nThe length of this array\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nThe values as a mutable reference\nThe values\nThe mutable values\nReturns an empty <code>MutableBinaryValuesArray</code>.\nCreates a new empty <code>MutableBinaryArray</code>.\nAlias for unwrapping <code>Self::try_new</code>\nCreates an new empty <code>MutableBooleanArray</code>.\nAlias to <code>Self::try_new().unwrap()</code>\nCreates an empty <code>MutableDictionaryArray</code>.\nCreates a new empty <code>MutableFixedSizeBinaryArray</code>.\nCreates a new <code>FixedSizeBinaryArray</code>.\nCreates a new <code>MutableFixedSizeListArray</code> from a <code>MutableArray</code>…\nAlias to <code>Self::try_new(...).unwrap()</code>\nCreates a new empty <code>MutableListArray</code>.\nCreates a new <code>ListArray</code>.\nCreates a new <code>MapArray</code>.\nReturns a new <code>NullArray</code>.\nReturns a new <code>MutableNullArray</code>.\nCreates a new empty <code>MutablePrimitiveArray</code>.\nAlias for <code>Self::try_new(..).unwrap()</code>.\nCreates a new <code>MutableStructArray</code>.\nReturns a new <code>StructArray</code>\nReturns a new <code>UnionArray</code>.\nInitializes a new empty <code>MutableUtf8Array</code>.\nReturns an empty <code>MutableUtf8ValuesArray</code>.\nCreates a new <code>Utf8Array</code>.\nCreates a new <code>ArrayValuesIter</code>\nCreates an empty <code>BinaryArray</code>, i.e. whose <code>.len</code> is zero.\nReturns a new empty <code>BooleanArray</code>.\nReturns a new empty <code>DictionaryArray</code>.\nReturns a new empty <code>FixedSizeBinaryArray</code>.\nReturns a new empty <code>FixedSizeListArray</code>.\nReturns a new empty <code>ListArray</code>.\nReturns a new empty <code>MapArray</code>.\nReturns a new empty <code>NullArray</code>.\nReturns a new empty (zero-length) <code>PrimitiveArray</code>.\nCreates an empty <code>StructArray</code>.\nCreates a new empty <code>UnionArray</code>.\nReturns a new empty <code>Utf8Array</code>.\nCreates a new <code>Array</code> with a <code>Array::len</code> of 0.\nCreates a new <code>MutableFixedSizeListArray</code> from a <code>MutableArray</code>…\nCreates a new <code>MutableListArray</code> from a <code>MutableArray</code> and …\nCreates a new <code>MutableListArray</code> from a <code>MutableArray</code>, <code>Offsets</code>…\nCreates an null <code>BinaryArray</code>, i.e. whose …\nReturns a new <code>BooleanArray</code> whose all slots are null / <code>None</code>.\nReturns an <code>DictionaryArray</code> whose all elements are null\nReturns a new null <code>FixedSizeBinaryArray</code>.\nReturns a new null <code>FixedSizeListArray</code>.\nReturns a new null <code>ListArray</code>.\nReturns a new null <code>MapArray</code> of <code>length</code>.\nReturns a new <code>NullArray</code>.\nReturns a new <code>PrimitiveArray</code> where all slots are null / …\nCreates a null <code>StructArray</code> of length <code>length</code>.\nCreates a new null <code>UnionArray</code>.\nReturns a new <code>Utf8Array</code> whose all slots are null / <code>None</code>.\nCreates a new <code>Array</code> of <code>DataType</code> <code>data_type</code> and <code>length</code>. The …\nCreate a <code>MutableUtf8Array</code> out of low-end APIs.\nReturns a <code>MutableUtf8ValuesArray</code> created from its internal …\nCreates a new <code>Utf8Array</code> without checking for offsets …\nCreates a new <code>MutableListArray</code> from a <code>MutableArray</code> and …\nCreates a new <code>MutableFixedSizeListArray</code> from a <code>MutableArray</code>…\nCreates a new <code>MutableListArray</code> from a <code>MutableArray</code>.\nThe number of null slots on this <code>Array</code>.\nThe offsets of the array\nreturns its offsets.\nreturns its offsets.\nReturns the offsets of this <code>BinaryArray</code>.\nThe offsets\nThe offsets [<code>Buffer</code>].\nreturns the offsets\nThe optional offsets.\nreturns its offsets.\nreturns its offsets.\nReturns the offsets of this <code>Utf8Array</code>.\nContains functions and function factories to order values …\nPop the last entry from <code>MutableBinaryValuesArray</code>. This …\nPop the last entry from <code>MutableBinaryArray</code>. This function …\nPop an entry from <code>MutableBooleanArray</code>. Note If the values …\nPop the last entry from <code>MutableFixedSizeBinaryArray</code>. This …\nPop a value from the array. Note if the values is empty, …\nPop the last entry from <code>MutableUtf8Array</code>. This function …\nPop the last entry from <code>MutableUtf8ValuesArray</code>. This …\nPushes a new item to the array.\nPushes a new element to the array.\nPushes a new entry to <code>MutableBooleanArray</code>.\npushes a new entry to <code>MutableFixedSizeBinaryArray</code>.\nAdds a new value to the array.\nCall this once for each “row” of children you push.\nPushes a new element to the array.\nPushes a new item to the array.\nAdds a new null element to the array.\npushes a null value\nPush a new element that holds the invariants of the struct.\nSafety\nNeeds to be called when a valid value was extended to this …\nReserves additional slots to its capacity.\nReserves <code>additional</code> elements and <code>additional_values</code> on the …\nReserves <code>additional</code> elements and <code>additional_values</code> on the …\nReserves <code>additional</code> slots.\nReserves <code>additional</code> slots.\nReserves <code>additional</code> slots.\nReserves <code>additional</code> slots.\nReserves <code>additional</code> slots.\nReserves <code>additional</code> entries.\nReserves <code>additional</code> entries.\nReserves <code>additional</code> elements and <code>additional_values</code> on the …\nReserves <code>additional</code> elements and <code>additional_values</code> on the …\nSets position <code>index</code> to <code>value</code>. Note that if it is the first …\nSets position <code>index</code> to <code>value</code>. Note that if it is the first …\nSets position <code>index</code> to <code>value</code>. Note that if it is the first …\nSets the validity of this array.\nSets the validity of this array.\nSets the validity of this array.\nSets the validity of the keys of this <code>DictionaryArray</code>.\nSets the validity of this array.\nSets the validity of this array.\nSets the validity of this array.\nSets the validity of this array.\nSets the validity.\nSets the validity of this array.\nSets the validity of this array.\nSets the validity.\nSets the validity of this array.\nSets the values of this <code>BooleanArray</code>.\nSets values.\nUpdate the values of this <code>PrimitiveArray</code>.\nShrink the array to fit its length.\nShrinks the capacity of the <code>MutableBinaryValuesArray</code> to …\nShrinks the capacity of the <code>MutableBinaryArray</code> to fit its …\nShrinks the capacity of the <code>MutableBooleanArray</code> to fit its …\nShrinks the capacity of the <code>MutableDictionaryArray</code> to fit …\nShrinks the capacity of the <code>MutableFixedSizeBinaryArray</code> to …\nShrinks the capacity of the <code>MutableFixedSizeListArray</code> to …\nShrinks the capacity of the <code>MutableListArray</code> to fit its …\nShrinks the capacity of the <code>MutablePrimitiveArray</code> to fit …\nShrinks the capacity of the <code>MutableStructArray</code> to fit its …\nShrinks the capacity of the <code>MutableUtf8Array</code> to fit its …\nShrinks the capacity of the <code>MutableUtf8ValuesArray</code> to fit …\nreturns the (fixed) size of the <code>MutableFixedSizeBinaryArray</code>…\nReturns the size\nReturns the size (number of elements per slot) of this …\nReturns the size (number of elements per slot) of this …\nSlices this <code>Array</code>.\nSlices this <code>BinaryArray</code>.\nSlices this <code>BooleanArray</code>.\nSlices this <code>DictionaryArray</code>.\nSlices this <code>FixedSizeBinaryArray</code>.\nSlices this <code>FixedSizeListArray</code>.\nSlices this <code>ListArray</code>.\nReturns a slice of this <code>MapArray</code>.\nReturns a slice of the <code>NullArray</code>.\nSlices this <code>PrimitiveArray</code> by an offset and length.\nSlices this <code>StructArray</code>.\nReturns a slice of this <code>UnionArray</code>.\nSlices this <code>Utf8Array</code>.\nSlices the <code>Array</code>.\nSlices this <code>BinaryArray</code>.\nSlices this <code>BooleanArray</code>.\nSlices this <code>DictionaryArray</code>.\nSlices this <code>FixedSizeBinaryArray</code>.\nSlices this <code>FixedSizeListArray</code>.\nSlices this <code>ListArray</code>.\nReturns a slice of this <code>MapArray</code>.\nReturns a slice of the <code>NullArray</code>.\nSlices this <code>PrimitiveArray</code> by an offset and length.\nSlices this <code>StructArray</code>.\nReturns a slice of this <code>UnionArray</code>.\nSlices this <code>Utf8Array</code>.\nReturns a slice of this <code>Array</code>.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns a slice of this <code>Array</code>.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns a new <code>FixedSizeBinaryArray</code> with a different …\nChanges the arrays’ <code>DataType</code>, returning a new …\nReturns a new <code>PrimitiveArray</code> with a different logical type.\nClone a <code>&amp;dyn Array</code> to an owned <code>Box&lt;dyn Array&gt;</code>.\nConvert an arrow2 <code>Array</code> to <code>arrow_data::ArrayData</code>\nConvert this <code>Array</code> into [<code>ArrayData</code>]\nConvert this array into <code>arrow_data::ArrayData</code>\nSame as <code>into_empty</code> but clones the inner value map instead …\nCreates an empty <code>MutableDictionaryArray</code> from a given empty …\nFallible version of <code>Extend::extend</code>.\nThis is infalible and is implemented for consistency with …\nThis is infalible and is implemented for consistency with …\nExpand this array, using elements from the underlying …\nTries to extend itself with elements from <code>other</code>, failing …\nReturns a new <code>MutableBinaryValuesArray</code> from an iterator.\nCreates a new <code>MutableFixedSizeBinaryArray</code> from an iterator …\nCreates a <code>FixedSizeBinaryArray</code> from an fallible iterator …\nReturns a new <code>MutableUtf8ValuesArray</code> from an iterator.\nReturns a new <code>DictionaryArray</code>.\nCreates a <code>MutableBinaryArray</code> from an falible iterator of …\nCreates a <code>BinaryArray</code> from an fallible iterator of trusted …\nCreates a <code>BooleanArray</code> from a <code>TrustedLen</code>.\nCreates a <code>BooleanArray</code> from a <code>TrustedLen</code>.\nCreates a <code>MutablePrimitiveArray</code> from an fallible iterator …\nCreates a <code>MutableUtf8Array</code> from an falible iterator of …\nCreates a <code>Utf8Array</code> from an fallible iterator of trusted …\nCreates a <code>MutableBinaryArray</code> from an falible iterator of …\nCreates a <code>BinaryArray</code> from an falible iterator of trusted …\nCreates a <code>BooleanArray</code> from an falible iterator of trusted …\nCreates a <code>BooleanArray</code> from an falible iterator of trusted …\nCreates a <code>MutablePrimitiveArray</code> from an fallible iterator …\nCreates a <code>MutableUtf8Array</code> from an falible iterator of …\nCreates a <code>Utf8Array</code> from an falible iterator of trusted …\nReturns a the inner <code>Field</code>\nReturns a <code>MutableBinaryValuesArray</code> created from its …\nReturns a <code>MutableBinaryArray</code> created from its internal …\nReturns a <code>BinaryArray</code> created from its internal …\nThe canonical method to create a <code>MutableBooleanArray</code> out …\nThe canonical method to create a <code>BooleanArray</code> out of …\nReturns a new <code>DictionaryArray</code>.\nCreates a new <code>MutableFixedSizeBinaryArray</code>.\nCreates a new <code>FixedSizeBinaryArray</code>.\nCreates a new <code>FixedSizeListArray</code>.\nCreates a new <code>ListArray</code>.\nReturns a new <code>MapArray</code>.\nReturns a new <code>NullArray</code>.\nThe canonical method to create a <code>MutablePrimitiveArray</code> out …\nThe canonical method to create a <code>PrimitiveArray</code> out of its …\nCreate a <code>MutableStructArray</code> out of low-end APIs.\nReturns a new <code>StructArray</code>.\nReturns a new <code>UnionArray</code>.\nReturns a <code>MutableUtf8Array</code> created from its internal …\nReturns a <code>MutableUtf8ValuesArray</code> created from its internal …\nReturns a <code>Utf8Array</code> created from its internal …\nReturns a new <code>DictionaryArray</code>.\nCreates a new <code>Utf8Array</code> without checking for offsets …\nTries to push a new element.\nThis is infalible and is implemented for consistency with …\ntries to push a new entry to <code>MutableFixedSizeBinaryArray</code>.\nThis is infalible and is implemented for consistency with …\nNeeds to be called when a valid value was extended to this …\nNeeds to be called when a valid value was extended to this …\nThe types.\nThe validity of the <code>Array</code>: every array has an optional …\nThe optional validity of the array.\nThe optional validity.\nReturns the optional validity.\nThe optional validity. Equivalent to <code>self.keys().validity()</code>…\nThe optional validity.\nThe optional validity.\nThe optional validity.\nReturns the optional validity.\nThe optional validity.\nThe optional validity.\nReturns the value of the element at index <code>i</code>.\nReturns the element at index <code>i</code>\nReturns the value at index <code>i</code>\nReturns the value of the <code>DictionaryArray</code> at position <code>i</code>.\nReturns the element at index <code>i</code> as <code>&amp;[u8]</code>\nReturns value at position <code>i</code>.\nReturns the <code>Vec&lt;T&gt;</code> at position <code>i</code>.\nReturns the element at index <code>i</code>\nReturns the element at index <code>i</code>.\nReturns the value at slot <code>i</code>.\nReturn the <code>i</code>th child array.\nReturns the slot <code>index</code> as a <code>Scalar</code>.\nReturns the value of the element at index <code>i</code>, ignoring the …\nReturns the value of the element at index <code>i</code>.\nReturns the value of the element at index <code>i</code>, ignoring the …\nReturns the value of the element at index <code>i</code>.\nReturns the element at index <code>i</code>\nReturns the element at index <code>i</code> as bool\nReturns the element at index <code>i</code> as <code>&amp;[u8]</code>\nReturns the element at index <code>i</code> as &amp;str\nReturns the <code>Vec&lt;T&gt;</code> at position <code>i</code>.\nReturns the element at index <code>i</code> as &amp;str\nReturns the element at index <code>i</code>.\nReturns the value at index <code>i</code>. The value on null slots is …\nReturns the slot <code>index</code> as a <code>Scalar</code>.\nReturns the value of the element at index <code>i</code>, ignoring the …\nReturns the value of the element at index <code>i</code>.\nReturns the value of the element at index <code>i</code>, ignoring the …\nThe values of the array\nreturns its values.\nreturns its values.\nReturns the values of this <code>BinaryArray</code>.\nReturns its values.\nThe values <code>Bitmap</code>. Values on null slots are undetermined …\nreturns a reference to the inner values.\nReturns the values of the <code>DictionaryArray</code>.\nReturns its values.\nReturns the values allocated on this <code>FixedSizeBinaryArray</code>.\nThe inner values\nReturns the inner array.\nThe values\nThe values.\nReturns its values.\nThe values <code>Buffer</code>. Values on null slots are undetermined …\nThe values\nReturns the values of this <code>StructArray</code>.\nreturns its values.\nreturns its values.\nReturns the values of this <code>Utf8Array</code>.\nReturns an iterator over the values of this array\nReturns an iterator of <code>&amp;[u8]</code> over every element of this …\nReturns an iterator over the values of this …\nReturns an iterator over the values of this <code>BooleanArray</code>.\nReturns an iterator of <code>Box&lt;dyn Scalar&gt;</code>\nReturns iterator over the values of <code>FixedSizeBinaryArray</code>\nReturns an iterator of <code>Box&lt;dyn Array&gt;</code>\nReturns an iterator of <code>Box&lt;dyn Array&gt;</code>\nReturns an iterator of <code>Box&lt;dyn Array&gt;</code>\nReturns an iterator of <code>T</code>\nReturns an iterator of the values, <code>&amp;T</code>, ignoring the arrays…\nReturns an iterator of <code>Box&lt;dyn Array&gt;</code>\nReturns an iterator of <code>&amp;str</code>\nReturns an iterator of <code>&amp;str</code>\nReturns an iterator over the the values [<code>V::IterValue</code>].\nReturns a mutable slice of values.\nReturns a mutable slice of values.\nInitializes a new <code>MutableBinaryValuesArray</code> with a …\nInitializes a new <code>MutableBinaryArray</code> with a pre-allocated …\nInitializes a new <code>MutableUtf8Array</code> with a pre-allocated …\nInitializes a new <code>MutableUtf8ValuesArray</code> with a …\nInitializes a new <code>MutableBinaryValuesArray</code> with a …\nInitializes a new <code>MutableBinaryArray</code> with a pre-allocated …\nCreates an new <code>MutableBooleanArray</code> with a capacity of …\nCreates a new <code>MutableFixedSizeBinaryArray</code> with capacity …\nCreates a new <code>MutableListArray</code> with a capacity.\nCreates a new <code>MutablePrimitiveArray</code> with a capacity.\nInitializes a new <code>MutableUtf8Array</code> with a pre-allocated …\nInitializes a new <code>MutableUtf8ValuesArray</code> with a …\nCreates a new <code>MutablePrimitiveArray</code> from a capacity and …\nClones this <code>Array</code> with a new new assigned bitmap.\nReturns this array with a new validity.\nReturns this array with a new validity.\nReturns this array with a new validity.\nReturns this <code>DictionaryArray</code> with a new validity.\nReturns this array with a new validity.\nReturns this array with a new validity.\nReturns this array with a new validity.\nReturns this array with a new validity.\nReturns this array with a new validity.\nReturns this array with a new validity.\nReturns this array with a new validity.\nReturns a clone of this <code>BooleanArray</code> with new values.\nReturns this <code>PrimitiveArray</code> with new values.\nDescribes a struct that can be extended from slices of …\nConcrete <code>Growable</code> for the <code>BinaryArray</code>.\nConcrete <code>Growable</code> for the <code>BooleanArray</code>.\nConcrete <code>Growable</code> for the <code>DictionaryArray</code>.\nConcrete <code>Growable</code> for the <code>FixedSizeBinaryArray</code>.\nConcrete <code>Growable</code> for the <code>FixedSizeListArray</code>.\nConcrete <code>Growable</code> for the <code>ListArray</code>.\nConcrete <code>Growable</code> for the <code>MapArray</code>.\nConcrete <code>Growable</code> for the <code>NullArray</code>.\nConcrete <code>Growable</code> for the <code>PrimitiveArray</code>.\nConcrete <code>Growable</code> for the <code>StructArray</code>.\nConcrete <code>Growable</code> for the <code>UnionArray</code>.\nConcrete <code>Growable</code> for the <code>Utf8Array</code>.\nConverts this <code>Growable</code> to an <code>Arc&lt;dyn Array&gt;</code>, thereby …\nConverts this <code>Growable</code> to an <code>Box&lt;dyn Array&gt;</code>, thereby …\nExtends this <code>Growable</code> with elements from the bounded <code>Array</code> …\nExtends this <code>Growable</code> with null elements, disregarding the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe current length of the <code>Growable</code>.\nCreates a new <code>Growable</code> from an arbitrary number of <code>Array</code>s.\nCreates a new <code>GrowableBinary</code> bound to <code>arrays</code> with a …\nCreates a new <code>GrowableUnion</code> bound to <code>arrays</code> with a …\nCreates a new <code>GrowableBoolean</code> bound to <code>arrays</code> with a …\nCreates a new <code>GrowableFixedSizeBinary</code> bound to <code>arrays</code> with …\nCreates a new <code>GrowableNull</code>.\nCreates a new <code>GrowablePrimitive</code> bound to <code>arrays</code> with a …\nCreates a new <code>GrowableList</code> bound to <code>arrays</code> with a …\nCreates a new <code>GrowableMap</code> bound to <code>arrays</code> with a …\nCreates a new <code>GrowableStruct</code> bound to <code>arrays</code> with a …\nCreates a new <code>GrowableFixedSizeList</code> bound to <code>arrays</code> with a …\nCreates a new <code>GrowableUtf8</code> bound to <code>arrays</code> with a …\nCreates a new <code>GrowableDictionary</code> bound to <code>arrays</code> with a …\nCompare the values at two arbitrary indices in two arrays.\nreturns a comparison function that compares values at two …\nTotal order of all native types whose Rust implementation …\nimplements comparison using IEEE 754 total ordering for f32\nimplements comparison using IEEE 754 total ordering for f64\nAn immutable container semantically equivalent to …\nThis crates’ equivalent of <code>std::vec::IntoIter</code> for <code>Bitmap</code>.\nA container of booleans. <code>MutableBitmap</code> is semantically …\nCompute bitwise AND operation\nReturns the byte slice of this <code>Bitmap</code>.\nReturns the slice of bytes of this <code>MutableBitmap</code>. Note …\nApply a bitwise operation <code>op</code> to two inputs and return the …\nApply a bitwise binary operation to a <code>MutableBitmap</code>.\nReturns the capacity of <code>MutableBitmap</code> in number of bits.\nCreates a <code>Vec&lt;u8&gt;</code> from a <code>TrustedLen</code> of <code>BitChunk</code>.\nReturns an iterator over bits in bit chunks <code>BitChunk</code>.\nEmpties the <code>MutableBitmap</code>.\nExtends <code>MutableBitmap</code> by <code>additional</code> values of constant …\nExtends the <code>MutableBitmap</code> from a <code>Bitmap</code>.\nExtends the <code>MutableBitmap</code> from a slice of bytes with …\nExtends the <code>MutableBitmap</code> from a slice of bytes with …\nExtends <code>self</code> from a <code>TrustedLen</code> iterator.\nExtends <code>self</code> from an iterator of trusted len.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a Vec from an <code>Iterator</code> of <code>BitChunk</code>.\nCreates a <code>[Bitmap]</code> from its internal representation. This …\nCreates a <code>[Bitmap]</code> from its internal representation. This …\nInitializes a <code>MutableBitmap</code> with all values set to valid/ …\nInitializes a zeroed <code>MutableBitmap</code>.\nCreate a new <code>Bitmap</code> from an arrow <code>NullBuffer</code>\nCreates a new <code>Bitmap</code> from an iterator of booleans.\nCreates a new <code>MutableBitmap</code> from an iterator of booleans.\nCreates a new <code>Bitmap</code> from an iterator of booleans.\nCreates a new <code>MutableBitmap</code> from an iterator of booleans.\nCreates a new <code>Bitmap</code> from a slice and length.\nAlias for <code>Bitmap::try_new().unwrap()</code> This function is <code>O(1)</code>\nInitializes a <code>MutableBitmap</code> from a <code>Vec&lt;u8&gt;</code> and a length. …\nReturns whether the bit at position <code>i</code> is set.\nReturns whether the position <code>index</code> is set.\nReturns whether the bit at position <code>i</code> is set.\nUnsafely returns whether the bit at position <code>i</code> is set.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns its internal representation\nConverts this <code>Bitmap</code> to <code>MutableBitmap</code>, returning itself if …\nReturns whether <code>Bitmap</code> is empty\nReturns whether <code>MutableBitmap</code> is empty.\nReturns a new iterator of <code>bool</code> over this bitmap\nconstructs a new iterator over the bits of <code>MutableBitmap</code>.\nReturns the length of the <code>Bitmap</code>.\nReturns the length of the <code>MutableBitmap</code>.\nConverts this <code>Bitmap</code> into a <code>MutableBitmap</code>, cloning its …\nInitializes an empty <code>Bitmap</code>.\nCreates a new <code>IntoIter</code> from a <code>Bitmap</code>\nInitializes an empty <code>MutableBitmap</code>.\nInitializes an new <code>Bitmap</code> filled with set/unset values.\nInitializes an new <code>Bitmap</code> filled with set values.\nInitializes an new <code>Bitmap</code> filled with unset values.\nReturns the number of unset bits on this <code>Bitmap</code>.\nReturns the number of unset bits on this <code>MutableBitmap</code>.\nCounts the nulls (unset bits) starting from <code>offset</code> bits …\nCompute bitwise OR operation\nPop the last bit from the <code>MutableBitmap</code>. Note if the …\nPushes a new bit to the <code>MutableBitmap</code>, re-sizing it if …\nPushes a new bit to the <code>MutableBitmap</code>\nApply a bitwise operation <code>op</code> to four inputs and return the …\nReserves <code>additional</code> bits in the <code>MutableBitmap</code>, potentially …\nSets the position <code>index</code> to <code>value</code>\nSets the position <code>index</code> to <code>value</code>\nShrinks the capacity of the <code>MutableBitmap</code> to fit its …\nSlices <code>self</code>, offsetting by <code>offset</code> and truncating up to …\nSlices <code>self</code>, offseting by <code>offset</code> and truncating up to …\nSlices <code>self</code>, offsetting by <code>offset</code> and truncating up to …\nSlices <code>self</code>, offseting by <code>offset</code> and truncating up to …\nApply a bitwise operation <code>op</code> to three inputs and return …\nCreates a new <code>Bitmap</code> from a fallible iterator of booleans.\nCreates a new <code>MutableBitmap</code> from an iterator of booleans.\nCreates a new <code>Bitmap</code> from a fallible iterator of booleans.\nCreates a new <code>MutableBitmap</code> from an falible iterator of …\nInitializes a new <code>Bitmap</code> from vector of bytes and a length.\nInitializes a new <code>MutableBitmap</code> from a <code>Vec&lt;u8&gt;</code> and a …\nApply a bitwise operation <code>op</code> to one input and return the …\nApplies a function to every bit of this <code>MutableBitmap</code> in …\nReturns the number of unset bits on this <code>Bitmap</code>.\nReturns the number of unset bits on this <code>MutableBitmap</code>.\nGeneral utilities for bitmaps representing items where LSB …\nInitializes a pre-allocated <code>MutableBitmap</code> with capacity …\nCompute bitwise XOR operation\nA chunk of bits. This is used to create masks of a given …\nTrait representing an exact iterator over bytes in <code>BitChunk</code>…\nThis struct is used to efficiently iterate over bit masks …\nAn iterator over a slice of bytes in <code>BitChunk</code>s.\nAn iterator over mutable slices of bytes of exact size.\nAn iterator over bits according to the LSB, i.e. the bytes …\nThere are null values\nThere are no null values\nIterator over a bitmap that returns slices of set regions …\nAn <code>Iterator</code> over <code>Option&lt;T&gt;</code> This enum can be used in two …\nAn <code>Iterator</code> over validity and values.\nReturns the number of bytes required to hold <code>bits</code> bits.\nReturns the number of zero bits in the slice offsetted by …\nFormats <code>bytes</code> taking into account an offset and length of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nconvert itself from bytes.\nReturns whether bit at position <code>i</code> in <code>data</code> is set\nReturns whether bit at position <code>i</code> in <code>data</code> is set or not.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether there are still elements in this iterator\nReturns whether bit at position <code>i</code> in <code>byte</code> is set or not\nReturns the number of chunks of this iterator\nCreates a new <code>BitChunksExact</code>.\nCreates a <code>BitChunks</code>.\nReturns a new <code>BitChunksExactMut</code>\nCreates a new <code>BitmapIter</code>.\nCreates a new <code>SlicesIterator</code>\nCreates a new <code>ZipValidityIter</code>.\nReturns a new <code>ZipValidity</code>\nReturns a new <code>ZipValidity</code> and drops the <code>validity</code> if all …\nThe remainder of the iterator.\nReturns the remaining <code>BitChunk</code>. It is zero iff <code>len / 8 == 0</code>…\nReturns the remainder <code>BitChunk</code>.\nThe remainder slice\nAn iterator over individual items of the remainder\nAn iterator over individual items of the remainder\nThe number of items in the remainder\nReturns the remainder bits in <code>BitChunks::remainder</code>.\nThe length of the remainder slice in bits.\nSets bit at position <code>i</code> in <code>byte</code>\nSets bit at position <code>i</code> in <code>data</code>\nSets bit at position <code>i</code> in <code>data</code> without doing bound checks\nReturns the total number of slots. It corresponds to the …\nconvert itself into bytes.\nUnwrap into an iterator that has null values.\nUnwrap into an iterator that has no null values.\n<code>Buffer</code> is a contiguous memory region that can be shared …\nBytes representation.\nReturns the byte slice stored in this buffer\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>[Bitmap]</code> from its internal representation. This …\nReturns a mutable reference to its underlying <code>Vec</code>, if …\nReturns a mutable reference to its slice, if possible.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns its internal representation\nReturns a mutable reference to its underlying <code>Vec</code>, if …\nReturns whether the buffer is empty.\nReturns whether underlying data is sliced. If sliced the …\nReturns the number of bytes in the buffer\nCreates an empty <code>Buffer</code>.\nReturns the offset of this buffer.\nSafety\nGet the strong count of underlying <code>Arc</code> data buffer.\nGet the weak count of underlying <code>Arc</code> data buffer.\nSlices this buffer starting at <code>offset</code>.\nSlices this buffer starting at <code>offset</code>.\nReturns a new <code>Buffer</code> that is a slice of this buffer …\nReturns a new <code>Buffer</code> that is a slice of this buffer …\nA vector of trait objects of <code>Array</code> where every item has …\nreturns the <code>Array</code>s in <code>Chunk</code>\nreturns the <code>Array</code>s in <code>Chunk</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConsumes <code>Chunk</code> into its underlying arrays. The arrays are …\nreturns whether the columns have any rows\nreturns the number of rows of every array\nCreates a new <code>Chunk</code>.\nCreates a new <code>Chunk</code>.\nContains different aggregation functions\nDefines basic arithmetic kernels for <code>PrimitiveArray</code>s.\nDefines kernels suitable to perform operations to …\nDefines generics suitable to perform operations to …\nContains bitwise operators: <code>or</code>, <code>and</code>, <code>xor</code> and <code>not</code>.\nnull-preserving operators such as <code>and</code>, <code>or</code> and <code>not</code>.\nBoolean operators of Kleene logic.\nDefines different casting operators such as <code>cast</code> or …\nContains comparison operators\nContains the concatenate kernel\nDeclares the <code>contains</code> operator\nContains operators to filter arrays such as <code>filter</code>.\nContains the <code>hash</code> and typed (e.g. <code>hash_primitive</code>) …\nContains the operator <code>if_then_else</code>.\nDefines kernel for length of composite arrays\nContains “like” operators such as <code>like_utf8</code> and …\nContains the operator <code>limit</code>.\nFunctions to perform merge-sorts.\nContains the operator <code>nullif</code>.\nDefines partition kernel for <code>crate::array::Array</code>\nContains regex matching operators <code>regex_match</code> and …\nContains operators to sort individual and slices of <code>Array</code>s.\nDefines kernel to extract a substring of a [Large…\nDefines take kernel for <code>Array</code>\nDefines temporal kernels for time and date related …\nDefines common maps to a <code>Utf8Array</code>\nDefines windowing functions, like <code>shift</code>ing\nThe maximum value\nThe minimum value\nTrait describing a type describing multiple lanes with an …\nObject that can reduce itself to a number. This is used in …\nWhether <code>max</code> supports <code>data_type</code>\nWhether <code>min</code> supports <code>data_type</code>\nWhether <code>sum</code> supports <code>data_type</code>\nReturns the total (heap) allocated size of the array in …\nReturns the maximum of <code>Array</code>. The scalar is null when all …\nReturns the maximum value in the binary array, according …\nReturns the maximum value in the boolean array\nreduce itself to the minimum\nlane-wise maximum between two instances\nReturns the maximum value in the array, according to the …\nReturns the maximum value in the string array, according …\nReturns the minimum of <code>Array</code>. The scalar is null when all …\nReturns the minimum value in the binary array, according …\nReturns the minimum value in the boolean array.\nreduce itself to the maximum\nlane-wise minimum between two instances\nReturns the minimum value in the array, according to the …\nReturns the minimum value in the string array, according …\nreturns a new instance with all lanes equal to <code>MAX</code>\nreturns a new instance with all lanes equal to <code>MIN</code>\nReduces this element to a single value.\nReturns the sum of all elements in <code>array</code> as a <code>Scalar</code> of …\nReturns the sum of values in the array.\nCompute the sum of a slice\nDefines basic addition operation for primitive arrays\nDefines checked addition operation for primitive arrays\nDefines checked division operation for primitive arrays\nDefines checked multiplication operation for primitive …\nDefines checked reminder operation for primitive arrays\nDefines checked subtraction operation for primitive arrays\nDefines basic division operation for primitive arrays\nDefines basic multiplication operation for primitive arrays\nDefines Overflowing addition operation for primitive arrays\nDefines Overflowing multiplication operation for primitive …\nDefines Overflowing subtraction operation for primitive …\nDefines basic reminder operation for primitive arrays\nDefines saturating addition operation for primitive arrays\nDefines saturating multiplication operation for primitive …\nDefines saturating subtraction operation for primitive …\nDefines basic subtraction operation for primitive arrays\nDefines wrapping addition operation for primitive arrays\nDefines wrapping multiplication operation for primitive …\nDefines wrapping subtraction operation for primitive arrays\nAdds two <code>Array</code>s.\nAdds itself to <code>rhs</code>\nAdds an <code>Array</code> and a <code>Scalar</code>.\nContains arithemtic functions for <code>PrimitiveArray</code>s.\nReturns whether two <code>DataType</code>s can be added by <code>add</code>.\nReturns whether two <code>DataType</code>s can be divided by <code>div</code>.\nReturns whether two <code>DataType</code>s can be multiplied by <code>mul</code>.\nWhether <code>neg</code> is supported for a given <code>DataType</code>\nReturns whether two <code>DataType</code>s “can be remainder” by <code>rem</code>…\nReturns whether two <code>DataType</code>s can be subtracted by <code>sub</code>.\nChecked add\nchecked division\nchecked multiplication\nchecked remainder\nchecked subtraction\nDefines the arithmetic kernels for Decimal <code>PrimitiveArrays</code>…\nDivide of two <code>Array</code>s.\ndivision\nDivide an <code>Array</code> with a <code>Scalar</code>.\nMultiply two <code>Array</code>s.\nmultiplication\nMultiply an <code>Array</code> with a <code>Scalar</code>.\nNegates an <code>Array</code>.\nOverflowing add\noverflowing multiplication\noverflowing subtraction\nRemainder of two <code>Array</code>s.\nremainder\nSaturating add\nsaturating multiplication\nsaturarting subtraction\nSubtracts two <code>Array</code>s.\nsubtraction\nAdds an <code>Array</code> and a <code>Scalar</code>.\nDefines the arithmetic kernels for adding a Duration to a …\nAdds itself to <code>rhs</code> using wrapping addition\nwrapping multiplication\nwrapping subtraction\nTrait describing a <code>NativeType</code> whose semantics of …\nAdds two primitive arrays with the same type. Panics if …\nAdds a scalar T to a primitive array of type T. Panics if …\nChecked addition of two primitive arrays. If the result …\nChecked addition of a scalar T to a primitive array of …\nChecked division of two primitive arrays. If the result …\nChecked division of a primitive array of type T by a …\nChecked multiplication of two primitive arrays. If the …\nChecked multiplication of a scalar T to a primitive array …\nChecked negates values from array.\nChecked operation of raising an array of primitives to the …\nChecked remainder of two primitive arrays. If the result …\nChecked remainder of a primitive array of type T by a …\nChecked subtraction of two primitive arrays. If the result …\nChecked subtraction of a scalar T to a primitive array of …\nDivides two primitive arrays with the same type. Panics if …\nDivide a primitive array of type T by a scalar T. Panics …\nMultiplies two primitive arrays with the same type. Panics …\nMultiply a scalar T to a primitive array of type T. Panics …\nNegates values from array.\nOverflowing addition of two primitive arrays. If the …\nOverflowing addition of a scalar T to a primitive array of …\nOverflowing multiplication of two primitive arrays. If the …\nOverflowing multiplication of a scalar T to a primitive …\nOverflowing subtraction of two primitive arrays. If the …\nOverflowing subtraction of a scalar T to a primitive array …\nRaises an array of primitives to the power of exponent. …\nRemainder of two primitive arrays with the same type. …\nRemainder a primitive array of type T by a scalar T. …\nSaturating addition of two primitive arrays. If the result …\nSaturated addition of a scalar T to a primitive array of …\nSaturating multiplication of two primitive arrays. If the …\nSaturated multiplication of a scalar T to a primitive …\nSaturating subtraction of two primitive arrays. If the …\nSaturated subtraction of a scalar T to a primitive array …\nSubtracts two primitive arrays with the same type. Panics …\nSubtract a scalar T to a primitive array of type T. Panics …\nWrapping addition of two <code>PrimitiveArray</code>s. It wraps around …\nWrapping addition of a scalar T to a <code>PrimitiveArray</code> of …\nWrapping multiplication of two <code>PrimitiveArray</code>s. It wraps …\nWrapping multiplication of a scalar T to a <code>PrimitiveArray</code> …\nWrapping negates values from array.\nWrapping subtraction of two <code>PrimitiveArray</code>s. It wraps …\nWrapping subtraction of a scalar T to a <code>PrimitiveArray</code> of …\nAdaptive addition of two decimal primitive arrays with …\nAdaptive division of two decimal primitive arrays with …\nAdaptive multiplication of two decimal primitive arrays …\nAdaptive subtract of two decimal primitive arrays with …\nAdds two decimal <code>PrimitiveArray</code> with the same precision …\nChecked addition of two decimal primitive arrays with the …\nChecked division of two decimal primitive arrays with the …\nChecked multiplication of two decimal primitive arrays …\nChecked subtract of two decimal primitive arrays with the …\nDivide two decimal primitive arrays with the same …\nMultiply a decimal <code>PrimitiveArray</code> with a <code>PrimitiveScalar</code> …\nMultiply two decimal primitive arrays with the same …\nMultiply a decimal <code>PrimitiveArray</code> with a <code>PrimitiveScalar</code> …\nSaturated addition of two decimal primitive arrays with …\nSaturated division of two decimal primitive arrays with …\nSaturated multiplication of two decimal primitive arrays …\nSaturated subtraction of two decimal primitive arrays with …\nSubtract two decimal primitive arrays with the same …\nAdds a duration to a time array (Timestamp, Time and …\nAdds a duration to a time array (Timestamp, Time and …\nAdds an interval to a <code>DataType::Timestamp</code>.\nAdds an interval to a <code>DataType::Timestamp</code>.\nSubtract a duration to a time array (Timestamp, Time and …\nCalculates the difference between two timestamps as …\nSubtract a duration to a time array (Timestamp, Time and …\nCalculates the difference between two timestamps returning …\nApplies a binary operations to two primitive arrays. This …\nVersion of binary that creates a mutable bitmap that is …\nVersion of binary that returns an array and bitmap. Used …\nVersion of binary that checks for errors in the closure …\nVersion of unary that checks for errors in the closure …\nApplies an unary and infallible function to a …\nVersion of unary that creates a mutable bitmap that is …\nVersion of unary that returns an array and bitmap. Used …\nApplies a binary function to two <code>PrimitiveArray</code>s, …\nApplies an unary function to a <code>PrimitiveArray</code>, optionally …\nPerforms <code>AND</code> operation on two <code>PrimitiveArray</code>s.\nPerforms <code>AND</code> operation between a <code>PrimitiveArray</code> and scalar.\nReturns a new <code>PrimitiveArray</code> with the bitwise <code>not</code>.\nPerforms <code>OR</code> operation on two <code>PrimitiveArray</code>s.\nPerforms <code>OR</code> operation between a <code>PrimitiveArray</code> and scalar.\nPerforms <code>XOR</code> operation between two <code>PrimitiveArray</code>s.\nPerforms <code>XOR</code> operation between a <code>PrimitiveArray</code> and scalar.\nReturns whether all values in the array are <code>true</code>.\nPerforms <code>&amp;&amp;</code> operation on two <code>BooleanArray</code>, combining the …\nPerforms <code>AND</code> operation on an array and a scalar value. If …\nReturns whether any of the values in the array are <code>true</code>.\nReturns a non-null <code>BooleanArray</code> with whether each value of …\nReturns a non-null <code>BooleanArray</code> with whether each value of …\nPerforms unary <code>NOT</code> operation on an arrays. If value is …\nPerforms <code>||</code> operation on two <code>BooleanArray</code>, combining the …\nPerforms <code>OR</code> operation on an array and a scalar value. If …\nReturns whether all values in the array are <code>true</code>.\nLogical ‘and’ operation on two arrays with Kleene logic\nLogical ‘and’ operation on an array and a scalar value …\nReturns whether any of the values in the array are <code>true</code>.\nLogical ‘or’ operation on two arrays with Kleene logic\nLogical ‘or’ operation on an array and a scalar value …\noptions defining how Cast kernels behave\nConversion of binary\nCast <code>BinaryArray</code> to <code>DictionaryArray</code>, also known as packing.\nConversion of binary\nConversion to utf8\nConversion of binary\nCasts a <code>BinaryArray</code> to a <code>PrimitiveArray</code>, making any …\nConversion to utf8\nCasts the <code>BooleanArray</code> to a <code>BinaryArray</code>, casting trues to …\nCasts the <code>BooleanArray</code> to a <code>PrimitiveArray</code>.\nCasts the <code>BooleanArray</code> to a <code>Utf8Array</code>, casting trues to <code>&quot;1&quot;</code>…\nReturn true if a value of type <code>from_type</code> can be cast into a\nCast <code>array</code> to the provided data type and return a new <code>Array</code>…\nConversion of dates\nConversion of dates\nCasts <code>days_ms</code>s to <code>months_days_ns</code>. This operation is …\nReturns a <code>PrimitiveArray&lt;i128&gt;</code> with the casted values. …\nReturns a <code>PrimitiveArray&lt;i128&gt;</code> with the casted values. …\nReturns a <code>PrimitiveArray&lt;i128&gt;</code> with the casted values. …\nCasts a <code>DictionaryArray</code> to a new <code>DictionaryArray</code> backed by …\nCasts a <code>DictionaryArray</code> to a new <code>DictionaryArray</code> by …\nCasts a <code>DictionaryArray</code> to its values’ <code>DataType</code>, also …\nCasts f16 into f32\nConversion of <code>FixedSizeBinary</code> to <code>Binary</code>.\nReturns a <code>PrimitiveArray&lt;i128&gt;</code> with the casted values. …\nReturns the argument unchanged.\nReturns a <code>PrimitiveArray&lt;i128&gt;</code> with the casted values. …\nCalls <code>U::from(self)</code>.\nCasts months represented as <code>i32</code>s to <code>months_days_ns</code>. This …\nReturns a <code>Utf8Array</code> where every element is the utf8 …\ndefault to false whether to cast to an integer at the …\nCasts a <code>BinaryArray</code> to a <code>PrimitiveArray</code> at best-effort …\nCasts a <code>Utf8Array</code> to a <code>PrimitiveArray</code> at best-effort using …\nCast <code>PrimitiveArray</code> as a <code>PrimitiveArray</code> Same as …\nReturns a <code>BinaryArray</code> where every element is the binary …\nReturns a <code>BooleanArray</code> where every element is different …\nCast <code>PrimitiveArray</code> to <code>DictionaryArray</code>. Also known as …\nCast <code>PrimitiveArray</code> to a <code>PrimitiveArray</code> of another …\nCast <code>PrimitiveArray</code> to a <code>PrimitiveArray</code> of the same …\nReturns a <code>Utf8Array</code> where every element is the utf8 …\nConversion of time\nConversion of times\nConversion of times\nConversion of time\nConversion of times\nConversion of times\nConversion of timestamp\nConversion of timestamp\nConversion of timestamp\nReturns a <code>Utf8Array</code> where every element is the utf8 …\nConversion of utf8\nConversion to binary\nCasts a <code>Utf8Array</code> to a Date32 primitive, making any …\nCasts a <code>Utf8Array</code> to a Date64 primitive, making any …\nCast <code>Utf8Array</code> to <code>DictionaryArray</code>, also known as packing.\nConversion of utf8\n<code>crate::temporal_conversions::utf8_to_timestamp_ns</code> applied …\nCasts a <code>Utf8Array</code> to a <code>PrimitiveArray</code>, making any …\n<code>crate::temporal_conversions::utf8_to_timestamp_ns</code> applied …\ndefault to false whether an overflowing cast should be …\nSimilar to dictionary_to_dictionary_keys, but overflowing …\nSimilar to dictionary_to_dictionary_values, but …\nThe 8 lane representation of <code>Self</code>\n<code>NativeType</code> that supports a representation of 8 lanes\nTrait declaring an 8-lane multi-data.\nTrait implemented by implementors of <code>Simd8Lanes</code> whose <code>Simd8</code>…\nTrait implemented by implementors of <code>Simd8Lanes</code> whose <code>Simd8</code>…\nComparison functions for <code>BinaryArray</code>\nComparison functions for <code>BooleanArray</code>\nReturns whether a <code>DataType</code> is comparable is supported by <code>eq</code>…\nReturns whether a <code>DataType</code> is supported by <code>eq_scalar</code>.\nReturns whether a <code>DataType</code> is comparable is supported by <code>gt</code>…\nReturns whether a <code>DataType</code> is comparable is supported by …\nReturns whether a <code>DataType</code> is supported by <code>gt_eq_scalar</code>.\nReturns whether a <code>DataType</code> is supported by <code>gt_scalar</code>.\nReturns whether a <code>DataType</code> is comparable is supported by <code>lt</code>…\nReturns whether a <code>DataType</code> is comparable is supported by <code>lt</code>…\nReturns whether a <code>DataType</code> is supported by <code>lt_eq_scalar</code>.\nReturns whether a <code>DataType</code> is supported by <code>lt_scalar</code>.\nReturns whether a <code>DataType</code> is comparable is supported by …\nReturns whether a <code>DataType</code> is supported by <code>neq_scalar</code>.\n<code>==</code> between two <code>Array</code>s. Use <code>can_eq</code> to check whether the …\nEqual\n<code>==</code> between two <code>Array</code>s and includes validities in …\n<code>==</code> between an <code>Array</code> and a <code>Scalar</code>. Use <code>can_eq_scalar</code> to …\n<code>==</code> between an <code>Array</code> and a <code>Scalar</code> and includes validities …\nUtility for low level end users that implement their own …\nUtility for low level end users that implement their own …\nloads a complete chunk\nloads an incomplete chunk, filling the remaining items …\n<code>&gt;</code> between two <code>Array</code>s. Use <code>can_gt</code> to check whether the …\nGreater than\n<code>&gt;=</code> between two <code>Array</code>s. Use <code>can_gt_eq</code> to check whether the …\nGreater than or equal to\n<code>&gt;=</code> between an <code>Array</code> and a <code>Scalar</code>. Use <code>can_gt_eq_scalar</code> to …\n<code>&gt;</code> between an <code>Array</code> and a <code>Scalar</code>. Use <code>can_gt_scalar</code> to …\n<code>&lt;</code> between two <code>Array</code>s. Use <code>can_lt</code> to check whether the …\nLess than\n<code>&lt;=</code> between two <code>Array</code>s. Use <code>can_lt_eq</code> to check whether the …\nLess than or equal to\n<code>&lt;=</code> between an <code>Array</code> and a <code>Scalar</code>. Use <code>can_lt_eq_scalar</code> to …\n<code>&lt;</code> between an <code>Array</code> and a <code>Scalar</code>. Use <code>can_lt_scalar</code> to …\n<code>!=</code> between two <code>Array</code>s. Use <code>can_neq</code> to check whether the …\nNot equal\n<code>!=</code> between two <code>Array</code>s and includes validities in …\n<code>!=</code> between an <code>Array</code> and a <code>Scalar</code>. Use <code>can_neq_scalar</code> to …\n<code>!=</code> between an <code>Array</code> and a <code>Scalar</code> and includes validities …\nComparison functions for <code>PrimitiveArray</code>\nComparison functions for <code>Utf8Array</code>\nPerform <code>lhs == rhs</code> operation on <code>BinaryArray</code>.\nPerform <code>lhs == rhs</code> operation on <code>BinaryArray</code> and include …\nPerform <code>lhs == rhs</code> operation on <code>BinaryArray</code> and a scalar.\nPerform <code>lhs == rhs</code> operation on <code>BinaryArray</code> and a scalar …\nPerform <code>lhs &gt; rhs</code> operation on <code>BinaryArray</code>.\nPerform <code>lhs &gt;= rhs</code> operation on <code>BinaryArray</code>.\nPerform <code>lhs &gt;= rhs</code> operation on <code>BinaryArray</code> and a scalar.\nPerform <code>lhs &gt; rhs</code> operation on <code>BinaryArray</code> and a scalar.\nPerform <code>lhs &lt; rhs</code> operation on <code>BinaryArray</code>.\nPerform <code>lhs &lt;= rhs</code> operation on <code>BinaryArray</code>.\nPerform <code>lhs &lt;= rhs</code> operation on <code>BinaryArray</code> and a scalar.\nPerform <code>lhs &lt; rhs</code> operation on <code>BinaryArray</code> and a scalar.\nPerform <code>lhs != rhs</code> operation on <code>BinaryArray</code>.\nPerform <code>lhs != rhs</code> operation on <code>BinaryArray</code>.\nPerform <code>lhs != rhs</code> operation on <code>BinaryArray</code> and a scalar.\nPerform <code>lhs != rhs</code> operation on <code>BinaryArray</code> and a scalar …\nEvaluate <code>op(left, right)</code> for <code>BooleanArray</code> and scalar using …\nPerform <code>lhs == rhs</code> operation on two <code>BooleanArray</code>s.\nPerform <code>lhs == rhs</code> operation on two <code>BooleanArray</code>s and …\nPerform <code>lhs == rhs</code> operation on a <code>BooleanArray</code> and a …\nPerform <code>lhs == rhs</code> operation on a <code>BooleanArray</code> and a …\nPerform <code>left &gt; right</code> operation on two arrays. Non-null …\nPerform <code>left &gt;= right</code> operation on two arrays. Non-null …\nPerform <code>left &gt;= right</code> operation on an array and a scalar …\nPerform <code>left &gt; right</code> operation on an array and a scalar …\nPerform <code>left &lt; right</code> operation on two arrays.\nPerform <code>left &lt;= right</code> operation on two arrays.\nPerform <code>left &lt;= right</code> operation on an array and a scalar …\nPerform <code>left &lt; right</code> operation on an array and a scalar …\n<code>lhs != rhs</code> for <code>BooleanArray</code>\n<code>lhs != rhs</code> for <code>BooleanArray</code> and include validities in …\nPerform <code>left != right</code> operation on an array and a scalar …\nPerform <code>left != right</code> operation on an array and a scalar …\nEvaluate <code>op(left, right)</code> for <code>PrimitiveArray</code> and scalar …\nPerform <code>lhs == rhs</code> operation on two arrays.\nPerform <code>lhs == rhs</code> operation on two arrays and include …\nPerform <code>left == right</code> operation on an array and a scalar …\nPerform <code>left == right</code> operation on an array and a scalar …\nPerform <code>left &gt; right</code> operation on two arrays. Non-null …\nPerform <code>left &gt;= right</code> operation on two arrays. Non-null …\nPerform <code>left &gt;= right</code> operation on an array and a scalar …\nPerform <code>left &gt; right</code> operation on an array and a scalar …\nPerform <code>left &lt; right</code> operation on two arrays.\nPerform <code>left &lt;= right</code> operation on two arrays.\nPerform <code>left &lt;= right</code> operation on an array and a scalar …\nPerform <code>left &lt; right</code> operation on an array and a scalar …\nPerform <code>left != right</code> operation on two arrays.\nPerform <code>left != right</code> operation on two arrays and include …\nPerform <code>left != right</code> operation on an array and a scalar …\nPerform <code>left != right</code> operation on an array and a scalar …\nPerform <code>lhs == rhs</code> operation on <code>Utf8Array</code>.\nPerform <code>lhs == rhs</code> operation on <code>Utf8Array</code> and include …\nPerform <code>lhs == rhs</code> operation on <code>Utf8Array</code> and a scalar.\nPerform <code>lhs == rhs</code> operation on <code>Utf8Array</code> and a scalar. …\nPerform <code>lhs &gt; rhs</code> operation on <code>Utf8Array</code>.\nPerform <code>lhs &gt;= rhs</code> operation on <code>Utf8Array</code>.\nPerform <code>lhs &gt;= rhs</code> operation on <code>Utf8Array</code> and a scalar.\nPerform <code>lhs &gt; rhs</code> operation on <code>Utf8Array</code> and a scalar.\nPerform <code>lhs &lt; rhs</code> operation on <code>Utf8Array</code>.\nPerform <code>lhs &lt;= rhs</code> operation on <code>Utf8Array</code>.\nPerform <code>lhs &lt;= rhs</code> operation on <code>Utf8Array</code> and a scalar.\nPerform <code>lhs &lt; rhs</code> operation on <code>Utf8Array</code> and a scalar.\nPerform <code>lhs != rhs</code> operation on <code>Utf8Array</code>.\nPerform <code>lhs != rhs</code> operation on <code>Utf8Array</code> and include …\nPerform <code>lhs != rhs</code> operation on <code>Utf8Array</code> and a scalar.\nPerform <code>lhs != rhs</code> operation on <code>Utf8Array</code> and a scalar. …\nConcatenate multiple Array of the same type into a single …\nReturns whether each element in <code>values</code> is in each element …\nFunction that can filter arbitrary arrays\nReturns a prepared function optimized to filter multiple …\nFilters an Array, returning elements matching the filter …\nReturns a new Chunk with arrays containing only values …\nChecks if an array of type <code>datatype</code> can be used in <code>hash</code>.\nReturns the element-wise hash of an <code>Array</code>. Validity is …\nElement-wise hash of a <code>BinaryArray</code>. Validity is preserved.\nElement-wise hash of a <code>BooleanArray</code>. Validity is preserved.\nElement-wise hash of a <code>PrimitiveArray</code>. Validity is …\nElement-wise hash of a <code>Utf8Array</code>. Validity is preserved.\nReturns the values from <code>lhs</code> if the predicate is <code>true</code> or …\nChecks if an array of type <code>datatype</code> can perform length …\nReturns an array of integers with the number of bytes on …\nReturns <code>lhs LIKE rhs</code> operation on two <code>BinaryArray</code>.\nReturns <code>lhs LIKE rhs</code> operation.\nReturns <code>lhs LIKE rhs</code> operation on two <code>Utf8Array</code>.\nReturns <code>lhs LIKE rhs</code> operation.\nReturns <code>lhs NOT LIKE rhs</code> operation on two <code>BinaryArray</code>s.\nReturns <code>lhs NOT LIKE rhs</code> operation on two <code>BinaryArray</code>s.\nReturns <code>lhs NOT LIKE rhs</code> operation on two <code>Utf8Array</code>.\nReturns <code>lhs NOT LIKE rhs</code> operation.\nReturns the <code>Array</code> limited by <code>num_elements</code>.\nA slice denoting <code>(array_index, start, len)</code> representing a …\nAn iterator adapter that merge-sorts two iterators of …\nreturns a comparison function between any two arrays of …\nreturns a comparison function between any two arrays of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCombines two sorted Arrays of the same …\nGiven two iterators of slices representing two sets of …\nReturns a vector of slices from different sorted arrays …\nTakes N arrays together through <code>slices</code> under the …\nCollect the MergeSortSlices to be a vec for reusing\nReturns whether <code>nullif</code> and <code>nullif_scalar</code> is implemented …\nReturns an <code>Array</code> with the same type as <code>lhs</code> and whose …\nReturns an <code>Array</code> with the same type as <code>lhs</code> and whose …\nReturns an array whose validity is null iff <code>lhs == rhs</code> or …\nReturns a <code>PrimitiveArray</code> whose validity is null iff …\nGiven a list of already sorted columns, find partition …\nRegex matches\nRegex matches\nOne column to be used in lexicographical sort\nOptions that define how sort kernels should behave\nChecks if an array of type <code>datatype</code> can be sorted\nWhether to sort in descending order\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSort a list of <code>Array</code> using <code>SortOptions</code> provided for each …\nSorts a list of <code>SortColumn</code> into a non-nullable …\nSorts a list of <code>SortColumn</code> into a non-nullable …\nWhether to sort nulls first\nThe options to apply to the sort\nA comparable row-oriented representation of a collection …\nSort the <code>Array</code> using <code>SortOptions</code>.\nSort elements from <code>values</code> into a non-nullable …\nThe array to sort\nA comparable representation of a row\nConverts <code>Box&lt;dyn Array&gt;</code> columns into a row-oriented format.\nA row-oriented representation of arrow data, that is …\nAn iterator over <code>Rows</code>\nConfigure the data type and sort order for a given column\nConvert a slice of <code>Box&lt;dyn Array&gt;</code> columns into <code>Rows</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the iterator\nReturns the number of rows\nCreate a new <code>RowConverter</code> with the provided schema\nCreate a new column with the given data type\nCreate a new column with the given data type and …\nGet a reference to a certain row.\nGet a reference to a certain row but not check the bounds.\nReturns a BinaryArray with a substring starting from <code>start</code> …\nChecks if an array of type <code>datatype</code> can perform substring …\nReturns an ArrayRef with a substring starting from <code>start</code> …\nReturns a Utf8Array with a substring starting from <code>start</code> …\nChecks if an array of type <code>datatype</code> can perform take …\nReturns a new <code>Array</code> with only indices at <code>indices</code>. Null …\nChecks if an array of type <code>datatype</code> can perform day …\nChecks if an array of type <code>datatype</code> can perform hour …\nChecks if an array of type <code>data_type</code> can perform ISO week …\nChecks if an array of type <code>datatype</code> can perform minute …\nChecks if an array of type <code>datatype</code> can perform month …\nChecks if an array of type <code>datatype</code> can perform nanosecond …\nChecks if an array of type <code>datatype</code> can perform second …\nChecks if an array of type <code>data_type</code> can perform weekday …\nChecks if an array of type <code>datatype</code> can perform year …\nExtracts the days of a temporal array as …\nExtracts the hours of a temporal array as …\nExtracts ISO week of a temporal array as …\nExtracts the minutes of a temporal array as …\nExtracts the months of a temporal array as …\nExtracts the nanoseconds of a temporal array as …\nExtracts the seconds of a temporal array as …\nExtracts weekday of a temporal array as <code>PrimitiveArray&lt;u32&gt;</code>…\nExtracts the years of a temporal array as …\nChecks if an array of type <code>datatype</code> can perform lower …\nChecks if an array of type <code>datatype</code> can perform upper …\nReturns a new <code>Array</code> where each of each of the elements is …\nReturns a new <code>Array</code> where each of each of the elements is …\nutf8_apply will apply <code>Fn(&amp;str) -&gt; String</code> to every value in …\nShifts array by defined number of items (to left or right) …\nOpaque binary data of variable length.\nOpaque binary data of variable length whose offsets are …\nA boolean represented as a single bit.\n<code>true</code> and <code>false</code>.\nThe set of supported logical types in this crate.\nAn <code>i32</code> representing the elapsed time since UNIX epoch …\nAn <code>i64</code> representing the elapsed time since UNIX epoch …\nThe number of elapsed days and milliseconds, stored as 2 …\nDecimal value with precision and scale precision is the …\nDecimal backed by 256 bits\nDense union\nA dictionary encoded array by <code>IntegerType</code>.\nA dictionary encoded array (<code>key_type</code>, <code>value_type</code>), where …\nMeasure of elapsed time. This elapsed time is a physical …\nExtension type.\nRepresents Arrow’s metadata of a “column”.\nOpaque binary data of fixed size.\nOpaque binary data of fixed size. Enum parameter specifies …\nA list of some data type with fixed length.\nA list of some logical data type with a fixed number of …\nAn 16-bit float\nA <code>f32</code>\nA <code>f64</code>\nA signed 16-bit integer.\nAn <code>i16</code>\nA signed 32-bit integer.\nAn <code>i32</code>\nA signed 64-bit integer.\nAn <code>i64</code>\nA signed 8-bit integer.\nAn <code>i8</code>\nthe set of valid indices types of a dictionary-encoded …\nA “calendar” interval modeling elapsed time that takes …\nInterval units defined in Arrow\nOpaque binary data of variable length and 64-bit offsets.\nOpaque binary data of variable length whose offsets are …\nA list of some data type with variable length and 64-bit …\nA list of some logical data type whose offsets are …\nA variable-length string in Unicode with UFT-8 encoding …\nA variable-length UTF-8 encoded string whose offsets are …\nA list of some data type with variable length.\nA list of some logical data type whose offsets are …\nA nested type.\nA nested type that is represented as\ntypedef for BTreeMap&lt;String, String&gt; denoting <code>Field</code>’s …\nTime in microseconds.\nTime in milliseconds.\nThe number of elapsed months (i32), days (i32) and …\nTime in nanoseconds.\nA Null with no allocation.\nNull type\nThe set of physical types: unique in-memory …\nAn array where each slot has a known compile-time size.\nAn ordered sequence of <code>Field</code>s with associated <code>Metadata</code>.\ntypedef for <code>Arc&lt;Schema&gt;</code>.\nTime in seconds.\nSparse union\nA nested type that contains an arbitrary number of fields.\nA nested <code>DataType</code> with a given number of <code>Field</code>s.\nA 32-bit time representing the elapsed time since midnight …\nA 64-bit time representing the elapsed time since midnight …\nThe time units defined in Arrow.\nA <code>i64</code> representing a timestamp measured in <code>TimeUnit</code> with …\nAn unsigned 16-bit integer.\nAn <code>u16</code>\nAn unsigned 32-bit integer.\nAn <code>u32</code>\nAn unsigned 64-bit integer.\nAn <code>u64</code>\nAn unsigned 8-bit integer.\nAn <code>u8</code>\nA nested type that represents slots of differing types.\nA nested datatype that can represent slots of differing …\nMode of <code>DataType::Union</code>\nA variable-length string in Unicode with UTF-8 encoding.\nA variable-length UTF-8 encoded string whose offsets are …\nThe number of elapsed whole months.\nReturns the <code>Field</code>’s <code>DataType</code>.\nIts logical <code>DataType</code>\nWhether this physical type equals <code>PhysicalType::Primitive</code> …\nThe fields composing this schema.\nReturns a new <code>Schema</code> with a subset of all fields whose …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nsupport get extension for metadata\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the mode is dense\nIts nullability\nReturns whether the mode is sparse\nAdditional custom (opaque) metadata.\nOptional metadata.\nIts name\nCreates a new <code>Field</code>.\nConstructs a <code>UnionMode::Sparse</code> if the input bool is true, …\nReturns <code>&amp;self</code> for all but <code>DataType::Extension</code>. For …\nthe <code>PhysicalType</code> of this <code>DataType</code>.\nCreates a new <code>Field</code> with metadata.\nAttaches a <code>Metadata</code> to <code>Schema</code>\nContains the error value\nEnum with all errors in this crate.\nWrapper for an error triggered by a dependency\nError during import or export to/from a format\nWhen an invalid argument is passed to a function.\nWrapper for IO errors\nReturned when functionality is not yet available.\nContains the success value\nWhenever incoming data from the C data interface, IPC or …\nWhenever pushing to a container fails because it does not …\nTypedef for a <code>std::result::Result</code> of an <code>Error</code>.\nReturns the argument unchanged.\nWraps an external error in an <code>Error</code>.\nCalls <code>U::from(self)</code>.\nABI-compatible struct for <code>ArrowArray</code>\nABI-compatible struct for <code>ArrowArrayStream</code>.\nImplements an iterator of <code>Array</code> consumed from the C stream …\nABI-compatible struct for <code>ArrowSchema</code>\ncreate an empty ArrowSchema\ncreates an empty <code>ArrowArray</code>, which can be used to import …\nCreates an empty <code>ArrowArrayStream</code> used to import from a …\nExports an <code>Box&lt;dyn Array&gt;</code> to the C data interface.\nExports a <code>Field</code> to the C data interface.\nExports an iterator to the C stream interface\nReturns the field provided by the stream\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nImports an <code>Array</code> from the C data interface.\nImports a <code>Field</code> from the C data interface.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFunctionality to mmap in-memory data regions.\nAdvances this iterator by one array\nReturns a new <code>ArrowArrayStreamReader</code>\nCreates a (non-null) <code>BooleanArray</code> from a slice of bits. …\nCreates a (non-null) <code>PrimitiveArray</code> from a slice of values.\nRead and write from and to Apache Avro\nConvert data between the Arrow and CSV (comma-separated …\nSerialization and deserialization to Arrow’s flight …\nAPIs to read from and write to Arrow’s IPC format.\nConvert data between the Arrow memory format and JSON …\nUtils for JSON integration testing\nAPIs to read from and write to NDJSON\nAPI to serialize and deserialize data from and to ODBC\nAPIs to read from ORC format.\nAPIs to read from and write to Parquet format.\nAPIs to represent <code>Chunk</code> as a formatted table.\nAPIs to read from Avro format to arrow.\nAPIs to write to Avro format.\nSingle threaded, blocking reader of Avro; <code>Iterator</code> of <code>Chunk</code>…\nDeserializes a <code>Block</code> assumed to be encoded according to …\nReturns the argument unchanged.\nInfers an <code>Schema</code> from the root <code>Record</code>. This\nCalls <code>U::from(self)</code>.\nDeconstructs itself into its internal reader\nCreates a new <code>Reader</code>.\nA type alias for a boxed <code>StreamingIterator</code>, used to write …\nWhether <code>new_serializer</code> supports <code>data_type</code>.\nCreates a <code>StreamingIterator</code> trait object that presents …\nconsumes a set of <code>BoxSerializer</code> into an <code>Block</code>.\nConverts a <code>Schema</code> to an Avro <code>Record</code>.\nAPIs to read from CSV\nAsynchronous reading of CSV\nAPIs to write to CSV\nA single CSV record stored as raw bytes.\nA already configured CSV reader.\nBuilds a CSV reader with various configuration knobs.\nReturn the entire row as a single byte slice. The slice …\nA convenience method for specifying a configuration to …\nSet the capacity (in bytes) of the buffer used in the CSV …\nReturns a reference to the first row read by this parser …\nReturns a borrowed iterator over all records as raw bytes.\nClear this record so that it has zero fields.\nThe comment character to use when parsing CSV.\nThe field delimiter to use when parsing CSV.\nDeserialize this record.\nReturns a borrowed iterator over deserialized records.\nDeserializes rows <code>ByteRecord</code> into a <code>Chunk</code>. Note that this …\nDeserializes <code>column</code> of <code>rows</code> into an <code>Array</code> of <code>DataType</code> …\nEnable double quote escapes.\nThe escape character to use when parsing CSV.\nWhether the number of fields in records is allowed to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild a CSV parser from this configuration that reads data …\nCreate a new CSV parser with a default configuration for …\nBuild a CSV parser from this configuration that reads data …\nCreate a new CSV parser with a default configuration for …\nReturn the field at index <code>i</code>.\nReturns a mutable reference to the underlying reader.\nReturns a reference to the underlying reader.\nWhether to treat the first row as a special header row.\nReturns true if and only if this reader has been …\nReturns a reference to the first row read by this parser.\nInfers <code>DataType</code> from <code>bytes</code>\nInfers the <code>Field</code>s of a CSV file by reading through the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an owned iterator over all records as raw bytes.\nReturns an owned iterator over deserialized records.\nUnwraps this CSV reader, returning the underlying reader.\nReturns an owned iterator over all records as strings.\nReturns true if and only if this reader has been exhausted.\nReturns true if and only if this record is empty.\nReturns an iterator over all fields in this record.\nReturns the number of fields in this record.\nCreate a new empty <code>ByteRecord</code>.\nCreate a new builder for configuring CSV parsing.\nReturn the position of this record, if available.\nReturn the current position of this CSV reader.\nAdd a new field to this record.\nThe quote character to use when parsing CSV.\nEnable or disable quoting.\nReturn the start and end position of a field in this …\nRead a single row into the given byte record. Returns …\nRead a single row into the given record. Returns false …\nReads <code>len</code> rows from <code>reader</code> into <code>row</code>, skiping the first <code>skip</code>…\nReturns a borrowed iterator over all records as strings.\nSeeks the underlying reader to the position given.\nThis is like <code>seek</code>, but provides direct control over how …\nSet the headers of this CSV parser manually as raw bytes.\nSet the headers of this CSV parser manually.\nSet the position of this record.\nThe record terminator to use when parsing CSV.\nTrim the fields of this record so that leading and …\nWhether fields are trimmed of leading and trailing …\nTruncate this record to <code>n</code> fields.\nCreate a new empty <code>ByteRecord</code> with the given capacity …\nA already configured CSV reader.\nBuilds a CSV reader with various configuration knobs.\nA single CSV record stored as raw bytes.\nAn error that can occur when processing CSV data.\nReturn the entire row as a single byte slice. The slice …\nA convenience method for specifying a configuration to …\nSet the capacity (in bytes) of the buffer used in the CSV …\nReturns a reference to the first row read by this parser …\nReturns a borrowed iterator over all records as raw bytes.\nClear this record so that it has zero fields.\nClone this record, but only copy <code>fields</code> up to the end of …\nThe comment character to use when parsing CSV.\nBuild a CSV <code>serde</code> deserializer from this configuration …\nBuild a CSV reader from this configuration that reads data …\nThe field delimiter to use when parsing CSV.\nDeserialize this record.\nDeserializes rows <code>ByteRecord</code> into <code>Chunk</code>. Note that this is …\nDeserializes <code>column</code> of <code>rows</code> into an <code>Array</code> of <code>DataType</code> …\nEnable double quote escapes.\nIf set, CSV records’ stream will end when first i/o …\nThe escape character to use when parsing CSV.\nWhether the number of fields in records is allowed to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new CSV parser with a default configuration for …\nReturn the field at index <code>i</code>.\nReturns a mutable reference to the underlying reader.\nReturns a reference to the underlying reader.\nReturns true if and only if this reader has been …\nWhether to treat the first row as a special header row.\nReturns a reference to the first row read by this parser.\nInfers <code>DataType</code> from <code>bytes</code>\nInfers the <code>Field</code>s of a CSV file by reading through the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an owned iterator over all records as raw bytes.\nUnwraps this CSV reader, returning the underlying reader.\nUnwrap this error into its underlying type.\nReturns an owned iterator over all records as strings.\nReturns true if and only if this reader has been exhausted.\nReturns true if and only if this record is empty.\nReturns true if this is an I/O error.\nReturns an iterator over all fields in this record.\nReturn the specific type of this error.\nReturns the number of fields in this record.\nCreate a new empty <code>ByteRecord</code>.\nCreate a new builder for configuring CSV parsing.\nReturn the position of this record, if available.\nReturn the position for this error, if one exists.\nReturn the current position of this CSV reader.\nAdd a new field to this record.\nThe quote character to use when parsing CSV.\nEnable or disable quoting.\nReturn the start and end position of a field in this …\nRead a single row into the given byte record. Returns …\nRead a single row into the given record. Returns false …\nAsynchronosly read <code>len</code> rows from <code>reader</code> into <code>row</code>, skiping …\nReturns a borrowed iterator over all records as strings.\nRewinds the underlying reader to first data record.\nSeeks the underlying reader to the position given.\nThis is like <code>seek</code>, but provides direct control over how …\nSet the headers of this CSV parser manually as raw bytes.\nSet the headers of this CSV parser manually.\nSet the position of this record.\nThe record terminator to use when parsing CSV.\nTrim the fields of this record so that leading and …\nWhether fields are trimmed of leading and trailing …\nTruncate this record to <code>n</code> fields.\nCreate a new empty <code>ByteRecord</code> with the given capacity …\nOptions to serialize logical types to CSV The default is …\nused for <code>DataType::Date32</code>\nused for <code>DataType::Date64</code>\nused as separator/delimiter\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns a <code>StreamingIterator</code> that yields <code>&amp;[u8]</code> serialized …\nquoting character\nSerializes <code>Chunk</code> to a vector of rows. The vector is …\nused for <code>DataType::Time32</code>\nused for <code>DataType::Time64</code>\nused for <code>DataType::Timestamp</code>\nWrites <code>Chunk</code> to <code>writer</code> according to the serialization …\nWrites a CSV header to <code>writer</code>\nOptions declaring the behaviour of writing to IPC\nWhether the buffers should be compressed and which codec …\nDeserializes <code>FlightData</code> representing a record batch …\nDeserializes <code>FlightData</code>, assuming it to be a dictionary …\nDeserializes <code>FlightData</code> into either a <code>Chunk</code> (when the …\nDeserialize an IPC message into <code>Schema</code>, <code>IpcSchema</code>. Use to …\nSerializes <code>Chunk</code> to a vector of <code>FlightData</code> representing …\nSerializes a <code>Schema</code> to <code>FlightData</code>.\nConvert a <code>Schema</code> to bytes in the format expected in …\nSerializes a <code>Schema</code> to <code>SchemaResult</code>.\nStruct containing <code>dictionary_id</code> and nested <code>IpcField</code>, …\nStruct containing fields and whether the file is written …\nA struct adapter of Read+Seek+Write to append to IPC files\ndictionary id\noptional children\nThe fields in the schema\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEndianness of the file\nAPIs to read Arrow’s IPC format.\nAPIs to write to Arrow’s IPC format.\nhow dictionaries are tracked in this crate\nThe record contains a number of buffers that does not …\nMetadata of an Arrow IPC file, written in the footer of …\nAn iterator of <code>Chunk</code>s from an Arrow IPC file.\nA bitmap’s size is smaller than the required for the …\nA buffer’s size is smaller than the required for the …\nA buffer’s size is larger than the file size\nFixedSizeBinaryArray has invalid datatype.\nThe block is an invalid flatbuffer\nThe message’s body length is an invalid flatbuffer\nThe message’s buffers is an invalid flatbuffer\nThe compression is an invalid flatbuffer\nThe message’s data is an invalid flatbuffer\nThe footer’s dictionaries is an invalid flatbuffer\nThe footer is an invalid flatbuffer\nThe message’s header is an invalid flatbuffer\nThe dictionary id is an invalid flatbuffer\nThe dictionary is_delta is an invalid flatbuffer\nThe dictionary message is an invalid flatbuffer\nThe message’s nodes is an invalid flatbuffer\nThe footer’s record batches is an invalid flatbuffer\nThe footer’s schema is an invalid flatbuffer\nThe version is an invalid flatbuffer\nThe IPC file does not end with [b’A’, b’R’, b’R…\nThe IPC file does not start with [b’A’, b’R’, b’R…\nInvalid dictionary id\nField id is not a dictionary\nThe message does not contain data\nThe file’s schema does not contain fields\nRecordBatch messages do not contain buffers\nThe message does not contain a header\nRecordBatch messages does not contain nodes\nThe file’s footer does not contain record batches\nThe file’s footer does not contain a schema\nThe first 4 bytes of the last 10 bytes is &lt; 0\nThe different types of errors that reading from IPC can …\nNext item in the stream\nMetadata of an Arrow IPC stream, written at the start of …\nArrow Stream reader.\nEncodes the stream’s status after each read.\ndictionaries can only contain dictionary messages; record …\nRelative positions in the file is &lt; 0\nA live stream without data\nThe blocks in the file\nDeserialize an flatbuffers-encoded Schema message into …\nAsync reader for Arrow IPC files\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the inner memory scratches so they can be reused in a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this FileReader, returning the underlying reader\nThe files’ <code>IpcSchema</code>\nThe IPC fields tracking dictionaries\nCheck if the stream is finished\nReturns the <code>FileMetadata</code>\nReturn the schema of the stream\nCreates a new <code>FileReader</code>. Use <code>projection</code> to only take …\nTry to create a new stream reader\nReads the record batch at position <code>index</code> from the reader.\nReads all file’s dictionaries, if any This function is …\nRead the Arrow IPC file’s metadata\nReads the metadata of the stream\nReturn the schema of the file\nReturn the schema of the file\nThe schema that is read from the file footer\nThe schema that is read from the stream’s first message\nSet the inner memory scratches so they can be reused in a …\nThe total size of the file in bytes\nAPIs to read Arrow streams asynchronously\nReturn the data inside this wrapper.\nThe IPC version of the stream\nThe size of the IPC buffer\nnumber of bytes of all buffers in the record\nthe size of the file\nDeclared number of elements in the buffer\nDeclared length of the bitmap\nNumber of bits on the IPC buffer\nThe requested dictionary id\nThe requested dictionary id\nBytes required for the <code>length</code> and <code>type</code>\nThe name of the <code>NativeType</code>\nAsync reader for Arrow IPC files\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet the metadata from the IPC file.\nCreate a new IPC file reader.\nRead the metadata from an IPC file.\nGet the projected schema from the IPC file.\nA <code>Stream</code> over an Arrow IPC stream that asynchronously …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturn the schema of the stream\nCreates a new <code>AsyncStreamReader</code>\nReads the <code>StreamMetadata</code> of the Arrow stream asynchronously\nCompression codec\nArrow file writer\nLZ4 (framed)\nAn array <code>Chunk</code> with optional accompanying IPC fields.\nArrow stream writer\nOptions declaring the behaviour of writing to IPC\nZSTD\nGet the Arrow columns in this record.\nWhether the buffers should be compressed and which codec …\nAssigns every dictionary field a unique ID\nGet the IPC fields for this record.\nAsync writer for IPC files.\nWrite continuation bytes, and mark the stream as done\nWrite footer and closing tag, then mark the writer as done\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the inner memory scratches so they can be reused in a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes itself, returning the inner writer.\nConsumes itself into the inner writer\nCreates a new <code>StreamWriter</code>\nCreates a new <code>FileWriter</code>.\nConverts a Schema and IpcFields to a flatbuffers-encoded …\nSet the inner memory scratches so they can be reused in a …\nStarts the stream by writing a Schema message to it. Use …\nWrites the header and first (schema) message to the file.\n<code>async</code> writing of arrow streams\nCreates a new <code>FileWriter</code> from an existing file, seeking to …\nCreates a new <code>FileWriter</code> and writes the header to <code>writer</code>\nWrites an <code>Array</code> to <code>arrow_data</code>\nWrites <code>Chunk</code> to the stream\nWrites <code>Chunk</code> to the file\nSink that writes array <code>chunks</code> as an IPC file.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new file writer.\nA sink that writes array <code>chunks</code> as an IPC stream.\nOptions declaring the behaviour of writing to IPC\nWhether the buffers should be compressed and which codec …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>StreamSink</code>.\nAPIs to read and deserialize from JSON\nAPIs to write to JSON\nDeserializes a <code>json</code> <code>Value</code> into an <code>Array</code> of <code>DataType</code> This …\nDeserializes a <code>json</code> <code>Value</code> serialized in Pandas record …\nInfers <code>DataType</code> from <code>Value</code>.\nInfers <code>Schema</code> from JSON <code>Value</code> in (pandas-compatible) …\nAn iterator which wraps a normal <code>Iterator</code>.\nA fallible, streaming iterator which can be advanced from …\nAn iterator over no items.\nThe error type of iteration.\nA fallible, streaming iterator.\nAn iterator which filters elements with a predicate.\nAn iterator which is well-behaved at the beginning and end …\nThe type being iterated over.\nAn iterator which applies a transform to elements.\nAn iterator which applies a transform to errors.\nAn iterator which applies a transform to elements.\n<code>FallibleStreamingIterator</code> that serializes a <code>Chunk</code> into …\n<code>FallibleStreamingIterator</code> that serializes an <code>Array</code> to …\nAn iterator which skips a number of initial elements.\nAn iterator which skips initial elements matching a …\nAn iterator which only returns a number of initial …\nAn iterator which only returns initial elements matching a …\nAdvances the iterator to the next position.\nAdvances the state of the iterator to the next item from …\nDetermines if all elements of the iterator satisfy a …\nDetermines if any elements of the iterator satisfy a …\nBorrows an iterator, rather than consuming it.\nConverts a normal <code>Iterator</code> over <code>Results</code> of references into …\nReturns the number of remaining elements in the iterator.\nReturns an iterator over no items.\nReturns an iterator which filters elements by a predicate.\nReturns the first element of the iterator which satisfies …\nCalls a closure on each element of an iterator.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns an iterator which is well-behaved at the beginning …\nReturns the current element.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator which applies a transform to elements.\nReturns an iterator that applies a transform to errors.\nReturns an iterator which applies a transform to elements.\nCreates a new <code>RecordSerializer</code>.\nCreates a new <code>Serializer</code>.\nAdvances the iterator, returning the next element.\nAdvances the back of the iterator, returning the last …\nReturns the <code>nth</code> element of the iterator.\nReturns the position of the first element matching a …\nReturns bounds on the number of remaining elements in the …\nReturns an iterator which skips the first <code>n</code> elements.\nReturns an iterator which skips the first sequence of …\nReturns an iterator which only returns the first <code>n</code> …\nReturns an iterator which only returns the first sequence …\nWrites valid JSON from an iterator of (assumed …\nA struct that represents an Arrow file with a schema and …\nA struct that partially reads the Arrow JSON record batch\nA struct that partially reads the Arrow JSON column/array\nA struct that partially reads the Arrow JSON dictionary …\nFields are left as JSON <code>Value</code> as they vary by <code>DataType</code>\nDictionary metadata\nA struct that partially reads the Arrow JSON schema.\nthe type of the integer in the dictionary\nThe batches\nthe bit width\nthe children\nthe children\nthe columns\nthe number of elements\nthe dictionary batch\nthe data\nThe dictionaries\nthe dictionary\nThe type\nThe fields\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nthe dictionary id\nthe id\nthe index type\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nwhether it is ordered\nwhether it is signed\nThe metadata\nthe fields’ metadata\nThe name\nits name\nwhether it is nullable\nthe offsets\nAPI to read from Arrow JSON integration format\nThe schema\nthe type id for union types\nthe validity bitmap\nAPI to write to Arrow JSON integration format\nDeserializes a <code>ArrowJsonBatch</code> to a <code>Chunk</code>\nDeserializes a <code>Value</code>\nConstruct an <code>Array</code> from the JSON integration format\nSerializes a <code>Chunk</code> to <code>ArrowJsonBatch</code>.\nSerializes a <code>Schema</code> and associated <code>IpcField</code> to …\nAPIs to read and deserialize NDJSON.\nAPIs to serialize and write to NDJSON.\nThe error type of iteration.\nA fallible, streaming iterator.\nA <code>FallibleStreamingIterator</code> of NDJSON rows.\nThe type being iterated over.\nAdvances the iterator to the next position.\nDetermines if all elements of the iterator satisfy a …\nDetermines if any elements of the iterator satisfy a …\nBorrows an iterator, rather than consuming it.\nReturns the number of remaining elements in the iterator.\nDeserializes rows into an <code>Array</code> of <code>DataType</code>.\nDeserializes an iterator of rows into an <code>Array</code> of <code>DataType</code>.\nReturns an iterator which filters elements by a predicate.\nReturns the first element of the iterator which satisfies …\nCalls a closure on each element of an iterator.\nReturns the argument unchanged.\nReturns an iterator which is well-behaved at the beginning …\nReturns the current element.\nInfers the <code>DataType</code> from an NDJSON file, optionally only …\nInfers the <code>DataType</code> from an iterator of JSON strings. A …\nCalls <code>U::from(self)</code>.\nDeconstruct <code>FileReader</code> into the reader and the internal …\nReturns an iterator which applies a transform to elements.\nReturns an iterator that applies a transform to errors.\nReturns an iterator which applies a transform to elements.\nCreates a new <code>FileReader</code> from a reader and <code>rows</code>.\nAdvances the iterator, returning the next element.\nReturns the <code>nth</code> element of the iterator.\nReturns the position of the first element matching a …\nReturns bounds on the number of remaining elements in the …\nReturns an iterator which skips the first <code>n</code> elements.\nReturns an iterator which skips the first sequence of …\nReturns an iterator which only returns the first <code>n</code> …\nReturns an iterator which only returns the first sequence …\nThe error type of iteration.\nA fallible, streaming iterator.\nAn iterator adapter that receives an implementer of <code>Write</code> …\nThe type being iterated over.\n<code>FallibleStreamingIterator</code> that serializes an <code>Array</code> to …\nAdvances the iterator to the next position.\nDetermines if all elements of the iterator satisfy a …\nDetermines if any elements of the iterator satisfy a …\nBorrows an iterator, rather than consuming it.\nReturns the number of remaining elements in the iterator.\nReturns an iterator which filters elements by a predicate.\nReturns the first element of the iterator which satisfies …\nCalls a closure on each element of an iterator.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns an iterator which is well-behaved at the beginning …\nReturns the current element.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inner content of this iterator\nReturns an iterator which applies a transform to elements.\nReturns an iterator that applies a transform to errors.\nReturns an iterator which applies a transform to elements.\nCreates a new <code>FileWriter</code>.\nCreates a new <code>Serializer</code>.\nAdvances the iterator, returning the next element.\nReturns the <code>nth</code> element of the iterator.\nReturns the position of the first element matching a …\nReturns bounds on the number of remaining elements in the …\nReturns an iterator which skips the first <code>n</code> elements.\nReturns an iterator which skips the first sequence of …\nReturns an iterator which only returns the first <code>n</code> …\nReturns an iterator which only returns the first sequence …\nAPIs to read from ODBC\nAPIs to write to ODBC\nCreates a <code>api::buffers::ColumnarBuffer</code> from the metadata.\nDeserializes a <code>AnyColumnView</code> into an array of <code>DataType</code>. …\nInfers the Arrow <code>Field</code>s from a <code>ResultSetMetadata</code>\nA writer of <code>Chunk</code>s to an ODBC <code>api::Prepared</code> statement.\nCreates a <code>api::buffers::ColumnarBuffer</code> from …\nReturns the argument unchanged.\nInfers the <code>api::ColumnDescription</code> from the fields\nCalls <code>U::from(self)</code>.\nSerializes an <code>Array</code> to <code>api::buffers::AnyColumnViewMut</code> This …\nCreates a new <code>Writer</code>.\nWrites a chunk to the writer.\nAPIs to read from ORC format.\nDeserializes column <code>column</code> from <code>stripe</code>, assumed to …\nInfers a <code>Schema</code> from the files’ <code>Footer</code>.\nAPIs to read from Parquet format.\nAPIs to write to Parquet format.\nType def for a sharable, boxed dyn <code>Iterator</code> of arrays\nA <code>FallibleStreamingIterator</code> that decompresses …\nAn embedded BSON document\nMetadata for a column chunk.\nA descriptor for leaf-level primitive columns. This …\nA <code>CompressedDataPage</code> is compressed, encoded representation …\nA <code>DataPage</code>\nA Date\nA decimal value.\nDecompressor that allows re-using the page buffer of …\nA <code>DictPage</code>\nan enum is converted into a binary field\nThe error type of iteration.\nA fallible, streaming iterator.\nError presented when trying to use a code branch that …\nError presented when trying to use a feature from parquet …\nMetadata for a Parquet file.\nAn iterator of <code>Chunk</code>s coming from row groups of a parquet …\nIterator finished\nThe initial info of nested data types.\nA signed integer value.\nAn interval of time\nWhen encoding, the user passed an invalid parameter\nThe type being iterated over.\nAn embedded JSON document\nList data types\nA special kind of fallible streaming iterator where <code>advance</code>…\nType def for a sharable, boxed dyn <code>Iterator</code> of …\nThe state of nested data types.\nWhen the parquet file is known to be out of spec.\nA <code>Page</code> is an uncompressed, encoded representation of a …\nType declaration for a page filter\nA fallible <code>Iterator</code> of <code>CompressedDataPage</code>. This iterator …\nTrait describing a <code>FallibleStreamingIterator</code> of <code>Page</code>\nErrors generated by this crate\nRepresentation of a Parquet type describing primitive and …\nThe set of all physical types representable in Parquet\nPrimitive data types\nA <code>MutStreamingIterator</code> of pre-read column chunks\nAn <code>Iterator</code> of <code>Chunk</code> that (dynamically) adapts a vector of …\nMetadata for a row group.\nAn [<code>Iterator&lt;Item=RowGroupDeserializer&gt;</code>] from row groups …\nIterator still has elements\nState of <code>MutStreamingIterator</code>.\nStruct data types\nAn iterator adapter over <code>NestedArrayIter</code> assumed to be …\nA time.\nA time\nA date/time combination\nA date/time combination\nAn unsigned integer value.\nWhen decoding or decompressing, the page would allocate …\nReads the column indexes of all <code>ColumnChunkMetaData</code> and …\nReads a <code>FileMetaData</code> from the reader, located at the end …\nAsynchronously reads the files’ metadata\nAdvances the iterator to the next position.\nDetermines if all elements of the iterator satisfy a …\nDetermines if any elements of the iterator satisfy a …\nThe <code>ParquetType</code> this descriptor is a leaf of\nBorrows an iterator, rather than consuming it.\nReturns the offset and length in bytes of the column chunk …\nReturns this column’s <code>ColumnChunk</code>\nReturns the encoding for this column\nAn iterator adapter that maps multiple iterators of <code>Pages</code> …\nColumn (sort) order used for <code>min</code> and <code>max</code> values of each …\nReturns slice of column chunk metadata.\nReturns the total compressed data size of this column …\nTotal size of all compressed column data in this row group.\n<code>Compression</code> for this column.\nReturns the number of remaining elements in the iterator.\nCreates a new <code>ListArray</code> or <code>FixedSizeListArray</code>.\nCreates a new <code>MapArray</code>.\nString message for application that wrote this file.\nReturns the offset for the column data.\nDecompresses the page, using <code>buffer</code> for decompression. If …\nThe <code>ColumnDescriptor</code> for this column. This descriptor …\nThe descriptor this columns’ leaf.\nReturns the offset for the dictionary page, if any.\nByte offset in <code>file_path()</code>.\nFile where the column chunk is stored.\nReturns an iterator which filters elements by a predicate.\nReturns the first element of the iterator which satisfies …\nCalls a closure on each element of an iterator.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns an iterator which is well-behaved at the beginning …\nReturns the current element.\nReturns a <code>ColumnIterator</code> of column chunks corresponding to …\nReturns all <code>ColumnChunkMetaData</code> associated to <code>field_name</code>. …\nReturns all <code>ColumnChunkMetaData</code> associated to <code>field_name</code>. …\nCreates a new iterator of compressed pages.\nReturns a stream of compressed data pages\nReturns <code>true</code> if this column chunk contains a index page, …\nReturns the offset for the index page.\nAPI to perform page-level filtering (also known as indexes)\nInitialize <code>NestedState</code> from <code>&amp;[InitNested]</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns two buffers: the first buffer corresponds to the …\nReturns its internal buffer, consuming itself.\nReturns the reader and this Readers’ interval buffer\nMethod to convert to Thrift.\nkey_value_metadata of this file.\nThe number of rows in this state\nReturns an iterator which applies a transform to elements.\nReturns an iterator that applies a transform to errors.\nReturns an iterator which applies a transform to elements.\nThe column’s <code>ColumnMetaData</code>\nReturns the number of (parquet) columns that a <code>DataType</code> …\nThe nesteds composing <code>NestedState</code>.\nBasically the same as <code>column_iter_to_arrays</code>, with the …\nCreates a new <code>Decompressor</code>.\nReturns a new <code>BasicDecompressor</code>.\nReturns a new <code>PageReader</code>.\nReturns a new <code>ColumnChunkMetaData</code>\nCreates new descriptor for leaf-level column.\nCreate a new <code>RowGroupMetaData</code>\nReturns a new <code>ReadColumnIterator</code>\nCreates a new <code>StructIterator</code> with <code>iters</code> and <code>fields</code>.\nReturns a new <code>FileReader</code>.\nReturns a new <code>RowGroupReader</code>\nCreates a new <code>RowGroupDeserializer</code>.\nCreates a new <code>NestedState</code>.\nCreate a a new <code>PageReader</code> with <code>PageMetaData</code>.\nAdvances the iterator, returning the next element.\nReturns the <code>nth</code> element of the iterator.\nNumber of rows in this row group.\nReturns the number of rows on this row group\nnumber of rows in the file.\nTotal number of values in this column chunk. Note that …\nThe path of this column. For instance, “a.b.c.d”.\nThe <code>PhysicalType</code> of this column.\nReturns the position of the first element matching a …\nReads all columns that are part of the parquet field …\nReads all columns that are part of the parquet field …\nReturns a vector of iterators of <code>Array</code> (<code>ArrayIter</code>) …\nReturns a vector of iterators of <code>Array</code> corresponding to …\nReads parquets’ metadata syncronously.\nReads parquets’ metadata asynchronously.\nRead <code>PageLocation</code>s from the <code>ColumnChunkMetaData</code>s. Returns …\nThe row groups of this file\nAPIs to handle Parquet &lt;-&gt; Arrow schemas.\nReturns the <code>Schema</code> associated to this file.\nschema descriptor.\nReturns bounds on the number of remaining elements in the …")