searchState.loadedDescShard("arrow2", 1, "Returns an iterator which skips the first <code>n</code> elements.\nReturns an iterator which skips the first sequence of …\nAPIs exposing <code>parquet2</code>’s statistics as arrow’s …\nDecodes the raw statistics into <code>Statistics</code>.\nReturns an iterator which only returns the first <code>n</code> …\nReturns an iterator which only returns the first sequence …\nConverts a vector of columns associated with the parquet …\nTotal byte size of all uncompressed column data in this …\nReturns the total uncompressed data size of this column …\nversion of this file.\n<code>ColumnPageStatistics</code> contains the minimum, maximum, and …\nPage statistics of an Arrow field.\nAn enum describing a page that was either selected in a …\nAn interval\nVariant used for fields with multiple parquet columns …\nVariant used for fields with a single parquet column (e.g. …\nReturns the set of (row) intervals of the pages.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nChecks whether the row group have page index information …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIts length\nThe maximum values in the pages\nThe minimum values in the pages\nCreate a new interal\nThe number of null values in the pages.\nReads the column indexes from the reader assuming a valid …\nReads all page locations and index locations (IO-bounded) …\nrows to select from the page\nIts start\nLocation of the page in the file\nMetadata for a Parquet file.\nWrapper struct to store key values\nRepresentation of a Parquet type describing primitive and …\nA schema descriptor. This encapsulates the top-level …\nOptions when inferring schemas from Parquet\nColumn (sort) order used for <code>min</code> and <code>max</code> values of each …\nString message for application that wrote this file.\nReturns the argument unchanged.\nInfers a <code>Schema</code> from parquet’s <code>FileMetaData</code>. This first …\nLike <code>infer_schema</code> but with configurable options which …\nWhen inferring schemas from the Parquet INT96 timestamp …\nCalls <code>U::from(self)</code>.\nkey_value_metadata of this file.\nnumber of rows in the file.\nConverts <code>ParquetType</code>s to a <code>Field</code>, ignoring parquet fields …\nLike <code>parquet_to_arrow_schema</code> but with configurable options …\nReads an arrow schema from Parquet’s file metadata. …\nThe row groups of this file\nschema descriptor.\nversion of this file.\nArrow-deserialized parquet Statistics of a file\nDeserializes the statistics in the column chunks from all …\nnumber of dictinct values. This is a <code>UInt64Array</code> for …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMaximum\nMinimum\nnumber of nulls. This is a <code>UInt64Array</code> for non-nested types\nBit packed encoding.  This can only be used if the data …\nRepresents a valid brotli compression level.\nEncoding for floating-point data. K byte-streams are …\nA <code>CompressedDataPage</code> is compressed, encoded representation …\nA <code>CompressedPage</code> is a compressed, encoded representation …\nDefines the compression settings for writing a parquet …\nA <code>FallibleStreamingIterator</code> that consumes <code>Page</code> and yields …\nA <code>DataPage</code>\nDelta encoding for integers. This can be used for int …\nIncremental-encoded byte array. Prefix lengths are encoded …\nEncoding for byte arrays to separate the length values and …\nA descriptor of a parquet column. It contains the …\nA <code>DictPage</code>\n<code>DynIter</code> is an implementation of a single-threaded, …\nDynamically-typed <code>FallibleStreamingIterator</code>.\nThe error type of iteration.\nA fallible, streaming iterator.\nCommon type information.\nMetadata for a Parquet file.\nSink that writes array <code>chunks</code> as a Parquet file.\nAn interface to write a parquet to a <code>Write</code>\nRepresents a valid gzip compression level.\nThe type being iterated over.\nWrapper struct to store key values\na list\na list\nDescriptor of nested information of a field\nA <code>Page</code> is an uncompressed, encoded representation of a …\nThe set of all physical types representable in Parquet\nRepresentation of a Parquet type describing primitive and …\nDefault encoding. BOOLEAN - 1 bit per value. 0 is false; 1 …\nDeprecated: Dictionary encoding. The values in the …\na primitive (leaf or parquet column) bitmap, _, length\nGroup packed run length encoding. Usable for …\nDictionary encoding: the ids are encoded using the RLE …\nAn iterator adapter that converts an iterator over <code>Chunk</code> …\nA schema descriptor. This encapsulates the top-level …\na struct\nDescription for file metadata\nThe parquet version to use\nCurrently supported options to write to parquet\nRepresents a valid zstd compression level.\nAdvances the iterator to the next position.\nDetermines if all elements of the iterator satisfy a …\nDetermines if any elements of the iterator satisfy a …\nReturns a vector of iterators of <code>Page</code>, one per leaf column …\nConverts an <code>Array</code> to a <code>CompressedPage</code> based on options, …\nConverts an <code>Array</code> to a <code>CompressedPage</code> based on options, …\nReturns an iterator of <code>Page</code>.\nBorrows an iterator, rather than consuming it.\nChecks whether the <code>data_type</code> can be encoded as <code>encoding</code>. …\nChecks if <code>sub_type</code> schema is part of current schema. This …\nReturns column order for <code>i</code>th column in this file. If …\nSort order used for the min_value and max_value fields in …\nColumn (sort) order used for <code>min</code> and <code>max</code> values of each …\nThe <code>ColumnDescriptor</code> (leafs) of this schema.\nCompresses an [<code>EncodedPage</code>] into a <code>CompressedPage</code> using …\nThe compression of the data in this page. Note that what …\nThe compression to apply to every page\nReturns the compression level.\nReturns the compression level.\nReturns the compression level.\nReturns the number of remaining elements in the iterator.\nString for application that wrote this file.  This should …\nString message for application that wrote this file.\nThe size to flush a page, defaults to 1024 * 1024 if None\nEncryption algorithm. This field is set only in encrypted …\nWrites the footer of the parquet file. Returns the total …\nThe schemas’ fields.\nReturns an iterator which filters elements by a predicate.\nReturns the first element of the iterator which satisfies …\nRetrieval metadata of key used for signing the footer. …\nCalls a closure on each element of an iterator.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHelper method to create a <code>ParquetType::PrimitiveType</code> …\nReturns an iterator which is well-behaved at the beginning …\nReturns the current element.\nReturns <code>FieldInfo</code> information about the type.\nGet the length of <code>Array</code> that should be sliced.\nthe optional id, to select fields by id\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDeconstructs itself into its iterator and scratch buffer.\nConsumes this writer and returns the inner writer\nReturns the underlying writer and <code>ThriftFileMetaData</code>\nSerializes itself to thrift’s …\nreturns the metadata\nOptional key/value metadata *\nkey_value_metadata of this file.\nReturns the length (number of rows) of the element\nReturns an iterator which applies a transform to elements.\nReturns an iterator that applies a transform to errors.\nReturns an iterator which applies a transform to elements.\nThe maximum definition level\nThe maximum repetition level\nKey-value metadata that will be written to the file on …\nThe schemas’ name.\nReturns this type’s field name.\nThe field name\nCreates a new <code>Compressor</code>\nReturns a new <code>DynIter</code>, boxing the incoming iterator\nReturns a new <code>DynStreamingIterator</code>, boxing the incoming …\nCreates new schema descriptor from Parquet schema.\nReturns a new <code>CompressedDataPage</code>.\nCreates a new <code>Compressor</code> (same as <code>new</code>)\nAdvances the iterator, returning the next element.\nReturns the <code>nth</code> element of the iterator.\nNumber of rows in this file *\nnumber of rows in the file.\nreturn number values of the nested\nThe options assigned to the file\nThe write options for the file.\nThe <code>SchemaDescriptor</code> assigned to this file\nReturns the <code>SchemaDescriptor</code> of the <code>RowGroupIterator</code>.\nThe Parquet <code>SchemaDescriptor</code> for the file.\nReturns the position of the first element matching a …\nThe <code>PrimitiveType</code> of this column\nThe repetition\nMaps a <code>Chunk</code> and parquet-specific options to an …\nRow groups in this file *\nThe row groups of this file\nReturns the <code>SchemaDescriptor</code> that describes schema of this …\nThe <code>Schema</code> assigned to this file\nThe Arrow <code>Schema</code> for the file.\nParquet schema for this file.  This schema contains …\nschema descriptor.\nthe rows to be selected by this page. When <code>None</code>, all rows …\nReturns bounds on the number of remaining elements in the …\nReturns an iterator which skips the first <code>n</code> elements.\nReturns an iterator which skips the first sequence of …\nreturns offset and length to slice the leaf values\nSlices the <code>Array</code> to <code>Box&lt;dyn Array&gt;</code> and <code>Vec&lt;Nested&gt;</code>.\nDecodes the raw statistics into a statistics\nReturns an iterator which only returns the first <code>n</code> …\nReturns an iterator which only returns the first sequence …\nConvert <code>Array</code> to <code>Vec&lt;&amp;dyn Array&gt;</code> leaves in DFS order.\nConstructs the necessary <code>Vec&lt;Vec&lt;Nested&gt;&gt;</code> to write the rep …\nConvert <code>ParquetType</code> to <code>Vec&lt;ParquetPrimitiveType&gt;</code> leaves in …\nCreates a parquet <code>SchemaDescriptor</code> from a <code>Schema</code>.\nCreates a <code>ParquetType</code> from a <code>Field</code>.\nTransverses the <code>data_type</code> up to its (parquet) columns and …\nCreates a schema from\nError\nDeserializes <code>crate::thrift_format::FileMetaData</code> into this …\nMethod to convert from Thrift.\nAttempts to create a brotli compression level.\nAttempts to create a gzip compression level.\nAttempts to create a zstd compression level from a given …\nReturns a new <code>FileWriter</code>.\nCreates a new <code>RowGroupIterator</code> from an iterator over <code>Chunk</code>.\nCreate a new sink that writes arrays to the provided <code>writer</code>…\nVersion of this file *\nversion of this file.\nThe page and file version to use\nWrites a row group to the file.\nwrites the def levels to a <code>Vec&lt;u8&gt;</code> and returns it.\nWrites a parquet file containing only the header and footer\nWrite <code>repetition_levels</code> and <code>definition_levels</code> to buffer.\nWhether to write statistics\nReturns a visual representation of <code>Chunk</code>\nMemory maps dictionaries from an IPC file into\nMemory maps an record batch from an IPC file into a <code>Chunk</code>.\nA wrapper type of <code>Vec&lt;O&gt;</code> representing the invariants of …\nA wrapper type of <code>Buffer&lt;O&gt;</code> that is guaranteed to:\nReturns the byte slice stored in this buffer\nReturns the byte slice stored in this buffer\nReturns a reference to its internal <code>Buffer</code>.\nReturns the capacity of <code>Offsets</code>.\nExtends itself with <code>additional</code> elements equal to the last …\nReturns the first offset.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inner <code>Vec</code>.\nReturns the inner <code>Buffer</code>.\nCopy-on-write API to convert <code>OffsetsBuffer</code> into <code>Offsets</code>.\nReturns the last offset of this container.\nReturns the last offset.\nReturns the number of offsets in this container.\nReturns the number of offsets in this container.\nReturns the length an array with these offsets would be.\nReturns the length an array with these offsets would be.\nReturns an iterator with the lengths of the offsets\nReturns an empty <code>Offsets</code> (i.e. with a single element, the …\nReturns an empty <code>OffsetsBuffer</code> (i.e. with a single …\nReturns <code>Offsets</code> assuming that <code>offsets</code> fulfills its …\nSafety\nReturns an <code>Offsets</code> whose all lengths are zero.\nPops the last element\nReturns the range of the offsets.\nReserves <code>additional</code> entries.\nShrinks the capacity of self to fit.\nSlices this <code>OffsetsBuffer</code>.\nSlices this <code>OffsetsBuffer</code> starting at <code>offset</code>.\nReturns a range (start, end) corresponding to the position …\nReturns a range (start, end) corresponding to the position …\nReturns a range (start, end) corresponding to the position …\nReturns a range (start, end) corresponding to the position …\nTry extend from an iterator of lengths\nExtends itself from another <code>Offsets</code>\nExtends itself from another <code>Offsets</code> sliced by <code>start, length</code>\nCreates a new <code>Offsets</code> from an iterator of lengths\nTry to create a new <code>Offsets</code> from a sequence of <code>lengths</code>\nPushes a new element with a given length.\nPushes a new element with a given length.\nReturns a new <code>Offsets</code> with a capacity, allocating at least …\nThe <code>Scalar</code> implementation of binary (<code>Option&lt;Vec&lt;u8&gt;&gt;</code>).\nThe <code>Scalar</code> implementation of a boolean.\nThe <code>DictionaryArray</code> equivalent of <code>Array</code> for <code>Scalar</code>.\nThe <code>Scalar</code> implementation of fixed size binary ([…\nThe scalar equivalent of <code>FixedSizeListArray</code>. Like …\nThe scalar equivalent of <code>ListArray</code>. Like <code>ListArray</code>, this …\nThe scalar equivalent of <code>MapArray</code>. Like <code>MapArray</code>, this …\nThe representation of a single entry of a …\nThe implementation of <code>Scalar</code> for primitive, semantically …\nTrait object declaring an optional value with a <code>DataType</code>. …\nA single entry of a <code>crate::array::StructArray</code>.\nA single entry of a <code>crate::array::UnionArray</code>.\nThe implementation of <code>Scalar</code> for utf8, semantically …\nconvert itself to\nthe logical type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nwhether it is valid\nreturns a new <code>DictionaryScalar</code>\nReturns a new <code>PrimitiveScalar</code>.\nReturns a new <code>Utf8Scalar</code>\nReturns a new <code>BinaryScalar</code>.\nReturns a new <code>BooleanScalar</code>\nreturns a new <code>ListScalar</code>\nreturns a new <code>MapScalar</code>\nA new <code>NullScalar</code>\nReturns a new <code>StructScalar</code>\nreturns a new <code>FixedSizeListScalar</code>\nReturns a new <code>FixedSizeBinaryScalar</code>.\nReturns a new <code>UnionScalar</code>\ncreates a new <code>Scalar</code> from an <code>Array</code>.\nReturns a new <code>PrimitiveScalar</code> with the same value but …\nReturns the type of the union scalar\nThe values of the <code>DictionaryScalar</code>\nReturns the optional value.\nReturns the value irrespectively of the validity.\nIts value\nThe value\nIts value\nReturns the inner value\nThe values of the <code>ListScalar</code>\nThe values of the <code>MapScalar</code>\nReturns the values irrespectively of the validity.\nThe values of the <code>FixedSizeListScalar</code>\nNumber of days between 0001-01-01 and 1970-01-01\nNumber of microseconds in a second\nNumber of milliseconds in a second\nNumber of milliseconds in a day\nNumber of nanoseconds in a second\nNumber of seconds in a day\nAdds an <code>interval</code> to a <code>timestamp</code> in <code>time_unit</code> units and …\nAdds an <code>interval</code> to a <code>timestamp</code> in <code>time_unit</code> units without …\nconverts a <code>i32</code> representing a <code>date32</code> to <code>NaiveDate</code>\nconverts a <code>i32</code> representing a <code>date32</code> to <code>NaiveDate</code>\nconverts a <code>i32</code> representing a <code>date32</code> to <code>NaiveDateTime</code>\nconverts a <code>i32</code> representing a <code>date32</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>date64</code> to <code>NaiveDate</code>\nconverts a <code>i64</code> representing a <code>date64</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>duration(ms)</code> to <code>Duration</code>\nconverts a <code>i64</code> representing a <code>duration(ns)</code> to <code>Duration</code>\nconverts a <code>i64</code> representing a <code>duration(s)</code> to <code>Duration</code>\nconverts a <code>i64</code> representing a <code>duration(us)</code> to <code>Duration</code>\nParses an offset of the form <code>&quot;+WX:YZ&quot;</code> or <code>&quot;UTC&quot;</code> into …\nParses <code>value</code> to a <code>chrono_tz::Tz</code> with the Arrow’s …\nconverts a <code>i32</code> representing a <code>time32(ms)</code> to <code>NaiveTime</code>\nconverts a <code>i32</code> representing a <code>time32(s)</code> to <code>NaiveTime</code>\nconverts a <code>i64</code> representing a <code>time64(ns)</code> to <code>NaiveTime</code>\nconverts a <code>i64</code> representing a <code>time64(ns)</code> to <code>NaiveTime</code>\nconverts a <code>i64</code> representing a <code>time64(us)</code> to <code>NaiveTime</code>\nconverts a <code>i64</code> representing a <code>time64(us)</code> to <code>NaiveTime</code>\nconverts a <code>i64</code> representing a <code>timestamp(ms)</code> to …\nconverts a <code>i64</code> representing a <code>timestamp(ms)</code> to …\nconverts a <code>i64</code> representing a <code>timestamp(ns)</code> to …\nconverts a <code>i64</code> representing a <code>timestamp(ns)</code> to …\nconverts a <code>i64</code> representing a <code>timestamp(s)</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>timestamp(s)</code> to <code>NaiveDateTime</code>\nConverts a timestamp in <code>time_unit</code> and <code>timezone</code> into …\nConverts a timestamp in <code>time_unit</code> and <code>timezone</code> into …\nconverts a <code>i64</code> representing a <code>timestamp(us)</code> to …\nconverts a <code>i64</code> representing a <code>timestamp(us)</code> to …\nCalculates the scale factor between two TimeUnits. The …\nParses a <code>Utf8Array</code> to naive timestamp, i.e. …\nParses <code>value</code> to <code>Option&lt;i64&gt;</code> consistent with the Arrow’s …\nParses <code>value</code> to <code>Option&lt;i64&gt;</code> consistent with the Arrow’s …\nParses a <code>Utf8Array</code> to a timeozone-aware timestamp, i.e. …\nParses <code>value</code> to <code>Option&lt;i64&gt;</code> consistent with the Arrow’s …\nParses <code>value</code> to <code>Option&lt;i64&gt;</code> consistent with the Arrow’s …\nAn iterator of known, fixed size. A trait denoting Rusts’…\nA chunk of bits. This is used to create masks of a given …\nAn [<code>Iterator&lt;Item=bool&gt;</code>] over a <code>BitChunk</code>. This iterator is …\nAn [<code>Iterator&lt;Item=usize&gt;</code>] over a <code>BitChunk</code> returning the …\nType denoting its representation as bytes. This is <code>[u8; N]</code> …\nTwo i32 representing days and ms\nThe difference between 1.0 and the next largest …\nA 16-bit floating point number.\nA 32-bit floating point number.\nA 64-bit floating point number.\nWhether it is <code>i32</code> (false) or <code>i64</code> (true).\nSealed trait describing the subset of <code>NativeType</code> (<code>i32</code>, <code>i64</code>…\nRange of <code>Index</code>, equivalent to <code>(a..b)</code>. <code>Step</code> is unstable in …\nA signed 128-bit integer.\nA signed 16-bit integer.\nA signed 256-bit integer.\nA signed 32-bit integer.\nA signed 64-bit integer.\nA signed 8-bit integer.\nmonths_days_ns(i32, i32, i64)\nSealed trait implemented by all physical types that can be …\nSealed trait describing the subset (<code>i32</code> and <code>i64</code>) of <code>Index</code> …\nThe corresponding variant of <code>PrimitiveType</code>.\nThe set of all implementations of the sealed trait …\nAn unsigned 16-bit integer.\nAn unsigned 32-bit integer.\nAn unsigned 64-bit integer.\nAn unsigned 8-bit integer.\nThe number of days\nThe number of days\nThe in-memory representation of the DayMillisecond variant …\nType representation of the Float16 physical type\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert itself from <code>usize</code>.\nFrom bytes in big endian\nCasts from u16.\nCasts an <code>f32</code> into <code>f16</code>\nFrom bytes in little endian\nconvert itself from bytes.\nConvert itself from <code>usize</code>.\nReturns a new <code>i256</code> from two <code>i128</code>.\nPhysical representation of a decimal\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe number of milliseconds\nThe number of months\nThe in-memory representation of the MonthDayNano variant …\nCreates a new <code>BitChunkIter</code> with <code>len</code> bits.\nCreates a new <code>BitChunkOnes</code> with <code>len</code> bits.\nReturns a new <code>IndexRange</code>.\nA new <code>days_ms</code>.\nA new <code>months_days_ns</code>.\nThe number of nanoseconds\nAn iterator from (inclusive) <code>start</code> to (exclusive) <code>end</code>.\nAn iterator from (inclusive) <code>start</code> to (exclusive) <code>end</code>.\nContains traits and implementations of multi-data used in …\nTo bytes in big endian\nCasts to u16.\nCasts this <code>f16</code> to <code>f32</code>\nTo bytes in little endian\nconvert itself into bytes.\nConvert itself to <code>usize</code>.\nThe type holding bits for masks.\nDescribes the ability to convert itself from a <code>BitChunk</code>.\nNumber of lanes\nType used for masking.\nThe <code>NativeType</code> of this struct. E.g. <code>f32</code> for a …\nA struct that lends itself well to be compiled leveraging …\nTrait implemented by some <code>NativeType</code> that have a SIMD …\nThe SIMD type associated with this trait. This type …\nReturns a tuple of 3 items whose middle item is itself, …\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert itself from a slice.\nConvert itself from a slice.\ncreates a new Self from <code>v</code> by populating items from <code>v</code> up to …\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMulti-Data correspondence of the native type\nSets values to <code>default</code> based on <code>mask</code>.\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nMulti-Data correspondence of the native type\nConverts numeric type to a <code>String</code>\nConverts numeric type to a <code>String</code>\nConverts numeric type to a <code>String</code>")